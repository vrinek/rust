var searchIndex = {};
searchIndex['fmt_macros'] = {"items":[[0,"","fmt_macros","Macro support for format strings"],[3,"Argument","","Representation of an argument specification."],[12,"position","","Where to find this argument",0],[12,"format","","How to format the argument",0],[3,"FormatSpec","","Specification for the formatting of an argument in the format string."],[12,"fill","","Optionally specified character to fill alignment with",1],[12,"align","","Optionally specified alignment",1],[12,"flags","","Packed version of various flags provided",1],[12,"precision","","The integer precision to use",1],[12,"width","","The string width requested for the resulting format",1],[12,"ty","","The descriptor string representing the name of the format desired for\nthis argument, this can be empty or any number of characters, although\nit is required to be one word.",1],[3,"Parser","","The parser structure for interpreting the input format string. This is\nmodelled as an iterator over `Piece` structures to form a stream of tokens\nbeing output."],[12,"errors","","Error messages accumulated during parsing",2],[4,"Piece","","A piece is a portion of the format string which represents the next part\nto emit. These are emitted as a stream by the `Parser` class."],[13,"String","","A literal string which should directly be emitted",3],[13,"NextArgument","","This describes that formatting should process the next argument (as\nspecified inside) for emission.",3],[4,"Position","","Enum describing where an argument for a format can be located."],[13,"ArgumentNext","","The argument will be in the next position. This is the default.",4],[13,"ArgumentIs","","The argument is located at a specific index.",4],[13,"ArgumentNamed","","The argument has a name.",4],[4,"Alignment","","Enum of alignments which are supported."],[13,"AlignLeft","","The value will be aligned to the left.",5],[13,"AlignRight","","The value will be aligned to the right.",5],[13,"AlignCenter","","The value will be aligned in the center.",5],[13,"AlignUnknown","","The value will take on a default alignment.",5],[4,"Flag","","Various flags which can be applied to format strings. The meaning of these\nflags is defined by the formatters themselves."],[13,"FlagSignPlus","","A `+` will be used to denote positive numbers.",6],[13,"FlagSignMinus","","A `-` will be used to denote negative numbers. This is the default.",6],[13,"FlagAlternate","","An alternate form will be used for the value. In the case of numbers,\nthis means that the number will be prefixed with the supplied string.",6],[13,"FlagSignAwareZeroPad","","For numbers, this means that the number will be padded with zeroes,\nand the sign (`+` or `-`) will precede them.",6],[4,"Count","","A count is used for the precision and width parameters of an integer, and\ncan reference either an argument or a literal integer."],[13,"CountIs","","The count is specified explicitly.",7],[13,"CountIsName","","The count is specified by the argument with the given name.",7],[13,"CountIsParam","","The count is specified by the argument at the given index.",7],[13,"CountIsNextParam","","The count is specified by the next parameter.",7],[13,"CountImplied","","The count is implied and cannot be explicitly specified.",7],[11,"eq","","",3],[11,"ne","","",3],[11,"eq","","",0],[11,"ne","","",0],[11,"eq","","",1],[11,"ne","","",1],[11,"eq","","",4],[11,"ne","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"eq","","",7],[11,"ne","","",7],[6,"Item","",""],[11,"next","","",2],[11,"new","","Creates a new parser for the given format string",2]],"paths":[[3,"Argument"],[3,"FormatSpec"],[3,"Parser"],[4,"Piece"],[4,"Position"],[4,"Alignment"],[4,"Flag"],[4,"Count"]]};
searchIndex['rustdoc'] = {"items":[[0,"","rustdoc",""],[5,"main","",""],[5,"opts","",""],[5,"usage","",""],[5,"main_args","",""],[0,"externalfiles","",""],[3,"ExternalHtml","rustdoc::externalfiles",""],[12,"in_header","","",0],[12,"before_content","","",0],[12,"after_content","","",0],[5,"load_string","",""],[5,"load_external_files","",""],[11,"clone","","",0],[11,"load","","",0],[0,"clean","rustdoc","This module contains the \"cleaned\" pieces of the AST, and the functions\nthat clean them."],[3,"Crate","rustdoc::clean",""],[12,"name","","",1],[12,"src","","",1],[12,"module","","",1],[12,"externs","","",1],[12,"primitives","","",1],[3,"ExternalCrate","",""],[12,"name","","",2],[12,"attrs","","",2],[12,"primitives","","",2],[3,"Item","","Anything with a source location and set of attributes and, optionally, a\nname. That is, anything that can be documented. This doesn't correspond\ndirectly to the AST's concept of an item; it's a strict superset."],[12,"source","","Stringified span",3],[12,"name","","Not everything has a name. E.g., impls",3],[12,"attrs","","",3],[12,"inner","","",3],[12,"visibility","","",3],[12,"def_id","","",3],[12,"stability","","",3],[3,"Module","",""],[12,"items","","",4],[12,"is_crate","","",4],[3,"TyParam","",""],[12,"name","","",5],[12,"did","","",5],[12,"bounds","","",5],[12,"default","","",5],[3,"Lifetime","",""],[3,"Generics","",""],[12,"lifetimes","","",6],[12,"type_params","","",6],[12,"where_predicates","","",6],[3,"Method","",""],[12,"generics","","",7],[12,"self_","","",7],[12,"unsafety","","",7],[12,"decl","","",7],[3,"TyMethod","",""],[12,"unsafety","","",8],[12,"decl","","",8],[12,"generics","","",8],[12,"self_","","",8],[3,"Function","",""],[12,"decl","","",9],[12,"generics","","",9],[12,"unsafety","","",9],[3,"FnDecl","",""],[12,"inputs","","",10],[12,"output","","",10],[12,"attrs","","",10],[3,"Arguments","",""],[12,"values","","",11],[3,"Argument","",""],[12,"type_","","",12],[12,"name","","",12],[12,"id","","",12],[3,"Trait","",""],[12,"unsafety","","",13],[12,"items","","",13],[12,"generics","","",13],[12,"bounds","","",13],[3,"PolyTrait","","A trait reference, which may have higher ranked lifetimes."],[12,"trait_","","",14],[12,"lifetimes","","",14],[3,"Struct","",""],[12,"struct_type","","",15],[12,"generics","","",15],[12,"fields","","",15],[12,"fields_stripped","","",15],[3,"VariantStruct","","This is a more limited form of the standard Struct, different in that\nit lacks the things most items have (name, id, parameterization). Found\nonly as a variant in an enum."],[12,"struct_type","","",16],[12,"fields","","",16],[12,"fields_stripped","","",16],[3,"Enum","",""],[12,"variants","","",17],[12,"generics","","",17],[12,"variants_stripped","","",17],[3,"Variant","",""],[12,"kind","","",18],[3,"Span","",""],[12,"filename","","",19],[12,"loline","","",19],[12,"locol","","",19],[12,"hiline","","",19],[12,"hicol","","",19],[3,"Path","",""],[12,"global","","",20],[12,"segments","","",20],[3,"PathSegment","",""],[12,"name","","",21],[12,"params","","",21],[3,"Typedef","",""],[12,"type_","","",22],[12,"generics","","",22],[3,"BareFunctionDecl","",""],[12,"unsafety","","",23],[12,"generics","","",23],[12,"decl","","",23],[12,"abi","","",23],[3,"Static","",""],[12,"type_","","",24],[12,"mutability","","",24],[12,"expr","","It's useful to have the value of a static documented, but I have no\ndesire to represent expressions (that'd basically be all of the AST,\nwhich is huge!). So, have a string.",24],[3,"Constant","",""],[12,"type_","","",25],[12,"expr","","",25],[3,"Impl","",""],[12,"generics","","",26],[12,"trait_","","",26],[12,"for_","","",26],[12,"items","","",26],[12,"derived","","",26],[12,"polarity","","",26],[3,"ImportSource","",""],[12,"path","","",27],[12,"did","","",27],[3,"ViewListIdent","",""],[12,"name","","",28],[12,"source","","",28],[3,"Macro","",""],[12,"source","","",29],[3,"Stability","",""],[12,"level","","",30],[12,"feature","","",30],[12,"since","","",30],[12,"reason","","",30],[3,"TypeBinding","","An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`"],[12,"name","","",31],[12,"ty","","",31],[4,"ItemEnum","",""],[13,"ExternCrateItem","","",32],[13,"ImportItem","","",32],[13,"StructItem","","",32],[13,"EnumItem","","",32],[13,"FunctionItem","","",32],[13,"ModuleItem","","",32],[13,"TypedefItem","","",32],[13,"StaticItem","","",32],[13,"ConstantItem","","",32],[13,"TraitItem","","",32],[13,"ImplItem","","",32],[13,"TyMethodItem","","A method signature only. Used for required methods in traits (ie,\nnon-default-methods).",32],[13,"MethodItem","","A method with a body.",32],[13,"StructFieldItem","","",32],[13,"VariantItem","","",32],[13,"ForeignFunctionItem","","`fn`s from an extern block",32],[13,"ForeignStaticItem","","`static`s from an extern block",32],[13,"MacroItem","","",32],[13,"PrimitiveItem","","",32],[13,"AssociatedTypeItem","","",32],[4,"Attribute","",""],[13,"Word","","",33],[13,"List","","",33],[13,"NameValue","","",33],[4,"TyParamBound","",""],[13,"RegionBound","","",34],[13,"TraitBound","","",34],[4,"WherePredicate","",""],[13,"BoundPredicate","","",35],[12,"ty","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"RegionPredicate","rustdoc::clean","",35],[12,"lifetime","rustdoc::clean::WherePredicate","",35],[12,"bounds","","",35],[13,"EqPredicate","rustdoc::clean","",35],[12,"lhs","rustdoc::clean::WherePredicate","",35],[12,"rhs","","",35],[4,"SelfTy","rustdoc::clean",""],[13,"SelfStatic","","",36],[13,"SelfValue","","",36],[13,"SelfBorrowed","","",36],[13,"SelfExplicit","","",36],[4,"FunctionRetTy","",""],[13,"Return","","",37],[13,"DefaultReturn","","",37],[13,"NoReturn","","",37],[4,"TraitMethod","","An item belonging to a trait, whether a method or associated. Could be named\nTraitItem except that's already taken by an exported enum variant."],[13,"RequiredMethod","","",38],[13,"ProvidedMethod","","",38],[13,"TypeTraitItem","","",38],[4,"ImplMethod","",""],[13,"MethodImplItem","","",39],[13,"TypeImplItem","","",39],[4,"Type","","A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\ntype out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\nit does not preserve mutability or boxes."],[13,"ResolvedPath","","structs/enums/traits (anything that'd be an ast::TyPath)",40],[12,"path","rustdoc::clean::Type","",40],[12,"typarams","","",40],[12,"did","","",40],[13,"TyParamBinder","rustdoc::clean","",40],[13,"Generic","","For parameterized types, so the consumer of the JSON don't go\nlooking for types which don't exist anywhere.",40],[13,"Primitive","","Primitives are just the fixed-size numeric types (plus int/uint/float), and char.",40],[13,"BareFunction","","extern \"ABI\" fn",40],[13,"Tuple","","",40],[13,"Vector","","",40],[13,"FixedVector","","",40],[13,"Bottom","","aka TyBot",40],[13,"Unique","","",40],[13,"RawPointer","","",40],[13,"BorrowedRef","","",40],[12,"lifetime","rustdoc::clean::Type","",40],[12,"mutability","","",40],[12,"type_","","",40],[13,"QPath","rustdoc::clean","",40],[12,"name","rustdoc::clean::Type","",40],[12,"self_type","","",40],[12,"trait_","","",40],[13,"Infer","rustdoc::clean","",40],[13,"PolyTraitRef","","",40],[4,"PrimitiveType","",""],[13,"Isize","","",41],[13,"I8","","",41],[13,"I16","","",41],[13,"I32","","",41],[13,"I64","","",41],[13,"Usize","","",41],[13,"U8","","",41],[13,"U16","","",41],[13,"U32","","",41],[13,"U64","","",41],[13,"F32","","",41],[13,"F64","","",41],[13,"Char","","",41],[13,"Bool","","",41],[13,"Str","","",41],[13,"Slice","","",41],[13,"PrimitiveTuple","","",41],[4,"TypeKind","",""],[13,"TypeEnum","","",42],[13,"TypeFunction","","",42],[13,"TypeModule","","",42],[13,"TypeConst","","",42],[13,"TypeStatic","","",42],[13,"TypeStruct","","",42],[13,"TypeTrait","","",42],[13,"TypeVariant","","",42],[13,"TypeTypedef","","",42],[4,"StructField","",""],[13,"HiddenStructField","","",43],[13,"TypedStructField","","",43],[4,"VariantKind","",""],[13,"CLikeVariant","","",44],[13,"TupleVariant","","",44],[13,"StructVariant","","",44],[4,"PathParameters","",""],[13,"AngleBracketed","","",45],[12,"lifetimes","rustdoc::clean::PathParameters","",45],[12,"types","","",45],[12,"bindings","","",45],[13,"Parenthesized","rustdoc::clean","",45],[12,"inputs","rustdoc::clean::PathParameters","",45],[12,"output","","",45],[4,"Mutability","rustdoc::clean",""],[13,"Mutable","","",46],[13,"Immutable","","",46],[4,"ImplPolarity","",""],[13,"Positive","","",47],[13,"Negative","","",47],[4,"Import","",""],[13,"SimpleImport","","",48],[13,"GlobImport","","",48],[13,"ImportList","","",48],[6,"Visibility","",""],[7,"SCHEMA_VERSION","","A stable identifier to the particular version of JSON output.\nIncrement this when the `Crate` and related structures change."],[8,"Clean","",""],[10,"clean","","",49],[11,"clean","collections::vec","",50],[11,"clean","rustc::middle::subst","",51],[11,"clean","syntax::ptr","",52],[11,"clean","alloc::rc","",53],[11,"clean","core::option","",54],[11,"clean","rustc::middle::ty","",55],[11,"clean","syntax::owned_slice","",56],[11,"fmt","rustdoc::clean","",1],[11,"decode","","",1],[11,"encode","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"decode","","",2],[11,"encode","","",2],[11,"clone","","",2],[11,"clean","rustc::metadata::cstore","",57],[11,"fmt","rustdoc::clean","",3],[11,"decode","","",3],[11,"encode","","",3],[11,"clone","","",3],[11,"doc_list","","Finds the `doc` attribute as a List and returns the list of attributes\nnested inside.",3],[11,"doc_value","","Finds the `doc` attribute as a NameValue and returns the corresponding\nvalue found.",3],[11,"is_hidden_from_doc","","",3],[11,"is_mod","","",3],[11,"is_trait","","",3],[11,"is_struct","","",3],[11,"is_enum","","",3],[11,"is_fn","","",3],[11,"fmt","","",32],[11,"decode","","",32],[11,"encode","","",32],[11,"clone","","",32],[11,"fmt","","",4],[11,"decode","","",4],[11,"encode","","",4],[11,"clone","","",4],[11,"fmt","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"decode","","",33],[11,"encode","","",33],[11,"clone","","",33],[11,"clean","","",58],[11,"clean","","",59],[11,"name","","",33],[11,"value_str","","",33],[11,"meta_item_list","","",33],[11,"span","","",33],[11,"fmt","","",5],[11,"eq","","",5],[11,"ne","","",5],[11,"decode","","",5],[11,"encode","","",5],[11,"clone","","",5],[11,"clean","syntax::ast","",60],[11,"clean","rustc::middle::ty","",61],[11,"fmt","rustdoc::clean","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"decode","","",34],[11,"encode","","",34],[11,"clone","","",34],[11,"clean","syntax::ast","",62],[11,"clean","rustc::middle::ty","",63],[11,"clean","","",64],[11,"clean","","",65],[11,"clean","","",66],[11,"clean","rustc::middle::subst","",67],[11,"fmt","rustdoc::clean","",68],[11,"eq","","",68],[11,"ne","","",68],[11,"decode","","",68],[11,"encode","","",68],[11,"clone","","",68],[11,"get_ref","","",68],[11,"statik","","",68],[11,"clean","syntax::ast","",69],[11,"clean","","",70],[11,"clean","rustc::middle::ty","",71],[11,"clean","","",72],[11,"fmt","rustdoc::clean","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"decode","","",35],[11,"encode","","",35],[11,"clone","","",35],[11,"clean","syntax::ast","",73],[11,"clean","rustc::middle::ty","",74],[11,"clean","","",75],[11,"clean","","",76],[11,"clean","","",77],[11,"clean","","",77],[11,"clean","","",78],[11,"clean","","",79],[11,"fmt","rustdoc::clean","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"decode","","",6],[11,"encode","","",6],[11,"clone","","",6],[11,"clean","syntax::ast","",80],[11,"fmt","rustdoc::clean","",7],[11,"decode","","",7],[11,"encode","","",7],[11,"clone","","",7],[11,"clean","syntax::ast","",81],[11,"fmt","rustdoc::clean","",8],[11,"decode","","",8],[11,"encode","","",8],[11,"clone","","",8],[11,"clean","syntax::ast","",82],[11,"fmt","rustdoc::clean","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"decode","","",36],[11,"encode","","",36],[11,"clone","","",36],[11,"clean","syntax::ast","",83],[11,"fmt","rustdoc::clean","",9],[11,"decode","","",9],[11,"encode","","",9],[11,"clone","","",9],[11,"fmt","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"decode","","",10],[11,"encode","","",10],[11,"clone","","",10],[11,"fmt","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"decode","","",11],[11,"encode","","",11],[11,"clone","","",11],[11,"clean","syntax::ast","",84],[11,"clean","rustc::middle::ty","",85],[11,"fmt","rustdoc::clean","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"clean","syntax::ast","",86],[11,"fmt","rustdoc::clean","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"decode","","",37],[11,"encode","","",37],[11,"clone","","",37],[11,"clean","syntax::ast","",87],[11,"fmt","rustdoc::clean","",13],[11,"decode","","",13],[11,"encode","","",13],[11,"clone","","",13],[11,"clean","syntax::ast","",88],[11,"clean","","",89],[11,"fmt","rustdoc::clean","",38],[11,"decode","","",38],[11,"encode","","",38],[11,"clone","","",38],[11,"is_req","","",38],[11,"is_def","","",38],[11,"is_type","","",38],[11,"item","","",38],[11,"clean","syntax::ast","",90],[11,"fmt","rustdoc::clean","",39],[11,"decode","","",39],[11,"encode","","",39],[11,"clone","","",39],[11,"clean","syntax::ast","",91],[11,"clean","rustc::middle::ty","",92],[11,"clean","","",93],[11,"fmt","rustdoc::clean","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"decode","","",14],[11,"encode","","",14],[11,"clone","","",14],[11,"fmt","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"decode","","",40],[11,"encode","","",40],[11,"clone","","",40],[11,"fmt","","",41],[11,"hash","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"decode","","",41],[11,"encode","","",41],[11,"clone","","",41],[11,"fmt","","",42],[11,"decode","","",42],[11,"encode","","",42],[11,"clone","","",42],[11,"to_string","","",41],[11,"to_url_str","","",41],[11,"to_node_id","","Creates a rustdoc-specific node id for primitive types.",41],[11,"clean","syntax::ast","",94],[11,"clean","rustdoc::clean","",95],[11,"clean","syntax::ast","",96],[11,"fmt","rustdoc::clean","",43],[11,"decode","","",43],[11,"encode","","",43],[11,"clone","","",43],[11,"clean","","",97],[11,"clean","rustc::middle::ty","",98],[11,"clean","syntax::ast","",99],[11,"fmt","rustdoc::clean","",15],[11,"decode","","",15],[11,"encode","","",15],[11,"clone","","",15],[11,"fmt","","",16],[11,"decode","","",16],[11,"encode","","",16],[11,"clone","","",16],[11,"clean","syntax::ast","",100],[11,"fmt","rustdoc::clean","",17],[11,"decode","","",17],[11,"encode","","",17],[11,"clone","","",17],[11,"fmt","","",18],[11,"decode","","",18],[11,"encode","","",18],[11,"clone","","",18],[11,"clean","rustc::middle::ty","",101],[11,"fmt","rustdoc::clean","",44],[11,"decode","","",44],[11,"encode","","",44],[11,"clone","","",44],[11,"clean","syntax::ast","",102],[11,"fmt","rustdoc::clean","",19],[11,"decode","","",19],[11,"encode","","",19],[11,"clone","","",19],[11,"clean","syntax::codemap","",103],[11,"fmt","rustdoc::clean","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"decode","","",20],[11,"encode","","",20],[11,"clone","","",20],[11,"clean","syntax::ast","",104],[11,"fmt","rustdoc::clean","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"decode","","",45],[11,"encode","","",45],[11,"clone","","",45],[11,"clean","syntax::ast","",105],[11,"fmt","rustdoc::clean","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"decode","","",21],[11,"encode","","",21],[11,"clone","","",21],[11,"clean","syntax::ast","",106],[11,"clean","","",107],[11,"clean","","",108],[11,"fmt","rustdoc::clean","",22],[11,"decode","","",22],[11,"encode","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"decode","","",23],[11,"encode","","",23],[11,"clone","","",23],[11,"clean","syntax::ast","",109],[11,"fmt","rustdoc::clean","",24],[11,"decode","","",24],[11,"encode","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"decode","","",25],[11,"encode","","",25],[11,"clone","","",25],[11,"eq","","",46],[11,"ne","","",46],[11,"decode","","",46],[11,"encode","","",46],[11,"clone","","",46],[11,"fmt","","",46],[11,"clean","syntax::ast","",110],[11,"fmt","rustdoc::clean","",47],[11,"eq","","",47],[11,"ne","","",47],[11,"decode","","",47],[11,"encode","","",47],[11,"clone","","",47],[11,"clean","syntax::ast","",111],[11,"fmt","rustdoc::clean","",26],[11,"decode","","",26],[11,"encode","","",26],[11,"clone","","",26],[11,"fmt","","",48],[11,"decode","","",48],[11,"encode","","",48],[11,"clone","","",48],[11,"fmt","","",27],[11,"decode","","",27],[11,"encode","","",27],[11,"clone","","",27],[11,"fmt","","",28],[11,"decode","","",28],[11,"encode","","",28],[11,"clone","","",28],[11,"clean","","",112],[11,"clean","syntax::ast","",113],[11,"clean","","",114],[11,"fmt","rustdoc::clean","",29],[11,"decode","","",29],[11,"encode","","",29],[11,"clone","","",29],[11,"fmt","","",30],[11,"decode","","",30],[11,"encode","","",30],[11,"clone","","",30],[11,"clean","syntax::attr","",115],[11,"clean","syntax::ast","",116],[11,"clean","rustc::middle::ty","",117],[11,"clean","syntax::ast","",118],[11,"fmt","rustdoc::clean","",31],[11,"encode","","",31],[11,"decode","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"clean","syntax::ast","",119],[0,"core","rustdoc",""],[11,"filestem","rustc::session::config","",120],[11,"open","rustc_back::archive","Opens an existing static archive",121],[11,"remove_file","","Removes a file from this archive",121],[11,"files","","Lists all files in an archive",121],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",121],[11,"create","","Create a new static archive, ready for adding files.",122],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",122],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",122],[11,"add_file","","Adds an arbitrary file to this archive",122],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",122],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",122],[11,"fmt","rustc_back::svh","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"clone_from","","",123],[11,"new","","",123],[11,"as_str","","",123],[11,"calculate","","",123],[11,"fmt","","",123],[11,"hash","rustc_back::svh::svh_visitor","",124],[11,"hash","","",125],[11,"hash","","",126],[11,"get_content","syntax::ast","",107],[11,"get_content","","",108],[11,"visit_mac","rustc_back::svh::svh_visitor","",127],[11,"visit_struct_def","","",127],[11,"visit_variant","","",127],[11,"visit_opt_lifetime_ref","","",127],[11,"visit_ident","","",127],[11,"visit_lifetime_ref","","",127],[11,"visit_lifetime_def","","",127],[11,"visit_expr","","",127],[11,"visit_stmt","","",127],[11,"visit_foreign_item","","",127],[11,"visit_item","","",127],[11,"visit_mod","","",127],[11,"visit_decl","","",127],[11,"visit_ty","","",127],[11,"visit_generics","","",127],[11,"visit_fn","","",127],[11,"visit_ty_method","","",127],[11,"visit_trait_item","","",127],[11,"visit_struct_field","","",127],[11,"visit_explicit_self","","",127],[11,"visit_path","","",127],[11,"visit_block","","",127],[11,"visit_pat","","",127],[11,"visit_local","","",127],[11,"visit_arm","","",127],[11,"visit_name","","",127],[11,"visit_ident","","",127],[11,"visit_mod","","",127],[11,"visit_foreign_item","","",127],[11,"visit_item","","",127],[11,"visit_local","","",127],[11,"visit_block","","",127],[11,"visit_stmt","","",127],[11,"visit_arm","","",127],[11,"visit_pat","","",127],[11,"visit_decl","","",127],[11,"visit_expr","","",127],[11,"visit_expr_post","","",127],[11,"visit_ty","","",127],[11,"visit_generics","","",127],[11,"visit_fn","","",127],[11,"visit_ty_method","","",127],[11,"visit_trait_item","","",127],[11,"visit_trait_ref","","",127],[11,"visit_ty_param_bound","","",127],[11,"visit_poly_trait_ref","","",127],[11,"visit_struct_def","","",127],[11,"visit_struct_field","","",127],[11,"visit_variant","","",127],[11,"visit_opt_lifetime_ref","","",127],[11,"visit_lifetime_bound","","",127],[11,"visit_lifetime_ref","","",127],[11,"visit_lifetime_def","","",127],[11,"visit_explicit_self","","",127],[11,"visit_mac","","",127],[11,"visit_path","","",127],[11,"visit_qpath","","",127],[11,"visit_path_segment","","",127],[11,"visit_path_parameters","","",127],[11,"visit_assoc_type_binding","","",127],[11,"visit_attribute","","",127],[11,"tr_id","rustc::middle::astencode","Translates an internal id, meaning a node id that is known to refer to some part of the\nitem currently being inlined, such as a local variable or argument.  All naked node-ids\nthat appear in types have this property, since if something might refer to an external item\nwe would use a def-id to allow for the possibility that the item resides in another crate.",128],[11,"tr_def_id","","Translates an EXTERNAL def-id, converting the crate number from the one used in the encoded\ndata to the current crate numbers..  By external, I mean that it be translated to a\nreference to the item in its original crate, as opposed to being translated to a reference\nto the inlined version of the item.  This is typically, but not always, what you want,\nbecause most def-ids refer to external things like types or other fns that may or may not\nbe inlined.  Note that even when the inlined function is referencing itself recursively, we\nwould want `tr_def_id` for that reference--- conceptually the function calls the original,\nnon-inlined version, and trans deals with linking that recursive call to the inlined copy.",128],[11,"tr_intern_def_id","","Translates an INTERNAL def-id, meaning a def-id that is\nknown to refer to some part of the item currently being\ninlined.  In that case, we want to convert the def-id to\nrefer to the current crate and to the new, inlined node-id.",128],[11,"tr_span","","",128],[11,"tr_intern","syntax::ast","",129],[11,"tr","","",129],[11,"tr","core::option","",54],[11,"tr","syntax::codemap","",103],[11,"fold_block","rustc::middle::astencode","",130],[11,"fold_crate","","",130],[11,"fold_meta_items","","",130],[11,"fold_meta_item","","",130],[11,"fold_view_path","","",130],[11,"fold_foreign_item","","",130],[11,"fold_item","","",130],[11,"fold_item_simple","","",130],[11,"fold_struct_field","","",130],[11,"fold_item_underscore","","",130],[11,"fold_trait_item","","",130],[11,"fold_impl_item","","",130],[11,"fold_fn_decl","","",130],[11,"fold_type_method","","",130],[11,"fold_method","","",130],[11,"fold_block","","",130],[11,"fold_stmt","","",130],[11,"fold_arm","","",130],[11,"fold_pat","","",130],[11,"fold_decl","","",130],[11,"fold_expr","","",130],[11,"fold_ty","","",130],[11,"fold_qpath","","",130],[11,"fold_ty_binding","","",130],[11,"fold_mod","","",130],[11,"fold_foreign_mod","","",130],[11,"fold_variant","","",130],[11,"fold_ident","","",130],[11,"fold_usize","","",130],[11,"fold_path","","",130],[11,"fold_path_parameters","","",130],[11,"fold_angle_bracketed_parameter_data","","",130],[11,"fold_parenthesized_parameter_data","","",130],[11,"fold_local","","",130],[11,"fold_mac","","",130],[11,"fold_explicit_self","","",130],[11,"fold_explicit_self_underscore","","",130],[11,"fold_lifetime","","",130],[11,"fold_lifetime_def","","",130],[11,"fold_attribute","","",130],[11,"fold_arg","","",130],[11,"fold_generics","","",130],[11,"fold_trait_ref","","",130],[11,"fold_poly_trait_ref","","",130],[11,"fold_struct_def","","",130],[11,"fold_lifetimes","","",130],[11,"fold_lifetime_defs","","",130],[11,"fold_ty_param","","",130],[11,"fold_ty_params","","",130],[11,"fold_tt","","",130],[11,"fold_tts","","",130],[11,"fold_token","","",130],[11,"fold_interpolated","","",130],[11,"fold_opt_lifetime","","",130],[11,"fold_variant_arg","","",130],[11,"fold_opt_bounds","","",130],[11,"fold_bounds","","",130],[11,"fold_ty_param_bound","","",130],[11,"fold_mt","","",130],[11,"fold_field","","",130],[11,"fold_where_clause","","",130],[11,"fold_where_predicate","","",130],[11,"fold_typedef","","",130],[11,"fold_associated_type","","",130],[11,"new_id","","",130],[11,"new_span","","",130],[11,"tr","rustc::middle::def","",131],[11,"tr","rustc::middle::ty","",72],[11,"tr","","",132],[11,"tr","rustc::middle::region","",133],[11,"tr","rustc::middle::ty","",134],[11,"read_freevar_entry","rbml::reader","",135],[11,"read_capture_mode","","",135],[11,"tr","rustc::middle::ty","",136],[11,"tr","","",137],[11,"tr","","",138],[11,"read_method_callee","rbml::reader","",135],[11,"tr","rustc::middle::ty","",139],[11,"read_vec_per_param_space","rbml::reader","",135],[11,"read_vtable_res_with_key","","",135],[11,"read_vtable_res","","",135],[11,"read_vtable_param_res","","",135],[11,"read_vtable_origin","","",135],[11,"ty_str_ctxt","rustc::metadata::encoder","",140],[11,"emit_closure_type","rbml::writer","",141],[11,"emit_method_origin","","",141],[11,"emit_ty","","",141],[11,"emit_tys","","",141],[11,"emit_trait_ref","","",141],[11,"emit_type_param_def","","",141],[11,"emit_predicate","","",141],[11,"emit_type_scheme","","",141],[11,"emit_existential_bounds","","",141],[11,"emit_builtin_bounds","","",141],[11,"emit_substs","","",141],[11,"emit_auto_adjustment","","",141],[11,"emit_autoref","","",141],[11,"emit_auto_deref_ref","","",141],[11,"emit_unsize_kind","","",141],[11,"tag","","",141],[11,"id","","",141],[11,"visit_id","rustc::middle::astencode","",142],[11,"as_int","rbml","",143],[11,"opt_child","","",143],[11,"read_ty_nodcx","rbml::reader","",135],[11,"read_tys_nodcx","","",135],[11,"read_substs_nodcx","","",135],[11,"read_method_origin","","",135],[11,"read_ty","","",135],[11,"read_tys","","",135],[11,"read_trait_ref","","",135],[11,"read_poly_trait_ref","","",135],[11,"read_type_param_def","","",135],[11,"read_predicate","","",135],[11,"read_type_scheme","","",135],[11,"read_existential_bounds","","",135],[11,"read_substs","","",135],[11,"read_auto_adjustment","","",135],[11,"read_auto_deref_ref","","",135],[11,"read_autoref","","",135],[11,"read_unsize_kind","","",135],[11,"read_closure_kind","","",135],[11,"read_closure_ty","","",135],[11,"convert_def_id","","Converts a def-id that appears in a type.  The correct\ntranslation will depend on what kind of def-id this is.\nThis is a subtle point: type definitions are not\ninlined into the current crate, so if the def-id names\na nominal type or type alias, then it should be\ntranslated to refer to the source crate.",135],[11,"graph_id","rustc::middle::cfg::graphviz","",144],[11,"node_id","","",144],[11,"node_label","","",144],[11,"edge_label","","",144],[11,"node_label","","",144],[11,"edge_label","","",144],[11,"nodes","","",144],[11,"edges","","",144],[11,"source","","",144],[11,"target","","",144],[11,"new","rustc::middle::cfg","",145],[11,"node_is_reachable","","",145],[11,"visit_item","rustc::middle::check_const","",146],[11,"visit_pat","","",146],[11,"visit_expr","","",146],[11,"visit_name","","",146],[11,"visit_ident","","",146],[11,"visit_mod","","",146],[11,"visit_foreign_item","","",146],[11,"visit_item","","",146],[11,"visit_local","","",146],[11,"visit_block","","",146],[11,"visit_stmt","","",146],[11,"visit_arm","","",146],[11,"visit_pat","","",146],[11,"visit_decl","","",146],[11,"visit_expr","","",146],[11,"visit_expr_post","","",146],[11,"visit_ty","","",146],[11,"visit_generics","","",146],[11,"visit_fn","","",146],[11,"visit_ty_method","","",146],[11,"visit_trait_item","","",146],[11,"visit_trait_ref","","",146],[11,"visit_ty_param_bound","","",146],[11,"visit_poly_trait_ref","","",146],[11,"visit_struct_def","","",146],[11,"visit_struct_field","","",146],[11,"visit_variant","","",146],[11,"visit_opt_lifetime_ref","","",146],[11,"visit_lifetime_bound","","",146],[11,"visit_lifetime_ref","","",146],[11,"visit_lifetime_def","","",146],[11,"visit_explicit_self","","",146],[11,"visit_mac","","",146],[11,"visit_path","","",146],[11,"visit_qpath","","",146],[11,"visit_path_segment","","",146],[11,"visit_path_parameters","","",146],[11,"visit_assoc_type_binding","","",146],[11,"visit_attribute","","",146],[11,"visit_item","rustc::middle::check_static_recursion","",147],[11,"visit_name","","",147],[11,"visit_ident","","",147],[11,"visit_mod","","",147],[11,"visit_foreign_item","","",147],[11,"visit_item","","",147],[11,"visit_local","","",147],[11,"visit_block","","",147],[11,"visit_stmt","","",147],[11,"visit_arm","","",147],[11,"visit_pat","","",147],[11,"visit_decl","","",147],[11,"visit_expr","","",147],[11,"visit_expr_post","","",147],[11,"visit_ty","","",147],[11,"visit_generics","","",147],[11,"visit_fn","","",147],[11,"visit_ty_method","","",147],[11,"visit_trait_item","","",147],[11,"visit_trait_ref","","",147],[11,"visit_ty_param_bound","","",147],[11,"visit_poly_trait_ref","","",147],[11,"visit_struct_def","","",147],[11,"visit_struct_field","","",147],[11,"visit_variant","","",147],[11,"visit_opt_lifetime_ref","","",147],[11,"visit_lifetime_bound","","",147],[11,"visit_lifetime_ref","","",147],[11,"visit_lifetime_def","","",147],[11,"visit_explicit_self","","",147],[11,"visit_mac","","",147],[11,"visit_path","","",147],[11,"visit_qpath","","",147],[11,"visit_path_segment","","",147],[11,"visit_path_parameters","","",147],[11,"visit_assoc_type_binding","","",147],[11,"visit_attribute","","",147],[11,"visit_item","","",148],[11,"visit_expr","","",148],[11,"visit_name","","",148],[11,"visit_ident","","",148],[11,"visit_mod","","",148],[11,"visit_foreign_item","","",148],[11,"visit_item","","",148],[11,"visit_local","","",148],[11,"visit_block","","",148],[11,"visit_stmt","","",148],[11,"visit_arm","","",148],[11,"visit_pat","","",148],[11,"visit_decl","","",148],[11,"visit_expr","","",148],[11,"visit_expr_post","","",148],[11,"visit_ty","","",148],[11,"visit_generics","","",148],[11,"visit_fn","","",148],[11,"visit_ty_method","","",148],[11,"visit_trait_item","","",148],[11,"visit_trait_ref","","",148],[11,"visit_ty_param_bound","","",148],[11,"visit_poly_trait_ref","","",148],[11,"visit_struct_def","","",148],[11,"visit_struct_field","","",148],[11,"visit_variant","","",148],[11,"visit_opt_lifetime_ref","","",148],[11,"visit_lifetime_bound","","",148],[11,"visit_lifetime_ref","","",148],[11,"visit_lifetime_def","","",148],[11,"visit_explicit_self","","",148],[11,"visit_mac","","",148],[11,"visit_path","","",148],[11,"visit_qpath","","",148],[11,"visit_path_segment","","",148],[11,"visit_path_parameters","","",148],[11,"visit_assoc_type_binding","","",148],[11,"visit_attribute","","",148],[11,"eq","rustc::middle::check_loop","",149],[11,"ne","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"clone_from","","",149],[11,"visit_item","","",150],[11,"visit_expr","","",150],[11,"visit_name","","",150],[11,"visit_ident","","",150],[11,"visit_mod","","",150],[11,"visit_foreign_item","","",150],[11,"visit_item","","",150],[11,"visit_local","","",150],[11,"visit_block","","",150],[11,"visit_stmt","","",150],[11,"visit_arm","","",150],[11,"visit_pat","","",150],[11,"visit_decl","","",150],[11,"visit_expr","","",150],[11,"visit_expr_post","","",150],[11,"visit_ty","","",150],[11,"visit_generics","","",150],[11,"visit_fn","","",150],[11,"visit_ty_method","","",150],[11,"visit_trait_item","","",150],[11,"visit_trait_ref","","",150],[11,"visit_ty_param_bound","","",150],[11,"visit_poly_trait_ref","","",150],[11,"visit_struct_def","","",150],[11,"visit_struct_field","","",150],[11,"visit_variant","","",150],[11,"visit_opt_lifetime_ref","","",150],[11,"visit_lifetime_bound","","",150],[11,"visit_lifetime_ref","","",150],[11,"visit_lifetime_def","","",150],[11,"visit_explicit_self","","",150],[11,"visit_mac","","",150],[11,"visit_path","","",150],[11,"visit_qpath","","",150],[11,"visit_path_segment","","",150],[11,"visit_path_parameters","","",150],[11,"visit_assoc_type_binding","","",150],[11,"visit_attribute","","",150],[11,"fmt","rustc::middle::check_match","",151],[11,"from_iter","","",151],[11,"eq","","",152],[11,"ne","","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"clone_from","","",152],[11,"eq","","",153],[11,"ne","","",153],[11,"ne","","",153],[11,"clone","","",153],[11,"clone_from","","",153],[11,"visit_expr","","",154],[11,"visit_local","","",154],[11,"visit_fn","","",154],[11,"visit_name","","",154],[11,"visit_ident","","",154],[11,"visit_mod","","",154],[11,"visit_foreign_item","","",154],[11,"visit_item","","",154],[11,"visit_local","","",154],[11,"visit_block","","",154],[11,"visit_stmt","","",154],[11,"visit_arm","","",154],[11,"visit_pat","","",154],[11,"visit_decl","","",154],[11,"visit_expr","","",154],[11,"visit_expr_post","","",154],[11,"visit_ty","","",154],[11,"visit_generics","","",154],[11,"visit_fn","","",154],[11,"visit_ty_method","","",154],[11,"visit_trait_item","","",154],[11,"visit_trait_ref","","",154],[11,"visit_ty_param_bound","","",154],[11,"visit_poly_trait_ref","","",154],[11,"visit_struct_def","","",154],[11,"visit_struct_field","","",154],[11,"visit_variant","","",154],[11,"visit_opt_lifetime_ref","","",154],[11,"visit_lifetime_bound","","",154],[11,"visit_lifetime_ref","","",154],[11,"visit_lifetime_def","","",154],[11,"visit_explicit_self","","",154],[11,"visit_mac","","",154],[11,"visit_path","","",154],[11,"visit_qpath","","",154],[11,"visit_path_segment","","",154],[11,"visit_path_parameters","","",154],[11,"visit_assoc_type_binding","","",154],[11,"visit_attribute","","",154],[11,"new","","",155],[11,"fold_pat","","",155],[11,"fold_crate","","",155],[11,"fold_meta_items","","",155],[11,"fold_meta_item","","",155],[11,"fold_view_path","","",155],[11,"fold_foreign_item","","",155],[11,"fold_item","","",155],[11,"fold_item_simple","","",155],[11,"fold_struct_field","","",155],[11,"fold_item_underscore","","",155],[11,"fold_trait_item","","",155],[11,"fold_impl_item","","",155],[11,"fold_fn_decl","","",155],[11,"fold_type_method","","",155],[11,"fold_method","","",155],[11,"fold_block","","",155],[11,"fold_stmt","","",155],[11,"fold_arm","","",155],[11,"fold_pat","","",155],[11,"fold_decl","","",155],[11,"fold_expr","","",155],[11,"fold_ty","","",155],[11,"fold_qpath","","",155],[11,"fold_ty_binding","","",155],[11,"fold_mod","","",155],[11,"fold_foreign_mod","","",155],[11,"fold_variant","","",155],[11,"fold_ident","","",155],[11,"fold_usize","","",155],[11,"fold_path","","",155],[11,"fold_path_parameters","","",155],[11,"fold_angle_bracketed_parameter_data","","",155],[11,"fold_parenthesized_parameter_data","","",155],[11,"fold_local","","",155],[11,"fold_mac","","",155],[11,"fold_explicit_self","","",155],[11,"fold_explicit_self_underscore","","",155],[11,"fold_lifetime","","",155],[11,"fold_lifetime_def","","",155],[11,"fold_attribute","","",155],[11,"fold_arg","","",155],[11,"fold_generics","","",155],[11,"fold_trait_ref","","",155],[11,"fold_poly_trait_ref","","",155],[11,"fold_struct_def","","",155],[11,"fold_lifetimes","","",155],[11,"fold_lifetime_defs","","",155],[11,"fold_ty_param","","",155],[11,"fold_ty_params","","",155],[11,"fold_tt","","",155],[11,"fold_tts","","",155],[11,"fold_token","","",155],[11,"fold_interpolated","","",155],[11,"fold_opt_lifetime","","",155],[11,"fold_variant_arg","","",155],[11,"fold_opt_bounds","","",155],[11,"fold_bounds","","",155],[11,"fold_ty_param_bound","","",155],[11,"fold_mt","","",155],[11,"fold_field","","",155],[11,"fold_where_clause","","",155],[11,"fold_where_predicate","","",155],[11,"fold_typedef","","",155],[11,"fold_associated_type","","",155],[11,"new_id","","",155],[11,"new_span","","",155],[11,"matched_pat","","",156],[11,"consume","","",156],[11,"consume_pat","","",156],[11,"borrow","","",156],[11,"decl_without_init","","",156],[11,"mutate","","",156],[11,"visit_pat","","",157],[11,"visit_name","","",157],[11,"visit_ident","","",157],[11,"visit_mod","","",157],[11,"visit_foreign_item","","",157],[11,"visit_item","","",157],[11,"visit_local","","",157],[11,"visit_block","","",157],[11,"visit_stmt","","",157],[11,"visit_arm","","",157],[11,"visit_pat","","",157],[11,"visit_decl","","",157],[11,"visit_expr","","",157],[11,"visit_expr_post","","",157],[11,"visit_ty","","",157],[11,"visit_generics","","",157],[11,"visit_fn","","",157],[11,"visit_ty_method","","",157],[11,"visit_trait_item","","",157],[11,"visit_trait_ref","","",157],[11,"visit_ty_param_bound","","",157],[11,"visit_poly_trait_ref","","",157],[11,"visit_struct_def","","",157],[11,"visit_struct_field","","",157],[11,"visit_variant","","",157],[11,"visit_opt_lifetime_ref","","",157],[11,"visit_lifetime_bound","","",157],[11,"visit_lifetime_ref","","",157],[11,"visit_lifetime_def","","",157],[11,"visit_explicit_self","","",157],[11,"visit_mac","","",157],[11,"visit_path","","",157],[11,"visit_qpath","","",157],[11,"visit_path_segment","","",157],[11,"visit_path_parameters","","",157],[11,"visit_assoc_type_binding","","",157],[11,"visit_attribute","","",157],[11,"visit_fn","rustc::middle::check_rvalues","",158],[11,"visit_name","","",158],[11,"visit_ident","","",158],[11,"visit_mod","","",158],[11,"visit_foreign_item","","",158],[11,"visit_item","","",158],[11,"visit_local","","",158],[11,"visit_block","","",158],[11,"visit_stmt","","",158],[11,"visit_arm","","",158],[11,"visit_pat","","",158],[11,"visit_decl","","",158],[11,"visit_expr","","",158],[11,"visit_expr_post","","",158],[11,"visit_ty","","",158],[11,"visit_generics","","",158],[11,"visit_fn","","",158],[11,"visit_ty_method","","",158],[11,"visit_trait_item","","",158],[11,"visit_trait_ref","","",158],[11,"visit_ty_param_bound","","",158],[11,"visit_poly_trait_ref","","",158],[11,"visit_struct_def","","",158],[11,"visit_struct_field","","",158],[11,"visit_variant","","",158],[11,"visit_opt_lifetime_ref","","",158],[11,"visit_lifetime_bound","","",158],[11,"visit_lifetime_ref","","",158],[11,"visit_lifetime_def","","",158],[11,"visit_explicit_self","","",158],[11,"visit_mac","","",158],[11,"visit_path","","",158],[11,"visit_qpath","","",158],[11,"visit_path_segment","","",158],[11,"visit_path_parameters","","",158],[11,"visit_assoc_type_binding","","",158],[11,"visit_attribute","","",158],[11,"consume","","",159],[11,"matched_pat","","",159],[11,"consume_pat","","",159],[11,"borrow","","",159],[11,"decl_without_init","","",159],[11,"mutate","","",159],[11,"eq","rustc::middle::check_static","",160],[11,"ne","","",160],[11,"ne","","",160],[11,"assert_receiver_is_total_eq","","",160],[11,"visit_item","","",161],[11,"visit_expr","","This method is used to enforce the constraints on\nimmutable static items. It walks through the *value*\nof the item walking down the expression and evaluating\nevery nested expression. if the expression is not part\nof a static item, this method does nothing but walking\ndown through it.",161],[11,"visit_name","","",161],[11,"visit_ident","","",161],[11,"visit_mod","","",161],[11,"visit_foreign_item","","",161],[11,"visit_item","","",161],[11,"visit_local","","",161],[11,"visit_block","","",161],[11,"visit_stmt","","",161],[11,"visit_arm","","",161],[11,"visit_pat","","",161],[11,"visit_decl","","",161],[11,"visit_expr","","",161],[11,"visit_expr_post","","",161],[11,"visit_ty","","",161],[11,"visit_generics","","",161],[11,"visit_fn","","",161],[11,"visit_ty_method","","",161],[11,"visit_trait_item","","",161],[11,"visit_trait_ref","","",161],[11,"visit_ty_param_bound","","",161],[11,"visit_poly_trait_ref","","",161],[11,"visit_struct_def","","",161],[11,"visit_struct_field","","",161],[11,"visit_variant","","",161],[11,"visit_opt_lifetime_ref","","",161],[11,"visit_lifetime_bound","","",161],[11,"visit_lifetime_ref","","",161],[11,"visit_lifetime_def","","",161],[11,"visit_explicit_self","","",161],[11,"visit_mac","","",161],[11,"visit_path","","",161],[11,"visit_qpath","","",161],[11,"visit_path_segment","","",161],[11,"visit_path_parameters","","",161],[11,"visit_assoc_type_binding","","",161],[11,"visit_attribute","","",161],[11,"visit_item","","",162],[11,"visit_name","","",162],[11,"visit_ident","","",162],[11,"visit_mod","","",162],[11,"visit_foreign_item","","",162],[11,"visit_item","","",162],[11,"visit_local","","",162],[11,"visit_block","","",162],[11,"visit_stmt","","",162],[11,"visit_arm","","",162],[11,"visit_pat","","",162],[11,"visit_decl","","",162],[11,"visit_expr","","",162],[11,"visit_expr_post","","",162],[11,"visit_ty","","",162],[11,"visit_generics","","",162],[11,"visit_fn","","",162],[11,"visit_ty_method","","",162],[11,"visit_trait_item","","",162],[11,"visit_trait_ref","","",162],[11,"visit_ty_param_bound","","",162],[11,"visit_poly_trait_ref","","",162],[11,"visit_struct_def","","",162],[11,"visit_struct_field","","",162],[11,"visit_variant","","",162],[11,"visit_opt_lifetime_ref","","",162],[11,"visit_lifetime_bound","","",162],[11,"visit_lifetime_ref","","",162],[11,"visit_lifetime_def","","",162],[11,"visit_explicit_self","","",162],[11,"visit_mac","","",162],[11,"visit_path","","",162],[11,"visit_qpath","","",162],[11,"visit_path_segment","","",162],[11,"visit_path_parameters","","",162],[11,"visit_assoc_type_binding","","",162],[11,"visit_attribute","","",162],[11,"consume","","",163],[11,"borrow","","",163],[11,"decl_without_init","","",163],[11,"mutate","","",163],[11,"matched_pat","","",163],[11,"consume_pat","","",163],[11,"visit_expr_post","rustc::middle::const_eval","",164],[11,"visit_name","","",164],[11,"visit_ident","","",164],[11,"visit_mod","","",164],[11,"visit_foreign_item","","",164],[11,"visit_item","","",164],[11,"visit_local","","",164],[11,"visit_block","","",164],[11,"visit_stmt","","",164],[11,"visit_arm","","",164],[11,"visit_pat","","",164],[11,"visit_decl","","",164],[11,"visit_expr","","",164],[11,"visit_expr_post","","",164],[11,"visit_ty","","",164],[11,"visit_generics","","",164],[11,"visit_fn","","",164],[11,"visit_ty_method","","",164],[11,"visit_trait_item","","",164],[11,"visit_trait_ref","","",164],[11,"visit_ty_param_bound","","",164],[11,"visit_poly_trait_ref","","",164],[11,"visit_struct_def","","",164],[11,"visit_struct_field","","",164],[11,"visit_variant","","",164],[11,"visit_opt_lifetime_ref","","",164],[11,"visit_lifetime_bound","","",164],[11,"visit_lifetime_ref","","",164],[11,"visit_lifetime_def","","",164],[11,"visit_explicit_self","","",164],[11,"visit_mac","","",164],[11,"visit_path","","",164],[11,"visit_qpath","","",164],[11,"visit_path_segment","","",164],[11,"visit_path_parameters","","",164],[11,"visit_assoc_type_binding","","",164],[11,"visit_attribute","","",164],[11,"eq","","",165],[11,"ne","","",165],[11,"ne","","",165],[11,"clone","","",165],[11,"clone_from","","",165],[11,"fmt","rustc::middle::dataflow","",166],[11,"clone","","",167],[11,"clone_from","","",167],[11,"pre","","",167],[11,"pre","","",167],[11,"post","","",167],[11,"new","","",167],[11,"add_gen","","Indicates that `id` generates `bit`",167],[11,"add_kill","","Indicates that `id` kills `bit`",167],[11,"each_bit_on_entry","","Iterates through each bit that is set on entry to `id`.\nOnly useful after `propagate()` has been called.",167],[11,"each_bit_for_node","","Iterates through each bit that is set on entry/exit to `cfgidx`.\nOnly useful after `propagate()` has been called.",167],[11,"each_gen_bit","","Iterates through each bit in the gen set for `id`.",167],[11,"add_kills_from_flow_exits","","Whenever you have a `break` or `continue` statement, flow\nexits through any number of enclosing scopes on its way to\nthe new destination. This function infers the kill bits of\nthose control operators based on the kill bits associated\nwith those scopes.",167],[11,"propagate","","Performs the data flow analysis.",167],[11,"join","","",168],[11,"join","","",169],[11,"visit_struct_def","rustc::middle::dead","",170],[11,"visit_expr","","",170],[11,"visit_pat","","",170],[11,"visit_path","","",170],[11,"visit_item","","",170],[11,"visit_name","","",170],[11,"visit_ident","","",170],[11,"visit_mod","","",170],[11,"visit_foreign_item","","",170],[11,"visit_item","","",170],[11,"visit_local","","",170],[11,"visit_block","","",170],[11,"visit_stmt","","",170],[11,"visit_arm","","",170],[11,"visit_pat","","",170],[11,"visit_decl","","",170],[11,"visit_expr","","",170],[11,"visit_expr_post","","",170],[11,"visit_ty","","",170],[11,"visit_generics","","",170],[11,"visit_fn","","",170],[11,"visit_ty_method","","",170],[11,"visit_trait_item","","",170],[11,"visit_trait_ref","","",170],[11,"visit_ty_param_bound","","",170],[11,"visit_poly_trait_ref","","",170],[11,"visit_struct_def","","",170],[11,"visit_struct_field","","",170],[11,"visit_variant","","",170],[11,"visit_opt_lifetime_ref","","",170],[11,"visit_lifetime_bound","","",170],[11,"visit_lifetime_ref","","",170],[11,"visit_lifetime_def","","",170],[11,"visit_explicit_self","","",170],[11,"visit_mac","","",170],[11,"visit_path","","",170],[11,"visit_qpath","","",170],[11,"visit_path_segment","","",170],[11,"visit_path_parameters","","",170],[11,"visit_assoc_type_binding","","",170],[11,"visit_attribute","","",170],[11,"visit_item","","",171],[11,"visit_fn","","",171],[11,"visit_name","","",171],[11,"visit_ident","","",171],[11,"visit_mod","","",171],[11,"visit_foreign_item","","",171],[11,"visit_item","","",171],[11,"visit_local","","",171],[11,"visit_block","","",171],[11,"visit_stmt","","",171],[11,"visit_arm","","",171],[11,"visit_pat","","",171],[11,"visit_decl","","",171],[11,"visit_expr","","",171],[11,"visit_expr_post","","",171],[11,"visit_ty","","",171],[11,"visit_generics","","",171],[11,"visit_fn","","",171],[11,"visit_ty_method","","",171],[11,"visit_trait_item","","",171],[11,"visit_trait_ref","","",171],[11,"visit_ty_param_bound","","",171],[11,"visit_poly_trait_ref","","",171],[11,"visit_struct_def","","",171],[11,"visit_struct_field","","",171],[11,"visit_variant","","",171],[11,"visit_opt_lifetime_ref","","",171],[11,"visit_lifetime_bound","","",171],[11,"visit_lifetime_ref","","",171],[11,"visit_lifetime_def","","",171],[11,"visit_explicit_self","","",171],[11,"visit_mac","","",171],[11,"visit_path","","",171],[11,"visit_qpath","","",171],[11,"visit_path_segment","","",171],[11,"visit_path_parameters","","",171],[11,"visit_assoc_type_binding","","",171],[11,"visit_attribute","","",171],[11,"visit_item","","",172],[11,"visit_foreign_item","","",172],[11,"visit_fn","","",172],[11,"visit_struct_field","","",172],[11,"visit_trait_item","","",172],[11,"visit_name","","",172],[11,"visit_ident","","",172],[11,"visit_mod","","",172],[11,"visit_foreign_item","","",172],[11,"visit_item","","",172],[11,"visit_local","","",172],[11,"visit_block","","",172],[11,"visit_stmt","","",172],[11,"visit_arm","","",172],[11,"visit_pat","","",172],[11,"visit_decl","","",172],[11,"visit_expr","","",172],[11,"visit_expr_post","","",172],[11,"visit_ty","","",172],[11,"visit_generics","","",172],[11,"visit_fn","","",172],[11,"visit_ty_method","","",172],[11,"visit_trait_item","","",172],[11,"visit_trait_ref","","",172],[11,"visit_ty_param_bound","","",172],[11,"visit_poly_trait_ref","","",172],[11,"visit_struct_def","","",172],[11,"visit_struct_field","","",172],[11,"visit_variant","","",172],[11,"visit_opt_lifetime_ref","","",172],[11,"visit_lifetime_bound","","",172],[11,"visit_lifetime_ref","","",172],[11,"visit_lifetime_def","","",172],[11,"visit_explicit_self","","",172],[11,"visit_mac","","",172],[11,"visit_path","","",172],[11,"visit_qpath","","",172],[11,"visit_path_segment","","",172],[11,"visit_path_parameters","","",172],[11,"visit_assoc_type_binding","","",172],[11,"visit_attribute","","",172],[11,"fmt","rustc::middle::def","",131],[11,"hash","","",131],[11,"decode","","",131],[11,"encode","","",131],[11,"assert_receiver_is_total_eq","","",131],[11,"eq","","",131],[11,"ne","","",131],[11,"ne","","",131],[11,"clone","","",131],[11,"clone_from","","",131],[11,"fmt","","",173],[11,"hash","","",173],[11,"decode","","",173],[11,"encode","","",173],[11,"assert_receiver_is_total_eq","","",173],[11,"eq","","",173],[11,"ne","","",173],[11,"ne","","",173],[11,"clone","","",173],[11,"clone_from","","",173],[11,"fmt","","",174],[11,"hash","","",174],[11,"decode","","",174],[11,"encode","","",174],[11,"assert_receiver_is_total_eq","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"clone_from","","",174],[11,"map","","",173],[11,"def_id","","",174],[11,"eq","","",175],[11,"ne","","",175],[11,"ne","","",175],[11,"assert_receiver_is_total_eq","","",175],[11,"clone","","",175],[11,"clone_from","","",175],[11,"from_explicit_self_category","","",175],[11,"local_node_id","","",131],[11,"def_id","","",131],[11,"variant_def_ids","","",131],[11,"eq","rustc::middle::effect","",176],[11,"ne","","",176],[11,"ne","","",176],[11,"visit_fn","","",177],[11,"visit_block","","",177],[11,"visit_expr","","",177],[11,"visit_name","","",177],[11,"visit_ident","","",177],[11,"visit_mod","","",177],[11,"visit_foreign_item","","",177],[11,"visit_item","","",177],[11,"visit_local","","",177],[11,"visit_block","","",177],[11,"visit_stmt","","",177],[11,"visit_arm","","",177],[11,"visit_pat","","",177],[11,"visit_decl","","",177],[11,"visit_expr","","",177],[11,"visit_expr_post","","",177],[11,"visit_ty","","",177],[11,"visit_generics","","",177],[11,"visit_fn","","",177],[11,"visit_ty_method","","",177],[11,"visit_trait_item","","",177],[11,"visit_trait_ref","","",177],[11,"visit_ty_param_bound","","",177],[11,"visit_poly_trait_ref","","",177],[11,"visit_struct_def","","",177],[11,"visit_struct_field","","",177],[11,"visit_variant","","",177],[11,"visit_opt_lifetime_ref","","",177],[11,"visit_lifetime_bound","","",177],[11,"visit_lifetime_ref","","",177],[11,"visit_lifetime_def","","",177],[11,"visit_explicit_self","","",177],[11,"visit_mac","","",177],[11,"visit_path","","",177],[11,"visit_qpath","","",177],[11,"visit_path_segment","","",177],[11,"visit_path_parameters","","",177],[11,"visit_assoc_type_binding","","",177],[11,"visit_attribute","","",177],[11,"visit_item","rustc::middle::entry","",178],[11,"visit_name","","",178],[11,"visit_ident","","",178],[11,"visit_mod","","",178],[11,"visit_foreign_item","","",178],[11,"visit_item","","",178],[11,"visit_local","","",178],[11,"visit_block","","",178],[11,"visit_stmt","","",178],[11,"visit_arm","","",178],[11,"visit_pat","","",178],[11,"visit_decl","","",178],[11,"visit_expr","","",178],[11,"visit_expr_post","","",178],[11,"visit_ty","","",178],[11,"visit_generics","","",178],[11,"visit_fn","","",178],[11,"visit_ty_method","","",178],[11,"visit_trait_item","","",178],[11,"visit_trait_ref","","",178],[11,"visit_ty_param_bound","","",178],[11,"visit_poly_trait_ref","","",178],[11,"visit_struct_def","","",178],[11,"visit_struct_field","","",178],[11,"visit_variant","","",178],[11,"visit_opt_lifetime_ref","","",178],[11,"visit_lifetime_bound","","",178],[11,"visit_lifetime_ref","","",178],[11,"visit_lifetime_def","","",178],[11,"visit_explicit_self","","",178],[11,"visit_mac","","",178],[11,"visit_path","","",178],[11,"visit_qpath","","",178],[11,"visit_path_segment","","",178],[11,"visit_path_parameters","","",178],[11,"visit_assoc_type_binding","","",178],[11,"visit_attribute","","",178],[11,"fmt","rustc::middle::expr_use_visitor","",179],[11,"eq","","",179],[11,"ne","","",179],[11,"ne","","",179],[11,"fmt","","",180],[11,"eq","","",180],[11,"ne","","",180],[11,"ne","","",180],[11,"fmt","","",181],[11,"eq","","",181],[11,"ne","","",181],[11,"ne","","",181],[11,"fmt","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"ne","","",182],[11,"fmt","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"ne","","",183],[11,"fmt","","",184],[11,"eq","","",184],[11,"ne","","",184],[11,"ne","","",184],[11,"new","","",185],[11,"walk_fn","","",185],[11,"consume_expr","","",185],[11,"walk_expr","","",185],[11,"hash","rustc::middle::fast_reject","",186],[11,"assert_receiver_is_total_eq","","",186],[11,"eq","","",186],[11,"ne","","",186],[11,"ne","","",186],[11,"clone","","",186],[11,"clone_from","","",186],[11,"fmt","rustc::middle::graph","",187],[11,"fmt","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"ne","","",188],[11,"clone","","",188],[11,"clone_from","","",188],[11,"fmt","","",189],[11,"eq","","",189],[11,"ne","","",189],[11,"ne","","",189],[11,"fmt","","",190],[11,"node_id","","Returns unique id (unique with respect to the graph holding associated node).",188],[11,"edge_id","","Returns unique id (unique with respect to the graph holding associated edge).",189],[11,"new","","",191],[11,"with_capacity","","",191],[11,"all_nodes","","",191],[11,"all_edges","","",191],[11,"next_node_index","","",191],[11,"add_node","","",191],[11,"mut_node_data","","",191],[11,"node_data","","",191],[11,"node","","",191],[11,"next_edge_index","","",191],[11,"add_edge","","",191],[11,"mut_edge_data","","",191],[11,"edge_data","","",191],[11,"edge","","",191],[11,"first_adjacent","","Accesses the index of the first edge adjacent to `node`.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"next_adjacent","","Accesses the next edge in a given direction.\nThis is useful if you wish to modify the graph while walking\nthe linked list of edges.",191],[11,"each_node","","Iterates over all edges defined in the graph.",191],[11,"each_edge","","Iterates over all edges defined in the graph",191],[11,"each_outgoing_edge","","Iterates over all outgoing edges from the node `from`",191],[11,"each_incoming_edge","","Iterates over all incoming edges to the node `target`",191],[11,"each_adjacent_edge","","Iterates over all edges adjacent to the node `node`\nin the direction `dir` (either `Outgoing` or `Incoming)",191],[11,"iterate_until_fixed_point","","",191],[11,"depth_traverse","","",191],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::graph","",192],[11,"size_hint","","",192],[11,"source","","",187],[11,"target","","",187],[11,"visit_fn","rustc::middle::intrinsicck","",193],[11,"visit_expr","","",193],[11,"visit_name","","",193],[11,"visit_ident","","",193],[11,"visit_mod","","",193],[11,"visit_foreign_item","","",193],[11,"visit_item","","",193],[11,"visit_local","","",193],[11,"visit_block","","",193],[11,"visit_stmt","","",193],[11,"visit_arm","","",193],[11,"visit_pat","","",193],[11,"visit_decl","","",193],[11,"visit_expr","","",193],[11,"visit_expr_post","","",193],[11,"visit_ty","","",193],[11,"visit_generics","","",193],[11,"visit_fn","","",193],[11,"visit_ty_method","","",193],[11,"visit_trait_item","","",193],[11,"visit_trait_ref","","",193],[11,"visit_ty_param_bound","","",193],[11,"visit_poly_trait_ref","","",193],[11,"visit_struct_def","","",193],[11,"visit_struct_field","","",193],[11,"visit_variant","","",193],[11,"visit_opt_lifetime_ref","","",193],[11,"visit_lifetime_bound","","",193],[11,"visit_lifetime_ref","","",193],[11,"visit_lifetime_def","","",193],[11,"visit_explicit_self","","",193],[11,"visit_mac","","",193],[11,"visit_path","","",193],[11,"visit_qpath","","",193],[11,"visit_path_segment","","",193],[11,"visit_path_parameters","","",193],[11,"visit_assoc_type_binding","","",193],[11,"visit_attribute","","",193],[11,"repr","rustc::middle::ty","",194],[11,"combine","alloc::rc","",53],[11,"combine","rustc::middle::ty","",65],[11,"combine","","",78],[11,"combine","","",195],[11,"clone","rustc::middle::infer::combine","",196],[11,"clone_from","","",196],[11,"switch_expected","","",196],[11,"instantiate","","",196],[11,"tcx","","",197],[11,"fold_ty","","",197],[11,"fold_region","","",197],[11,"enter_region_binder","","",197],[11,"exit_region_binder","","",197],[11,"fold_binder","","",197],[11,"fold_ty","","",197],[11,"fold_mt","","",197],[11,"fold_trait_ref","","",197],[11,"fold_substs","","",197],[11,"fold_fn_sig","","",197],[11,"fold_output","","",197],[11,"fold_bare_fn_ty","","",197],[11,"fold_closure_ty","","",197],[11,"fold_region","","",197],[11,"fold_existential_bounds","","",197],[11,"fold_autoref","","",197],[11,"fold_item_substs","","",197],[11,"infcx","rustc::middle::infer::equate","",198],[11,"tag","","",198],[11,"a_is_expected","","",198],[11,"trace","","",198],[11,"equate","","",198],[11,"sub","","",198],[11,"lub","","",198],[11,"glb","","",198],[11,"contratys","","",198],[11,"contraregions","","",198],[11,"regions","","",198],[11,"mts","","",198],[11,"unsafeties","","",198],[11,"builtin_bounds","","",198],[11,"tys","","",198],[11,"binders","","",198],[11,"tcx","","",198],[11,"tps","","",198],[11,"substs","","",198],[11,"substs_variances","","",198],[11,"bare_fn_tys","","",198],[11,"fn_sigs","","",198],[11,"args","","",198],[11,"abi","","",198],[11,"projection_tys","","",198],[11,"projection_predicates","","",198],[11,"projection_bounds","","",198],[11,"existential_bounds","","",198],[11,"trait_refs","","",198],[11,"report_region_errors","rustc::middle::infer","",199],[11,"process_errors","","",199],[11,"report_type_error","","",199],[11,"report_and_explain_type_error","","",199],[11,"values_str","","Returns a string of the form \"expected `{}`, found `{}`\", or None if this is a derived\nerror.",199],[11,"expected_found_str","","",199],[11,"report_generic_bound_failure","","",199],[11,"report_concrete_failure","","",199],[11,"report_sub_sup_conflict","","",199],[11,"report_sup_sup_conflict","","",199],[11,"report_processed_errors","","",199],[11,"give_suggestion","","",199],[11,"give_expl_lifetime_param","","",199],[11,"report_inference_failure","","",199],[11,"note_region_origin","","",199],[11,"resolve","alloc::rc","",53],[11,"contains_error","","",53],[11,"resolve","rustc::middle::ty","",55],[11,"contains_error","","",55],[11,"infcx","rustc::middle::infer::glb","",200],[11,"tag","","",200],[11,"a_is_expected","","",200],[11,"trace","","",200],[11,"equate","","",200],[11,"sub","","",200],[11,"lub","","",200],[11,"glb","","",200],[11,"mts","","",200],[11,"contratys","","",200],[11,"unsafeties","","",200],[11,"builtin_bounds","","",200],[11,"regions","","",200],[11,"contraregions","","",200],[11,"tys","","",200],[11,"binders","","",200],[11,"tcx","","",200],[11,"tps","","",200],[11,"substs","","",200],[11,"substs_variances","","",200],[11,"bare_fn_tys","","",200],[11,"fn_sigs","","",200],[11,"args","","",200],[11,"abi","","",200],[11,"projection_tys","","",200],[11,"projection_predicates","","",200],[11,"projection_bounds","","",200],[11,"existential_bounds","","",200],[11,"trait_refs","","",200],[11,"tainted_regions","rustc::middle::infer","",199],[11,"region_vars_confined_to_snapshot","","Returns the set of region variables that do not affect any\ntypes/regions which existed before `snapshot` was\nstarted. This is used in the sub/lub/glb computations. The\nidea here is that when we are computing lub/glb of two\nregions, we sometimes create intermediate region variables.\nThose region variables may touch some of the skolemized or\nother \"forbidden\" regions we created to replace bound\nregions, but they don't really represent an \"external\"\nconstraint.",199],[11,"relate_bound","rustc::middle::infer::lub","",201],[11,"relate_bound","rustc::middle::infer::glb","",200],[11,"infcx","rustc::middle::infer::lub","",201],[11,"tag","","",201],[11,"a_is_expected","","",201],[11,"trace","","",201],[11,"equate","","",201],[11,"sub","","",201],[11,"lub","","",201],[11,"glb","","",201],[11,"mts","","",201],[11,"contratys","","",201],[11,"unsafeties","","",201],[11,"builtin_bounds","","",201],[11,"contraregions","","",201],[11,"regions","","",201],[11,"tys","","",201],[11,"binders","","",201],[11,"tcx","","",201],[11,"tps","","",201],[11,"substs","","",201],[11,"substs_variances","","",201],[11,"bare_fn_tys","","",201],[11,"fn_sigs","","",201],[11,"args","","",201],[11,"abi","","",201],[11,"projection_tys","","",201],[11,"projection_predicates","","",201],[11,"projection_bounds","","",201],[11,"existential_bounds","","",201],[11,"trait_refs","","",201],[11,"fmt","rustc::middle::infer::region_inference::graphviz","",202],[11,"assert_receiver_is_total_eq","","",202],[11,"eq","","",202],[11,"ne","","",202],[11,"ne","","",202],[11,"hash","","",202],[11,"clone","","",202],[11,"clone_from","","",202],[11,"graph_id","","",203],[11,"node_id","","",203],[11,"node_label","","",203],[11,"edge_label","","",203],[11,"node_label","","",203],[11,"edge_label","","",203],[11,"nodes","","",203],[11,"edges","","",203],[11,"source","","",203],[11,"target","","",203],[11,"fmt","rustc::middle::infer::region_inference","",204],[11,"hash","","",204],[11,"assert_receiver_is_total_eq","","",204],[11,"eq","","",204],[11,"ne","","",204],[11,"ne","","",204],[11,"clone","","",204],[11,"clone_from","","",204],[11,"assert_receiver_is_total_eq","","",205],[11,"eq","","",205],[11,"ne","","",205],[11,"ne","","",205],[11,"fmt","","",205],[11,"clone","","",205],[11,"clone_from","","",205],[11,"hash","","",206],[11,"assert_receiver_is_total_eq","","",206],[11,"eq","","",206],[11,"ne","","",206],[11,"ne","","",206],[11,"eq","","",207],[11,"ne","","",207],[11,"ne","","",207],[11,"eq","","",208],[11,"ne","","",208],[11,"ne","","",208],[11,"fmt","","",209],[11,"clone","","",209],[11,"clone_from","","",209],[11,"fmt","","",210],[11,"clone","","",210],[11,"clone_from","","",210],[11,"contains","","",210],[11,"push","","",210],[11,"fmt","","",211],[11,"new","","",212],[11,"start_snapshot","","",212],[11,"commit","","",212],[11,"rollback_to","","",212],[11,"num_vars","","",212],[11,"new_region_var","","",212],[11,"new_skolemized","","Creates a new skolemized region. Skolemized regions are fresh\nregions used when performing higher-ranked computations. They\nmust be used in a very particular way and are never supposed\nto \"escape\" out into error messages or the code at large.",212],[11,"new_bound","","",212],[11,"add_given","","",212],[11,"make_eqregion","","",212],[11,"make_subregion","","",212],[11,"verify_generic_bound","","See `Verify::VerifyGenericBound`",212],[11,"lub_regions","","",212],[11,"glb_regions","","",212],[11,"resolve_var","","",212],[11,"combine_vars","","",212],[11,"vars_created_since_snapshot","","",212],[11,"tainted","","Computes all regions that have been related to `r0` in any way since the mark `mark` was\nmade---`r0` itself will be the first entry. This is used when checking whether skolemized\nregions are being improperly related to other regions.",212],[11,"resolve_regions","","This function performs the actual region resolution.  It must be\ncalled after all constraints have been added.  It performs a\nfixed-point iteration to find region values which satisfy all\nconstraints, assuming such values can be found; if they cannot,\nerrors are reported.",212],[11,"fmt","","",213],[11,"eq","","",213],[11,"ne","","",213],[11,"ne","","",213],[11,"repr","","",204],[11,"repr","","",214],[11,"repr","","",215],[11,"repr","","",216],[11,"repr","","",205],[11,"user_string","","",205],[11,"to_ty","","",205],[11,"new","rustc::middle::infer::resolve","",217],[11,"tcx","","",217],[11,"fold_ty","","",217],[11,"enter_region_binder","","",217],[11,"exit_region_binder","","",217],[11,"fold_binder","","",217],[11,"fold_ty","","",217],[11,"fold_mt","","",217],[11,"fold_trait_ref","","",217],[11,"fold_substs","","",217],[11,"fold_fn_sig","","",217],[11,"fold_output","","",217],[11,"fold_bare_fn_ty","","",217],[11,"fold_closure_ty","","",217],[11,"fold_region","","",217],[11,"fold_existential_bounds","","",217],[11,"fold_autoref","","",217],[11,"fold_item_substs","","",217],[11,"tcx","","",218],[11,"fold_ty","","",218],[11,"fold_region","","",218],[11,"enter_region_binder","","",218],[11,"exit_region_binder","","",218],[11,"fold_binder","","",218],[11,"fold_ty","","",218],[11,"fold_mt","","",218],[11,"fold_trait_ref","","",218],[11,"fold_substs","","",218],[11,"fold_fn_sig","","",218],[11,"fold_output","","",218],[11,"fold_bare_fn_ty","","",218],[11,"fold_closure_ty","","",218],[11,"fold_region","","",218],[11,"fold_existential_bounds","","",218],[11,"fold_autoref","","",218],[11,"fold_item_substs","","",218],[11,"new","rustc::middle::infer::freshen","",219],[11,"tcx","","",219],[11,"fold_region","","",219],[11,"fold_ty","","",219],[11,"enter_region_binder","","",219],[11,"exit_region_binder","","",219],[11,"fold_binder","","",219],[11,"fold_ty","","",219],[11,"fold_mt","","",219],[11,"fold_trait_ref","","",219],[11,"fold_substs","","",219],[11,"fold_fn_sig","","",219],[11,"fold_output","","",219],[11,"fold_bare_fn_ty","","",219],[11,"fold_closure_ty","","",219],[11,"fold_region","","",219],[11,"fold_existential_bounds","","",219],[11,"fold_autoref","","",219],[11,"fold_item_substs","","",219],[11,"infcx","rustc::middle::infer::sub","",220],[11,"tag","","",220],[11,"a_is_expected","","",220],[11,"trace","","",220],[11,"equate","","",220],[11,"sub","","",220],[11,"lub","","",220],[11,"glb","","",220],[11,"contratys","","",220],[11,"contraregions","","",220],[11,"regions","","",220],[11,"mts","","",220],[11,"unsafeties","","",220],[11,"builtin_bounds","","",220],[11,"tys","","",220],[11,"binders","","",220],[11,"tcx","","",220],[11,"tps","","",220],[11,"substs","","",220],[11,"substs_variances","","",220],[11,"bare_fn_tys","","",220],[11,"fn_sigs","","",220],[11,"args","","",220],[11,"abi","","",220],[11,"projection_tys","","",220],[11,"projection_predicates","","",220],[11,"projection_bounds","","",220],[11,"existential_bounds","","",220],[11,"trait_refs","","",220],[11,"fmt","rustc::middle::infer::type_variable","",221],[11,"eq","","",221],[11,"ne","","",221],[11,"ne","","",221],[11,"new","","",222],[11,"var_diverges","","",222],[11,"relate_vars","","Records that `a <: b`, `a :> b`, or `a == b`, depending on `dir`.",222],[11,"instantiate_and_push","","Instantiates `vid` with the type `ty` and then pushes an entry onto `stack` for each of the\nrelations of `vid` to other variables. The relations will have the form `(ty, dir, vid1)`\nwhere `vid1` is some other variable id.",222],[11,"new_var","","",222],[11,"probe","","",222],[11,"replace_if_possible","","",222],[11,"snapshot","","",222],[11,"rollback_to","","",222],[11,"commit","","",222],[11,"types_escaping_snapshot","","Find the set of type variables that existed *before* `s`\nbut which have only been unified since `s` started, and\nreturn the types with which they were unified. So if we had\na type variable `V0`, then we started the snapshot, then we\ncreated a type variable `V1`, unifed `V0` with `T0`, and\nunified `V1` with `T1`, this function would return `{T0}`.",222],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::type_variable","",223],[11,"fmt","rustc::middle::infer::unify","",224],[11,"clone","","",224],[11,"clone_from","","",224],[11,"eq","","",224],[11,"ne","","",224],[11,"ne","","",224],[11,"new","","",225],[11,"snapshot","","Starts a new snapshot. Each snapshot must be either\nrolled back or committed in a \"LIFO\" (stack) order.",225],[11,"rollback_to","","Reverses all changes since the last snapshot. Also\nremoves any keys that have been created since then.",225],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",225],[11,"new_key","","",225],[11,"get","","Find the root node for `vid`. This uses the standard union-find algorithm with path\ncompression: http://en.wikipedia.org/wiki/Disjoint-set_data_structure",225],[11,"set","","Sets the value for `vid` to `new_value`. `vid` MUST be a root node! Also, we must be in the\nmiddle of a snapshot.",225],[11,"unify","","Either redirects node_a to node_b or vice versa, depending on the relative rank. Returns\nthe new root and rank. You should then update the value of the new root to something\nsuitable.",225],[6,"Value","rustdoc::core",""],[6,"Undo","",""],[11,"reverse","rustc::middle::infer::unify","",226],[11,"simple_vars","rustc::middle::infer","Unifies two simple keys. Because simple keys do not have any subtyping relationships, if\nboth keys have already been associated with a value, then those two values must be the\nsame.",199],[11,"simple_var_t","","Sets the value of the key `a_id` to `b`. Because simple keys do not have any subtyping\nrelationships, if `a_id` already has a value, it must be the same as `b`.",199],[11,"probe_var","","",199],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",227],[11,"from_index","","",227],[11,"unification_table","","",227],[11,"tag","","",227],[11,"to_type","","",228],[11,"to_type_err","","",228],[6,"Value","rustdoc::core",""],[11,"index","rustc::middle::ty","",229],[11,"from_index","","",229],[11,"unification_table","","",229],[11,"tag","","",229],[11,"to_type","syntax::ast","",230],[11,"to_type_err","","",230],[11,"fmt","rustc::middle::infer","",231],[11,"clone","","",231],[11,"clone_from","","",231],[11,"fmt","","",232],[11,"clone","","",232],[11,"clone_from","","",232],[11,"fmt","","",233],[11,"clone","","",233],[11,"clone_from","","",233],[11,"fmt","","",234],[11,"clone","","",234],[11,"clone_from","","",234],[11,"fmt","","",235],[11,"clone","","",235],[11,"clone_from","","",235],[11,"fmt","","",236],[11,"clone","","",236],[11,"clone_from","","",236],[11,"fmt","","",237],[11,"then","core::result","",238],[11,"to_ures","","",238],[11,"compare","","",238],[11,"freshen","rustc::middle::infer","",199],[11,"type_var_diverges","","",199],[11,"freshener","","",199],[11,"type_is_unconstrained_numeric","","",199],[11,"combine_fields","","",199],[11,"equate","","",199],[11,"sub","","",199],[11,"lub","","",199],[11,"commit_unconditionally","","Execute `f` and commit the bindings",199],[11,"commit_if_ok","","Execute `f` and commit the bindings if successful",199],[11,"commit_regions_if_ok","","Execute `f` and commit only the region bindings if successful.\nThe function f must be very careful not to leak any non-region\nvariables that get created.",199],[11,"try","","Execute `f`, unroll bindings on panic",199],[11,"probe","","Execute `f` then unroll any bindings it creates",199],[11,"add_given","","",199],[11,"sub_types","","",199],[11,"eq_types","","",199],[11,"sub_trait_refs","","",199],[11,"sub_poly_trait_refs","","",199],[11,"skolemize_late_bound_regions","","See `higher_ranked::skolemize_late_bound_regions`",199],[11,"leak_check","","See `higher_ranked::leak_check`",199],[11,"plug_leaks","","See `higher_ranked::plug_leaks`",199],[11,"equality_predicate","","",199],[11,"region_outlives_predicate","","",199],[11,"next_ty_var_id","","",199],[11,"next_ty_var","","",199],[11,"next_diverging_ty_var","","",199],[11,"next_ty_vars","","",199],[11,"next_int_var_id","","",199],[11,"next_float_var_id","","",199],[11,"next_region_var","","",199],[11,"region_vars_for_defs","","",199],[11,"fresh_substs_for_generics","","Given a set of generics defined on a type or impl, returns a substitution mapping each\ntype/region parameter to a fresh inference variable.",199],[11,"fresh_substs_for_trait","","Given a set of generics defined on a trait, returns a substitution mapping each output\ntype/region parameter to a fresh inference variable, and mapping the self type to\n`self_ty`.",199],[11,"fresh_bound_region","","",199],[11,"resolve_regions_and_report_errors","","",199],[11,"ty_to_string","","",199],[11,"tys_to_string","","",199],[11,"trait_ref_to_string","","",199],[11,"shallow_resolve","","",199],[11,"resolve_type_vars_if_possible","","Where possible, replaces type/int/float variables in\n`value` with their final value. Note that region variables\nare unaffected. If a type variable has not been unified, it\nis left as is.  This is an idempotent operation that does\nnot affect inference state in any way and so you can do it\nat will.",199],[11,"fully_resolve","","Attempts to resolve all type/region variables in\n`value`. Region inference must have been run already (e.g.,\nby calling `resolve_regions_and_report_errors`).  If some\nvariable was never unified, an `Err` results.",199],[11,"type_error_message_str","","",199],[11,"type_error_message_str_with_expected","","",199],[11,"type_error_message","","",199],[11,"report_mismatched_types","","",199],[11,"replace_late_bound_regions_with_fresh_var","","",199],[11,"verify_generic_bound","","See `verify_generic_bound` method in `region_inference`",199],[11,"can_equate","","",199],[11,"span","","",233],[11,"types","","",233],[11,"dummy","","",233],[11,"repr","","",233],[11,"span","","",231],[11,"repr","","",231],[11,"span","","",234],[11,"repr","","",234],[11,"span","","",236],[11,"repr","","",236],[11,"hash","rustc::middle::lang_items","",239],[11,"assert_receiver_is_total_eq","","",239],[11,"eq","","",239],[11,"ne","","",239],[11,"ne","","",239],[11,"from_i64","","",239],[11,"from_u64","","",239],[11,"from_int","","",239],[11,"from_i8","","",239],[11,"from_i16","","",239],[11,"from_i32","","",239],[11,"from_uint","","",239],[11,"from_u8","","",239],[11,"from_u16","","",239],[11,"from_u32","","",239],[11,"from_f32","","",239],[11,"from_f64","","",239],[11,"new","","",240],[11,"items","","",240],[11,"item_name","","",240],[11,"require","","",240],[11,"from_builtin_kind","","",240],[11,"to_builtin_kind","","",240],[11,"fn_trait_kind","","",240],[11,"send_trait","","",240],[11,"sized_trait","","",240],[11,"copy_trait","","",240],[11,"sync_trait","","",240],[11,"drop_trait","","",240],[11,"add_trait","","",240],[11,"sub_trait","","",240],[11,"mul_trait","","",240],[11,"div_trait","","",240],[11,"rem_trait","","",240],[11,"neg_trait","","",240],[11,"not_trait","","",240],[11,"bitxor_trait","","",240],[11,"bitand_trait","","",240],[11,"bitor_trait","","",240],[11,"shl_trait","","",240],[11,"shr_trait","","",240],[11,"index_trait","","",240],[11,"index_mut_trait","","",240],[11,"range_struct","","",240],[11,"range_from_struct","","",240],[11,"range_to_struct","","",240],[11,"range_full_struct","","",240],[11,"unsafe_type","","",240],[11,"deref_trait","","",240],[11,"deref_mut_trait","","",240],[11,"fn_trait","","",240],[11,"fn_mut_trait","","",240],[11,"fn_once_trait","","",240],[11,"eq_trait","","",240],[11,"ord_trait","","",240],[11,"str_eq_fn","","",240],[11,"panic_fn","","",240],[11,"panic_bounds_check_fn","","",240],[11,"panic_fmt","","",240],[11,"exchange_malloc_fn","","",240],[11,"exchange_free_fn","","",240],[11,"strdup_uniq_fn","","",240],[11,"start_fn","","",240],[11,"ty_desc","","",240],[11,"opaque","","",240],[11,"eh_personality","","",240],[11,"exchange_heap","","",240],[11,"owned_box","","",240],[11,"covariant_type","","",240],[11,"contravariant_type","","",240],[11,"invariant_type","","",240],[11,"covariant_lifetime","","",240],[11,"contravariant_lifetime","","",240],[11,"invariant_lifetime","","",240],[11,"no_copy_bound","","",240],[11,"managed_bound","","",240],[11,"non_zero","","",240],[11,"stack_exhausted","","",240],[11,"debug_trait","","",240],[11,"visit_item","","",241],[11,"visit_name","","",241],[11,"visit_ident","","",241],[11,"visit_mod","","",241],[11,"visit_foreign_item","","",241],[11,"visit_item","","",241],[11,"visit_local","","",241],[11,"visit_block","","",241],[11,"visit_stmt","","",241],[11,"visit_arm","","",241],[11,"visit_pat","","",241],[11,"visit_decl","","",241],[11,"visit_expr","","",241],[11,"visit_expr_post","","",241],[11,"visit_ty","","",241],[11,"visit_generics","","",241],[11,"visit_fn","","",241],[11,"visit_ty_method","","",241],[11,"visit_trait_item","","",241],[11,"visit_trait_ref","","",241],[11,"visit_ty_param_bound","","",241],[11,"visit_poly_trait_ref","","",241],[11,"visit_struct_def","","",241],[11,"visit_struct_field","","",241],[11,"visit_variant","","",241],[11,"visit_opt_lifetime_ref","","",241],[11,"visit_lifetime_bound","","",241],[11,"visit_lifetime_ref","","",241],[11,"visit_lifetime_def","","",241],[11,"visit_explicit_self","","",241],[11,"visit_mac","","",241],[11,"visit_path","","",241],[11,"visit_qpath","","",241],[11,"visit_path_segment","","",241],[11,"visit_path_parameters","","",241],[11,"visit_assoc_type_binding","","",241],[11,"visit_attribute","","",241],[11,"new","","",241],[11,"collect_item","","",241],[11,"collect_local_language_items","","",241],[11,"collect_external_language_items","","",241],[11,"collect","","",241],[11,"eq","rustc::middle::liveness","",242],[11,"ne","","",242],[11,"ne","","",242],[11,"eq","","",243],[11,"ne","","",243],[11,"ne","","",243],[11,"clone","","",243],[11,"clone_from","","",243],[11,"fmt","","",244],[11,"eq","","",244],[11,"ne","","",244],[11,"ne","","",244],[11,"visit_fn","","",245],[11,"visit_local","","",245],[11,"visit_expr","","",245],[11,"visit_arm","","",245],[11,"visit_name","","",245],[11,"visit_ident","","",245],[11,"visit_mod","","",245],[11,"visit_foreign_item","","",245],[11,"visit_item","","",245],[11,"visit_local","","",245],[11,"visit_block","","",245],[11,"visit_stmt","","",245],[11,"visit_arm","","",245],[11,"visit_pat","","",245],[11,"visit_decl","","",245],[11,"visit_expr","","",245],[11,"visit_expr_post","","",245],[11,"visit_ty","","",245],[11,"visit_generics","","",245],[11,"visit_fn","","",245],[11,"visit_ty_method","","",245],[11,"visit_trait_item","","",245],[11,"visit_trait_ref","","",245],[11,"visit_ty_param_bound","","",245],[11,"visit_poly_trait_ref","","",245],[11,"visit_struct_def","","",245],[11,"visit_struct_field","","",245],[11,"visit_variant","","",245],[11,"visit_opt_lifetime_ref","","",245],[11,"visit_lifetime_bound","","",245],[11,"visit_lifetime_ref","","",245],[11,"visit_lifetime_def","","",245],[11,"visit_explicit_self","","",245],[11,"visit_mac","","",245],[11,"visit_path","","",245],[11,"visit_qpath","","",245],[11,"visit_path_segment","","",245],[11,"visit_path_parameters","","",245],[11,"visit_assoc_type_binding","","",245],[11,"visit_attribute","","",245],[11,"fmt","","",243],[11,"fmt","","",242],[11,"fmt","","",246],[11,"fmt","","",247],[11,"visit_fn","","",248],[11,"visit_local","","",248],[11,"visit_expr","","",248],[11,"visit_arm","","",248],[11,"visit_name","","",248],[11,"visit_ident","","",248],[11,"visit_mod","","",248],[11,"visit_foreign_item","","",248],[11,"visit_item","","",248],[11,"visit_local","","",248],[11,"visit_block","","",248],[11,"visit_stmt","","",248],[11,"visit_arm","","",248],[11,"visit_pat","","",248],[11,"visit_decl","","",248],[11,"visit_expr","","",248],[11,"visit_expr_post","","",248],[11,"visit_ty","","",248],[11,"visit_generics","","",248],[11,"visit_fn","","",248],[11,"visit_ty_method","","",248],[11,"visit_trait_item","","",248],[11,"visit_trait_ref","","",248],[11,"visit_ty_param_bound","","",248],[11,"visit_poly_trait_ref","","",248],[11,"visit_struct_def","","",248],[11,"visit_struct_field","","",248],[11,"visit_variant","","",248],[11,"visit_opt_lifetime_ref","","",248],[11,"visit_lifetime_bound","","",248],[11,"visit_lifetime_ref","","",248],[11,"visit_lifetime_def","","",248],[11,"visit_explicit_self","","",248],[11,"visit_mac","","",248],[11,"visit_path","","",248],[11,"visit_qpath","","",248],[11,"visit_path_segment","","",248],[11,"visit_path_parameters","","",248],[11,"visit_assoc_type_binding","","",248],[11,"visit_attribute","","",248],[11,"clone","","",249],[11,"clone_from","","",249],[11,"fmt","rustc::middle::mem_categorization","",250],[11,"eq","","",250],[11,"ne","","",250],[11,"ne","","",250],[11,"clone","","",250],[11,"clone_from","","",250],[11,"fmt","","",251],[11,"eq","","",251],[11,"ne","","",251],[11,"ne","","",251],[11,"clone","","",251],[11,"clone_from","","",251],[11,"fmt","","",252],[11,"hash","","",252],[11,"assert_receiver_is_total_eq","","",252],[11,"eq","","",252],[11,"ne","","",252],[11,"ne","","",252],[11,"clone","","",252],[11,"clone_from","","",252],[11,"fmt","","",253],[11,"hash","","",253],[11,"assert_receiver_is_total_eq","","",253],[11,"eq","","",253],[11,"ne","","",253],[11,"ne","","",253],[11,"clone","","",253],[11,"clone_from","","",253],[11,"fmt","","",254],[11,"hash","","",254],[11,"assert_receiver_is_total_eq","","",254],[11,"eq","","",254],[11,"ne","","",254],[11,"ne","","",254],[11,"clone","","",254],[11,"clone_from","","",254],[11,"fmt","","",255],[11,"hash","","",255],[11,"assert_receiver_is_total_eq","","",255],[11,"eq","","",255],[11,"ne","","",255],[11,"ne","","",255],[11,"clone","","",255],[11,"clone_from","","",255],[11,"fmt","","",256],[11,"hash","","",256],[11,"assert_receiver_is_total_eq","","",256],[11,"eq","","",256],[11,"ne","","",256],[11,"ne","","",256],[11,"clone","","",256],[11,"clone_from","","",256],[11,"fmt","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"ne","","",257],[11,"clone","","",257],[11,"clone_from","","",257],[11,"fmt","","",258],[11,"eq","","",258],[11,"ne","","",258],[11,"ne","","",258],[11,"clone","","",258],[11,"clone_from","","",258],[11,"id","syntax::ast","",259],[11,"span","","",259],[11,"id","","",260],[11,"span","","",260],[11,"from_mutbl","rustc::middle::mem_categorization","",256],[11,"from_borrow_kind","","",256],[11,"from_pointer_kind","","",256],[11,"inherit","","",256],[11,"is_mutable","","",256],[11,"is_immutable","","",256],[11,"to_user_str","","",256],[11,"new","","",261],[11,"cat_expr","","",261],[11,"cat_expr_autoderefd","","",261],[11,"cat_expr_unadjusted","","",261],[11,"cat_def","","",261],[11,"cat_rvalue_node","","",261],[11,"cat_rvalue","","",261],[11,"cat_field","","",261],[11,"cat_tup_field","","",261],[11,"cat_index","","Creates a cmt for an indexing operation (`[]`).",261],[11,"cat_slice_pattern","","Given a pattern P like: `[_, ..Q, _]`, where `vec_cmt` is the cmt for `P`, `slice_pat` is\nthe pattern `Q`, returns:",261],[11,"cat_imm_interior","","",261],[11,"cat_downcast","","",261],[11,"cat_pattern","","",261],[11,"guarantor","","Returns `self` after stripping away any owned pointer derefs or\ninterior content. The return value is basically the `cmt` which\ndetermines how long the value in `self` remains live.",258],[11,"freely_aliasable","","Returns `Some(_)` if this lvalue represents a freely aliasable pointer type.",258],[11,"upvar","","",258],[11,"descriptive_string","","",258],[11,"repr","","",258],[11,"repr","","",250],[11,"repr","","",252],[11,"repr","","",253],[11,"repr","rustc::middle::ty","",262],[11,"repr","rustc::middle::mem_categorization","",251],[11,"user_string","","",251],[11,"fmt","rustc::middle::privacy","",263],[11,"fmt","","",264],[11,"fmt","","",265],[11,"eq","","",265],[11,"ne","","",265],[11,"ne","","",265],[11,"or","","",263],[11,"visit_expr","rustc::middle::reachable","",266],[11,"visit_item","","",266],[11,"visit_name","","",266],[11,"visit_ident","","",266],[11,"visit_mod","","",266],[11,"visit_foreign_item","","",266],[11,"visit_item","","",266],[11,"visit_local","","",266],[11,"visit_block","","",266],[11,"visit_stmt","","",266],[11,"visit_arm","","",266],[11,"visit_pat","","",266],[11,"visit_decl","","",266],[11,"visit_expr","","",266],[11,"visit_expr_post","","",266],[11,"visit_ty","","",266],[11,"visit_generics","","",266],[11,"visit_fn","","",266],[11,"visit_ty_method","","",266],[11,"visit_trait_item","","",266],[11,"visit_trait_ref","","",266],[11,"visit_ty_param_bound","","",266],[11,"visit_poly_trait_ref","","",266],[11,"visit_struct_def","","",266],[11,"visit_struct_field","","",266],[11,"visit_variant","","",266],[11,"visit_opt_lifetime_ref","","",266],[11,"visit_lifetime_bound","","",266],[11,"visit_lifetime_ref","","",266],[11,"visit_lifetime_def","","",266],[11,"visit_explicit_self","","",266],[11,"visit_mac","","",266],[11,"visit_path","","",266],[11,"visit_qpath","","",266],[11,"visit_path_segment","","",266],[11,"visit_path_parameters","","",266],[11,"visit_assoc_type_binding","","",266],[11,"visit_attribute","","",266],[11,"fmt","rustc::middle::region","",133],[11,"decode","","",133],[11,"encode","","",133],[11,"hash","","",133],[11,"cmp","","",133],[11,"assert_receiver_is_total_eq","","",133],[11,"partial_cmp","","",133],[11,"lt","","",133],[11,"le","","",133],[11,"gt","","",133],[11,"ge","","",133],[11,"lt","","",133],[11,"le","","",133],[11,"gt","","",133],[11,"ge","","",133],[11,"eq","","",133],[11,"ne","","",133],[11,"ne","","",133],[11,"clone","","",133],[11,"clone_from","","",133],[11,"fmt","","",267],[11,"decode","","",267],[11,"encode","","",267],[11,"hash","","",267],[11,"cmp","","",267],[11,"assert_receiver_is_total_eq","","",267],[11,"partial_cmp","","",267],[11,"lt","","",267],[11,"le","","",267],[11,"gt","","",267],[11,"ge","","",267],[11,"lt","","",267],[11,"le","","",267],[11,"gt","","",267],[11,"ge","","",267],[11,"eq","","",267],[11,"ne","","",267],[11,"ne","","",267],[11,"clone","","",267],[11,"clone_from","","",267],[11,"from_node_id","","Creates a scope that represents the dynamic extent associated\nwith `node_id`.",133],[11,"node_id","","Returns a node id associated with this scope.",133],[11,"map_id","","Maps this scope to a potentially new one according to the\nNodeId transformer `f_id`.",133],[11,"span","","Returns the span of this CodeExtent.  Note that in general the\nreturned span may not correspond to the span of any node id in\nthe AST.",133],[11,"fmt","","",268],[11,"assert_receiver_is_total_eq","","",268],[11,"eq","","",268],[11,"ne","","",268],[11,"ne","","",268],[11,"fmt","","",269],[11,"assert_receiver_is_total_eq","","",269],[11,"eq","","",269],[11,"ne","","",269],[11,"ne","","",269],[11,"fmt","","",270],[11,"assert_receiver_is_total_eq","","",270],[11,"eq","","",270],[11,"ne","","",270],[11,"ne","","",270],[11,"fmt","","",271],[11,"relate_free_regions","","",272],[11,"record_encl_scope","","",272],[11,"record_var_scope","","",272],[11,"record_rvalue_scope","","",272],[11,"mark_as_terminating_scope","","Records that a scope is a TERMINATING SCOPE. Whenever we create automatic temporaries --\ne.g. by an expression like `a().f` -- they will be freed within the innermost terminating\nscope.",272],[11,"opt_encl_scope","","Returns the narrowest scope that encloses `id`, if any.",272],[11,"encl_scope","","Returns the narrowest scope that encloses `id`, if any.",272],[11,"var_scope","","Returns the lifetime of the local variable `var_id`",272],[11,"temporary_scope","","Returns the scope when temp created by expr_id will be cleaned up",272],[11,"var_region","","Returns the lifetime of the variable `id`.",272],[11,"scopes_intersect","","",272],[11,"is_subscope_of","","Returns true if `subscope` is equal to or is lexically nested inside `superscope` and false\notherwise.",272],[11,"sub_free_region","","Determines whether two free regions have a subregion relationship\nby walking the graph encoded in `free_region_map`.  Note that\nit is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n(that is, the user can give two different names to the same lifetime).",272],[11,"is_subregion_of","","Determines whether one region is a subregion of another.  This is intended to run *after\ninference* and sadly the logic is somewhat duplicated with the code in infer.rs.",272],[11,"nearest_common_ancestor","","Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\nscope which is greater than or equal to both `scope_a` and `scope_b`.",272],[11,"visit_block","","",273],[11,"visit_item","","",273],[11,"visit_fn","","",273],[11,"visit_arm","","",273],[11,"visit_pat","","",273],[11,"visit_stmt","","",273],[11,"visit_expr","","",273],[11,"visit_local","","",273],[11,"visit_name","","",273],[11,"visit_ident","","",273],[11,"visit_mod","","",273],[11,"visit_foreign_item","","",273],[11,"visit_item","","",273],[11,"visit_local","","",273],[11,"visit_block","","",273],[11,"visit_stmt","","",273],[11,"visit_arm","","",273],[11,"visit_pat","","",273],[11,"visit_decl","","",273],[11,"visit_expr","","",273],[11,"visit_expr_post","","",273],[11,"visit_ty","","",273],[11,"visit_generics","","",273],[11,"visit_fn","","",273],[11,"visit_ty_method","","",273],[11,"visit_trait_item","","",273],[11,"visit_trait_ref","","",273],[11,"visit_ty_param_bound","","",273],[11,"visit_poly_trait_ref","","",273],[11,"visit_struct_def","","",273],[11,"visit_struct_field","","",273],[11,"visit_variant","","",273],[11,"visit_opt_lifetime_ref","","",273],[11,"visit_lifetime_bound","","",273],[11,"visit_lifetime_ref","","",273],[11,"visit_lifetime_def","","",273],[11,"visit_explicit_self","","",273],[11,"visit_mac","","",273],[11,"visit_path","","",273],[11,"visit_qpath","","",273],[11,"visit_path_segment","","",273],[11,"visit_path_parameters","","",273],[11,"visit_assoc_type_binding","","",273],[11,"visit_attribute","","",273],[11,"fmt","rustc::middle::resolve_lifetime","",274],[11,"decode","","",274],[11,"encode","","",274],[11,"hash","","",274],[11,"assert_receiver_is_total_eq","","",274],[11,"eq","","",274],[11,"ne","","",274],[11,"ne","","",274],[11,"clone","","",274],[11,"clone_from","","",274],[11,"visit_item","","",275],[11,"visit_fn","","",275],[11,"visit_ty","","",275],[11,"visit_ty_method","","",275],[11,"visit_block","","",275],[11,"visit_lifetime_ref","","",275],[11,"visit_generics","","",275],[11,"visit_poly_trait_ref","","",275],[11,"visit_trait_ref","","",275],[11,"visit_name","","",275],[11,"visit_ident","","",275],[11,"visit_mod","","",275],[11,"visit_foreign_item","","",275],[11,"visit_item","","",275],[11,"visit_local","","",275],[11,"visit_block","","",275],[11,"visit_stmt","","",275],[11,"visit_arm","","",275],[11,"visit_pat","","",275],[11,"visit_decl","","",275],[11,"visit_expr","","",275],[11,"visit_expr_post","","",275],[11,"visit_ty","","",275],[11,"visit_generics","","",275],[11,"visit_fn","","",275],[11,"visit_ty_method","","",275],[11,"visit_trait_item","","",275],[11,"visit_trait_ref","","",275],[11,"visit_ty_param_bound","","",275],[11,"visit_poly_trait_ref","","",275],[11,"visit_struct_def","","",275],[11,"visit_struct_field","","",275],[11,"visit_variant","","",275],[11,"visit_opt_lifetime_ref","","",275],[11,"visit_lifetime_bound","","",275],[11,"visit_lifetime_ref","","",275],[11,"visit_lifetime_def","","",275],[11,"visit_explicit_self","","",275],[11,"visit_mac","","",275],[11,"visit_path","","",275],[11,"visit_qpath","","",275],[11,"visit_path_segment","","",275],[11,"visit_path_parameters","","",275],[11,"visit_assoc_type_binding","","",275],[11,"visit_attribute","","",275],[11,"fmt","","",276],[11,"visit_item","rustc::middle::stability","",277],[11,"visit_fn","","",277],[11,"visit_trait_item","","",277],[11,"visit_variant","","",277],[11,"visit_struct_field","","",277],[11,"visit_foreign_item","","",277],[11,"visit_name","","",277],[11,"visit_ident","","",277],[11,"visit_mod","","",277],[11,"visit_foreign_item","","",277],[11,"visit_item","","",277],[11,"visit_local","","",277],[11,"visit_block","","",277],[11,"visit_stmt","","",277],[11,"visit_arm","","",277],[11,"visit_pat","","",277],[11,"visit_decl","","",277],[11,"visit_expr","","",277],[11,"visit_expr_post","","",277],[11,"visit_ty","","",277],[11,"visit_generics","","",277],[11,"visit_fn","","",277],[11,"visit_ty_method","","",277],[11,"visit_trait_item","","",277],[11,"visit_trait_ref","","",277],[11,"visit_ty_param_bound","","",277],[11,"visit_poly_trait_ref","","",277],[11,"visit_struct_def","","",277],[11,"visit_struct_field","","",277],[11,"visit_variant","","",277],[11,"visit_opt_lifetime_ref","","",277],[11,"visit_lifetime_bound","","",277],[11,"visit_lifetime_ref","","",277],[11,"visit_lifetime_def","","",277],[11,"visit_explicit_self","","",277],[11,"visit_mac","","",277],[11,"visit_path","","",277],[11,"visit_qpath","","",277],[11,"visit_path_segment","","",277],[11,"visit_path_parameters","","",277],[11,"visit_assoc_type_binding","","",277],[11,"visit_attribute","","",277],[11,"build","","Construct the stability index for a crate being compiled.",278],[11,"visit_item","","",279],[11,"visit_expr","","",279],[11,"visit_name","","",279],[11,"visit_ident","","",279],[11,"visit_mod","","",279],[11,"visit_foreign_item","","",279],[11,"visit_item","","",279],[11,"visit_local","","",279],[11,"visit_block","","",279],[11,"visit_stmt","","",279],[11,"visit_arm","","",279],[11,"visit_pat","","",279],[11,"visit_decl","","",279],[11,"visit_expr","","",279],[11,"visit_expr_post","","",279],[11,"visit_ty","","",279],[11,"visit_generics","","",279],[11,"visit_fn","","",279],[11,"visit_ty_method","","",279],[11,"visit_trait_item","","",279],[11,"visit_trait_ref","","",279],[11,"visit_ty_param_bound","","",279],[11,"visit_poly_trait_ref","","",279],[11,"visit_struct_def","","",279],[11,"visit_struct_field","","",279],[11,"visit_variant","","",279],[11,"visit_opt_lifetime_ref","","",279],[11,"visit_lifetime_bound","","",279],[11,"visit_lifetime_ref","","",279],[11,"visit_lifetime_def","","",279],[11,"visit_explicit_self","","",279],[11,"visit_mac","","",279],[11,"visit_path","","",279],[11,"visit_qpath","","",279],[11,"visit_path_segment","","",279],[11,"visit_path_parameters","","",279],[11,"visit_assoc_type_binding","","",279],[11,"visit_attribute","","",279],[11,"fmt","rustc::middle::subst","",67],[11,"hash","","",67],[11,"assert_receiver_is_total_eq","","",67],[11,"eq","","",67],[11,"ne","","",67],[11,"ne","","",67],[11,"clone","","",67],[11,"clone_from","","",67],[11,"fmt","","",280],[11,"hash","","",280],[11,"assert_receiver_is_total_eq","","",280],[11,"eq","","",280],[11,"ne","","",280],[11,"ne","","",280],[11,"clone","","",280],[11,"clone_from","","",280],[11,"new","","",67],[11,"new_type","","",67],[11,"new_trait","","",67],[11,"erased","","",67],[11,"empty","","",67],[11,"trans_empty","","",67],[11,"is_noop","","",67],[11,"type_for_def","","",67],[11,"has_regions_escaping_depth","","",67],[11,"self_ty","","",67],[11,"with_self_ty","","",67],[11,"erase_regions","","",67],[11,"regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"mut_regions","","Since ErasedRegions are only to be used in trans, most of the compiler can use this method\nto easily access the set of region substitutions.",67],[11,"with_method","","",67],[11,"is_erased","","",280],[11,"fmt","","",281],[11,"decode","","",281],[11,"encode","","",281],[11,"hash","","",281],[11,"clone","","",281],[11,"clone_from","","",281],[11,"assert_receiver_is_total_eq","","",281],[11,"eq","","",281],[11,"ne","","",281],[11,"ne","","",281],[11,"cmp","","",281],[11,"partial_cmp","","",281],[11,"lt","","",281],[11,"le","","",281],[11,"gt","","",281],[11,"ge","","",281],[11,"lt","","",281],[11,"le","","",281],[11,"gt","","",281],[11,"ge","","",281],[11,"all","","",281],[11,"to_uint","","",281],[11,"from_uint","","",281],[11,"decode","","",51],[11,"encode","","",51],[11,"hash","","",51],[11,"clone","","",51],[11,"clone_from","","",51],[11,"assert_receiver_is_total_eq","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"ne","","",51],[11,"fmt","","",51],[11,"empty","","",51],[11,"params_from_type","","",51],[11,"new","","`t` is the type space.\n`s` is the self space.\n`a` is the assoc space.\n`f` is the fn space.",51],[11,"push","","Appends `value` to the vector associated with `space`.",51],[11,"extend","","Appends `values` to the vector associated with `space`.",51],[11,"pop","","",51],[11,"truncate","","",51],[11,"replace","","",51],[11,"get_self","","",51],[11,"len","","",51],[11,"is_empty_in","","",51],[11,"get_slice","","",51],[11,"get_mut_slice","","",51],[11,"opt_get","","",51],[11,"get","","",51],[11,"iter","","",51],[11,"into_iter","","",51],[11,"iter_enumerated","","",51],[11,"as_slice","","",51],[11,"into_vec","","",51],[11,"all_vecs","","",51],[11,"all","","",51],[11,"any","","",51],[11,"is_empty","","",51],[11,"map","","",51],[11,"map_enumerated","","",51],[11,"map_move","","",51],[11,"split","","",51],[11,"with_vec","","",51],[11,"clone","","",282],[11,"clone_from","","",282],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::subst","",282],[11,"size_hint","","",282],[11,"tcx","","",283],[11,"enter_region_binder","","",283],[11,"exit_region_binder","","",283],[11,"fold_region","","",283],[11,"fold_ty","","",283],[11,"enter_region_binder","","",283],[11,"exit_region_binder","","",283],[11,"fold_binder","","",283],[11,"fold_ty","","",283],[11,"fold_mt","","",283],[11,"fold_trait_ref","","",283],[11,"fold_substs","","",283],[11,"fold_fn_sig","","",283],[11,"fold_output","","",283],[11,"fold_bare_fn_ty","","",283],[11,"fold_closure_ty","","",283],[11,"fold_region","","",283],[11,"fold_existential_bounds","","",283],[11,"fold_autoref","","",283],[11,"fold_item_substs","","",283],[11,"clone","rustc::middle::traits::fulfill","",284],[11,"clone_from","","",284],[11,"new","","",285],[11,"normalize_projection_type","","\"Normalize\" a projection type `<SomeType as SomeTrait>::X` by\ncreating a fresh type variable `$0` as well as a projection\npredicate `<SomeType as SomeTrait>::X == $0`. When the\ninference engine runs, it will attempt to find an impl of\n`SomeTrait` or a where clause that lets us unify `$0` with\nsomething concrete. If this fails, we'll unify `$0` with\n`projection_ty` again.",285],[11,"register_builtin_bound","","",285],[11,"register_region_obligation","","",285],[11,"register_predicate_obligation","","",285],[11,"region_obligations","","",285],[11,"select_all_or_error","","",285],[11,"select_new_obligations","","Attempts to select obligations that were registered since the call to a selection routine.\nThis is used by the type checker to eagerly attempt to resolve obligations in hopes of\ngaining type information. It'd be equally valid to use `select_where_possible` but it\nresults in `O(n^2)` performance (#18208).",285],[11,"select_where_possible","","",285],[11,"pending_obligations","","",285],[11,"repr","","",284],[11,"clone","rustc::middle::traits::project","",286],[11,"clone_from","","",286],[11,"tcx","","",287],[11,"fold_ty","","",287],[11,"enter_region_binder","","",287],[11,"exit_region_binder","","",287],[11,"fold_binder","","",287],[11,"fold_ty","","",287],[11,"fold_mt","","",287],[11,"fold_trait_ref","","",287],[11,"fold_substs","","",287],[11,"fold_fn_sig","","",287],[11,"fold_output","","",287],[11,"fold_bare_fn_ty","","",287],[11,"fold_closure_ty","","",287],[11,"fold_region","","",287],[11,"fold_existential_bounds","","",287],[11,"fold_autoref","","",287],[11,"fold_item_substs","","",287],[11,"with","","",288],[11,"repr","","",289],[11,"repr","","",290],[11,"fold_with","","",288],[11,"repr","","",288],[11,"fmt","rustc::middle::traits::object_safety","",291],[11,"clone","","",291],[11,"clone_from","","",291],[11,"repr","","",292],[11,"clone","rustc::middle::traits::select","",293],[11,"clone_from","","",293],[11,"fmt","","",294],[11,"clone","","",295],[11,"clone_from","","",295],[11,"fmt","","",295],[11,"assert_receiver_is_total_eq","","",295],[11,"eq","","",295],[11,"ne","","",295],[11,"ne","","",295],[11,"fmt","","",296],[11,"new","","",297],[11,"intercrate","","",297],[11,"infcx","","",297],[11,"tcx","","",297],[11,"param_env","","",297],[11,"closure_typer","","",297],[11,"select","","Evaluates whether the obligation can be satisfied. Returns an indication of whether the\nobligation can be satisfied and, if so, by what means. Never affects surrounding typing\nenvironment.",297],[11,"evaluate_obligation","","Evaluates whether the obligation `obligation` can be satisfied (by any means).",297],[11,"evaluate_impl","","Evaluates whether the impl with id `impl_def_id` could be applied to the self type\n`obligation_self_ty`. This can be used either for trait or inherent impls.",297],[11,"repr","","",295],[11,"new","","",293],[6,"Item","rustdoc::core",""],[11,"next","core::option","",54],[11,"size_hint","","",54],[11,"repr","rustc::middle::traits::select","",298],[11,"may_apply","","",299],[11,"filter_to_traits","rustc::middle::traits::util","",300],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",300],[11,"size_hint","","",300],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::traits::util","",301],[11,"size_hint","","",301],[11,"fmt","rustc::middle::traits","",302],[11,"fmt","","",303],[11,"repr","","",304],[11,"repr","","",305],[11,"repr","","",302],[11,"repr","","",306],[11,"repr","","",303],[11,"repr","","",307],[11,"repr","","",308],[11,"repr","","",309],[11,"fmt","","",309],[11,"repr","rustc::middle::traits::project","",286],[11,"fmt","","",286],[11,"clone","rustc::middle::traits","",304],[11,"clone_from","","",304],[11,"clone","","",310],[11,"clone_from","","",310],[11,"clone","","",311],[11,"clone_from","","",311],[11,"clone","","",312],[11,"clone_from","","",312],[11,"fmt","","",307],[11,"clone","","",307],[11,"clone_from","","",307],[11,"clone","","",309],[11,"clone_from","","",309],[11,"clone","","",305],[11,"clone_from","","",305],[11,"fmt","","",305],[11,"clone","","",302],[11,"clone_from","","",302],[11,"clone","","",306],[11,"clone_from","","",306],[11,"fmt","","",306],[11,"clone","","",303],[11,"clone_from","","",303],[11,"assert_receiver_is_total_eq","","",303],[11,"eq","","",303],[11,"ne","","",303],[11,"ne","","",303],[11,"new","","",304],[11,"misc","","",304],[11,"with","","",304],[11,"new","","",310],[11,"misc","","",310],[11,"dummy","","",310],[11,"iter_nested","","",305],[11,"map_nested","","",305],[11,"map_move_nested","","",305],[11,"iter_nested","","",302],[11,"map_nested","","",302],[11,"map_move_nested","","",302],[11,"iter_nested","","",306],[11,"map_nested","","",306],[11,"map_move_nested","","",306],[11,"is_overflow","","",308],[11,"hash","rustc::middle::ty","",313],[11,"assert_receiver_is_total_eq","","",313],[11,"eq","","",313],[11,"ne","","",313],[11,"ne","","",313],[11,"clone","","",313],[11,"clone_from","","",313],[11,"fmt","","",314],[11,"clone","","",314],[11,"clone_from","","",314],[11,"id","","",314],[11,"fmt","","",93],[11,"clone","","",93],[11,"clone_from","","",93],[11,"def_id","","",93],[11,"name","","",93],[11,"container","","",93],[11,"as_opt_method","","",93],[11,"fmt","","",315],[11,"clone","","",315],[11,"clone_from","","",315],[11,"def_id","","",315],[11,"fmt","","",92],[11,"clone","","",92],[11,"clone_from","","",92],[11,"new","","",92],[11,"container_id","","",92],[11,"fmt","","",117],[11,"clone","","",117],[11,"clone_from","","",117],[11,"fmt","","",316],[11,"hash","","",316],[11,"assert_receiver_is_total_eq","","",316],[11,"eq","","",316],[11,"ne","","",316],[11,"ne","","",316],[11,"clone","","",316],[11,"clone_from","","",316],[11,"fmt","","",98],[11,"clone","","",98],[11,"clone_from","","",98],[11,"hash","","",317],[11,"assert_receiver_is_total_eq","","",317],[11,"eq","","",317],[11,"ne","","",317],[11,"ne","","",317],[11,"encode","","",318],[11,"decode","","",318],[11,"eq","","",318],[11,"ne","","",318],[11,"ne","","",318],[11,"clone","","",318],[11,"clone_from","","",318],[11,"fmt","","",319],[11,"encode","","",319],[11,"decode","","",319],[11,"eq","","",319],[11,"ne","","",319],[11,"ne","","",319],[11,"clone","","",319],[11,"clone_from","","",319],[11,"fmt","","",320],[11,"clone","","",320],[11,"clone_from","","",320],[11,"fmt","","",321],[11,"eq","","",321],[11,"ne","","",321],[11,"ne","","",321],[11,"clone","","",321],[11,"clone_from","","",321],[11,"fmt","","",322],[11,"clone","","",322],[11,"clone_from","","",322],[11,"fmt","","",323],[11,"eq","","",323],[11,"ne","","",323],[11,"ne","","",323],[11,"clone","","",323],[11,"clone_from","","",323],[11,"fmt","","",324],[11,"partial_cmp","","",324],[11,"lt","","",324],[11,"le","","",324],[11,"gt","","",324],[11,"ge","","",324],[11,"lt","","",324],[11,"le","","",324],[11,"gt","","",324],[11,"ge","","",324],[11,"eq","","",324],[11,"ne","","",324],[11,"ne","","",324],[11,"decode","","",324],[11,"encode","","",324],[11,"clone","","",324],[11,"clone_from","","",324],[11,"fmt","","",139],[11,"clone","","",139],[11,"clone_from","","",139],[11,"fmt","","",325],[11,"clone","","",325],[11,"clone_from","","",325],[11,"fmt","","",326],[11,"clone","","",326],[11,"clone_from","","",326],[11,"clone","","",327],[11,"clone_from","","",327],[11,"fmt","","",328],[11,"hash","","",328],[11,"assert_receiver_is_total_eq","","",328],[11,"eq","","",328],[11,"ne","","",328],[11,"ne","","",328],[11,"clone","","",328],[11,"clone_from","","",328],[11,"decode","","",329],[11,"encode","","",329],[11,"fmt","","",329],[11,"hash","","",329],[11,"assert_receiver_is_total_eq","","",329],[11,"eq","","",329],[11,"ne","","",329],[11,"ne","","",329],[11,"clone","","",329],[11,"clone_from","","",329],[11,"expr","","",328],[11,"autoobject","","",328],[11,"autoderef","","",328],[11,"clone","","",330],[11,"clone_from","","",330],[11,"new","","",331],[11,"hash","","",332],[11,"cmp","","",332],[11,"partial_cmp","","",332],[11,"lt","","",332],[11,"le","","",332],[11,"gt","","",332],[11,"ge","","",332],[11,"lt","","",332],[11,"le","","",332],[11,"gt","","",332],[11,"ge","","",332],[11,"clone","","",332],[11,"clone_from","","",332],[11,"assert_receiver_is_total_eq","","",332],[11,"eq","","",332],[11,"ne","","",332],[11,"ne","","",332],[11,"empty","","Returns an empty set of flags.",332],[11,"all","","Returns the set containing all flags.",332],[11,"bits","","Returns the raw value of the flags currently stored.",332],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",332],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",332],[11,"is_empty","","Returns `true` if no flags are currently stored.",332],[11,"is_all","","Returns `true` if all flags are currently set.",332],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",332],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",332],[11,"insert","","Inserts the specified flags in-place.",332],[11,"remove","","Removes the specified flags in-place.",332],[11,"toggle","","Toggles the specified flags in-place.",332],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","Returns the union of the two sets of flags.",332],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc::middle::ty","Returns the left flags, but with all the right flags toggled.",332],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","Returns the intersection between the two sets of flags.",332],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","Returns the set difference of the two sets of flags.",332],[6,"Output","rustdoc::core",""],[11,"not","rustc::middle::ty","Returns the complement of this set of flags.",332],[11,"print_debug_stats","","",333],[11,"fmt","","",334],[11,"fmt","","",332],[11,"eq","","",334],[11,"ne","","",334],[11,"assert_receiver_is_total_eq","","",334],[11,"hash","","",334],[11,"eq","","",335],[11,"ne","","",335],[11,"assert_receiver_is_total_eq","","",335],[11,"hash","","",335],[11,"borrow_from","","",336],[11,"fmt","","",337],[11,"hash","","",337],[11,"assert_receiver_is_total_eq","","",337],[11,"eq","","",337],[11,"ne","","",337],[11,"ne","","",337],[11,"clone","","",337],[11,"clone_from","","",337],[11,"fmt","","",338],[11,"hash","","",338],[11,"assert_receiver_is_total_eq","","",338],[11,"eq","","",338],[11,"ne","","",338],[11,"ne","","",338],[11,"clone","","",338],[11,"clone_from","","",338],[11,"fmt","","",85],[11,"hash","","",85],[11,"assert_receiver_is_total_eq","","",85],[11,"eq","","",85],[11,"ne","","",85],[11,"ne","","",85],[11,"clone","","",85],[11,"clone_from","","",85],[11,"diverges","","",85],[11,"unwrap","","",85],[11,"diverges","","",55],[11,"hash","","",195],[11,"assert_receiver_is_total_eq","","",195],[11,"eq","","",195],[11,"ne","","",195],[11,"ne","","",195],[11,"clone","","",195],[11,"clone_from","","",195],[11,"inputs","","",55],[11,"input","","",55],[11,"output","","",55],[11,"variadic","","",55],[11,"fmt","","",339],[11,"hash","","",339],[11,"assert_receiver_is_total_eq","","",339],[11,"eq","","",339],[11,"ne","","",339],[11,"ne","","",339],[11,"clone","","",339],[11,"clone_from","","",339],[11,"fmt","","",340],[11,"decode","","",340],[11,"encode","","",340],[11,"hash","","",340],[11,"assert_receiver_is_total_eq","","",340],[11,"eq","","",340],[11,"ne","","",340],[11,"ne","","",340],[11,"clone","","",340],[11,"clone_from","","",340],[11,"fmt","","",72],[11,"decode","","",72],[11,"encode","","",72],[11,"hash","","",72],[11,"assert_receiver_is_total_eq","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"clone_from","","",72],[11,"fmt","","",341],[11,"hash","","",341],[11,"assert_receiver_is_total_eq","","",341],[11,"eq","","",341],[11,"ne","","",341],[11,"ne","","",341],[11,"clone","","",341],[11,"clone_from","","",341],[11,"decode","","",342],[11,"encode","","",342],[11,"fmt","","",342],[11,"hash","","",342],[11,"assert_receiver_is_total_eq","","",342],[11,"eq","","",342],[11,"ne","","",342],[11,"ne","","",342],[11,"clone","","",342],[11,"clone_from","","",342],[11,"fmt","","",138],[11,"decode","","",138],[11,"encode","","",138],[11,"clone","","",138],[11,"clone_from","","",138],[11,"eq","","",138],[11,"ne","","",138],[11,"ne","","",138],[11,"fmt","","",137],[11,"decode","","",137],[11,"encode","","",137],[11,"clone","","",137],[11,"clone_from","","",137],[11,"eq","","",137],[11,"ne","","",137],[11,"ne","","",137],[11,"is_bound","","",72],[11,"escapes_depth","","",72],[11,"fmt","","",132],[11,"decode","","",132],[11,"encode","","",132],[11,"hash","","",132],[11,"cmp","","",132],[11,"assert_receiver_is_total_eq","","",132],[11,"partial_cmp","","",132],[11,"lt","","",132],[11,"le","","",132],[11,"gt","","",132],[11,"ge","","",132],[11,"lt","","",132],[11,"le","","",132],[11,"gt","","",132],[11,"ge","","",132],[11,"eq","","",132],[11,"ne","","",132],[11,"ne","","",132],[11,"clone","","",132],[11,"clone_from","","",132],[11,"fmt","","",134],[11,"decode","","",134],[11,"encode","","",134],[11,"hash","","",134],[11,"cmp","","",134],[11,"assert_receiver_is_total_eq","","",134],[11,"partial_cmp","","",134],[11,"lt","","",134],[11,"le","","",134],[11,"gt","","",134],[11,"ge","","",134],[11,"lt","","",134],[11,"le","","",134],[11,"gt","","",134],[11,"ge","","",134],[11,"eq","","",134],[11,"ne","","",134],[11,"ne","","",134],[11,"clone","","",134],[11,"clone_from","","",134],[11,"fmt","","",336],[11,"hash","","",336],[11,"assert_receiver_is_total_eq","","",336],[11,"eq","","",336],[11,"ne","","",336],[11,"ne","","",336],[11,"clone","","",336],[11,"clone_from","","",336],[11,"fmt","","",343],[11,"hash","","",343],[11,"assert_receiver_is_total_eq","","",343],[11,"eq","","",343],[11,"ne","","",343],[11,"ne","","",343],[11,"clone","","",343],[11,"clone_from","","",343],[11,"principal_def_id","","",343],[11,"principal_trait_ref_with_self_ty","","Object types don't have a self-type specified. Therefore, when\nwe convert the principal trait-ref into a normal trait-ref,\nyou must give *some* self-type. A common choice is `mk_err()`\nor some skolemized type.",343],[11,"projection_bounds_with_self_ty","","",343],[11,"fmt","","",65],[11,"hash","","",65],[11,"assert_receiver_is_total_eq","","",65],[11,"eq","","",65],[11,"ne","","",65],[11,"ne","","",65],[11,"clone","","",65],[11,"clone_from","","",65],[11,"self_ty","","",55],[11,"def_id","","",55],[11,"substs","","",55],[11,"input_types","","",55],[11,"to_poly_trait_predicate","","",55],[11,"fmt","","",55],[11,"hash","","",55],[11,"assert_receiver_is_total_eq","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"clone_from","","",55],[11,"eq","","",228],[11,"ne","","",228],[11,"ne","","",228],[11,"clone","","",228],[11,"clone_from","","",228],[11,"fmt","","",344],[11,"clone","","",344],[11,"clone_from","","",344],[11,"fmt","","",345],[11,"clone","","",345],[11,"clone_from","","",345],[11,"fmt","","",346],[11,"clone","","",346],[11,"clone_from","","",346],[11,"fmt","","",66],[11,"clone","","",66],[11,"clone_from","","",66],[11,"hash","","",66],[11,"assert_receiver_is_total_eq","","",66],[11,"eq","","",66],[11,"ne","","",66],[11,"ne","","",66],[11,"fmt","","",63],[11,"clone","","",63],[11,"clone_from","","",63],[11,"hash","","",63],[11,"assert_receiver_is_total_eq","","",63],[11,"eq","","",63],[11,"ne","","",63],[11,"ne","","",63],[11,"fmt","","",64],[11,"hash","","",64],[11,"decode","","",64],[11,"assert_receiver_is_total_eq","","",64],[11,"eq","","",64],[11,"ne","","",64],[11,"ne","","",64],[11,"encode","","",64],[11,"clone","","",64],[11,"clone_from","","",64],[11,"to_uint","","",64],[11,"from_uint","","",64],[11,"hash","","",347],[11,"assert_receiver_is_total_eq","","",347],[11,"eq","","",347],[11,"ne","","",347],[11,"ne","","",347],[11,"clone","","",347],[11,"clone_from","","",347],[11,"hash","","",227],[11,"assert_receiver_is_total_eq","","",227],[11,"eq","","",227],[11,"ne","","",227],[11,"ne","","",227],[11,"clone","","",227],[11,"clone_from","","",227],[11,"hash","","",229],[11,"assert_receiver_is_total_eq","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"ne","","",229],[11,"clone","","",229],[11,"clone_from","","",229],[11,"hash","","",348],[11,"decode","","",348],[11,"encode","","",348],[11,"assert_receiver_is_total_eq","","",348],[11,"eq","","",348],[11,"ne","","",348],[11,"ne","","",348],[11,"clone","","",348],[11,"clone_from","","",348],[11,"hash","","",349],[11,"assert_receiver_is_total_eq","","",349],[11,"eq","","",349],[11,"ne","","",349],[11,"ne","","",349],[11,"clone","","",349],[11,"clone_from","","",349],[11,"fmt","","",350],[11,"hash","","",350],[11,"assert_receiver_is_total_eq","","",350],[11,"eq","","",350],[11,"ne","","",350],[11,"ne","","",350],[11,"decode","","",350],[11,"encode","","",350],[11,"clone","","",350],[11,"clone_from","","",350],[11,"fmt","","",351],[11,"hash","","",351],[11,"assert_receiver_is_total_eq","","",351],[11,"decode","","",351],[11,"encode","","",351],[11,"clone","","",351],[11,"clone_from","","",351],[11,"eq","","",351],[11,"ne","","",351],[11,"ne","","",351],[11,"fmt","","",347],[11,"fmt","","",227],[11,"fmt","","",229],[11,"fmt","","",348],[11,"fmt","","",195],[11,"fmt","","",349],[11,"fmt","","",228],[11,"fmt","","",61],[11,"clone","","",61],[11,"clone_from","","",61],[11,"fmt","","",71],[11,"clone","","",71],[11,"clone_from","","",71],[11,"decode","","",71],[11,"encode","","",71],[11,"to_early_bound_region","","",71],[11,"fmt","","",352],[11,"clone","","",352],[11,"clone_from","","",352],[11,"empty","","",352],[11,"has_type_params","","",352],[11,"has_region_params","","",352],[11,"is_empty","","",352],[11,"to_bounds","","",352],[11,"fmt","","",74],[11,"hash","","",74],[11,"assert_receiver_is_total_eq","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"clone_from","","",74],[11,"fmt","","",75],[11,"hash","","",75],[11,"assert_receiver_is_total_eq","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"clone_from","","",75],[11,"def_id","","",75],[11,"input_types","","",75],[11,"self_ty","","",75],[11,"def_id","","",55],[11,"fmt","","",76],[11,"hash","","",76],[11,"assert_receiver_is_total_eq","","",76],[11,"eq","","",76],[11,"ne","","",76],[11,"ne","","",76],[11,"clone","","",76],[11,"clone_from","","",76],[11,"fmt","","",77],[11,"hash","","",77],[11,"assert_receiver_is_total_eq","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"clone_from","","",77],[11,"fmt","","",78],[11,"hash","","",78],[11,"assert_receiver_is_total_eq","","",78],[11,"eq","","",78],[11,"ne","","",78],[11,"ne","","",78],[11,"clone","","",78],[11,"clone_from","","",78],[11,"item_name","","",55],[11,"sort_key","","",55],[11,"fmt","","",79],[11,"hash","","",79],[11,"assert_receiver_is_total_eq","","",79],[11,"eq","","",79],[11,"ne","","",79],[11,"ne","","",79],[11,"clone","","",79],[11,"clone_from","","",79],[11,"sort_key","","",79],[11,"to_poly_trait_ref","alloc::rc","",53],[11,"to_poly_trait_ref","rustc::middle::ty","",55],[11,"to_poly_trait_ref","","",55],[11,"as_predicate","alloc::rc","",53],[11,"as_predicate","rustc::middle::ty","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"as_predicate","","",55],[11,"has_escaping_regions","","",74],[11,"to_opt_poly_trait_ref","","",74],[11,"fmt","","",353],[11,"clone","","",353],[11,"clone_from","","",353],[11,"empty","","",353],[11,"has_escaping_regions","","",353],[11,"is_empty","","",353],[11,"new","","",65],[11,"self_ty","","",65],[11,"input_types","","",65],[11,"clone","","",354],[11,"clone_from","","",354],[11,"with_caller_bounds","","",354],[11,"for_item","","",354],[11,"fmt","","",355],[11,"clone","","",355],[11,"clone_from","","",355],[11,"clone","","",356],[11,"clone_from","","",356],[11,"decode","","",262],[11,"encode","","",262],[11,"fmt","","",262],[11,"assert_receiver_is_total_eq","","",262],[11,"eq","","",262],[11,"ne","","",262],[11,"ne","","",262],[11,"clone","","",262],[11,"clone_from","","",262],[11,"trait_did","","",262],[11,"mk_substs","","",333],[11,"mk_bare_fn","","",333],[11,"mk_region","","",333],[11,"closure_kind","","",333],[11,"closure_type","","",333],[11,"walk","","Iterator that walks `self` and any types reachable from\n`self`, in depth-first order. Note that just walks the types\nthat appear in `self`, it does not descend into the fields of\nstructs or variants. For example:",334],[11,"walk_children","","Iterator that walks types reachable from `self`, in\ndepth-first order. Note that this is a shallow walk. For\nexample:",334],[11,"new","","",339],[11,"for_self","","",339],[11,"for_def","","",339],[11,"to_ty","","",339],[11,"is_self","","",339],[11,"empty","","",356],[11,"is_noop","","",356],[11,"empty","","",66],[11,"clone","","",357],[11,"clone_from","","",357],[11,"when","","",357],[11,"intersects","","",357],[11,"owns_managed","","",357],[11,"owns_owned","","",357],[11,"is_sized","","",357],[11,"interior_param","","",357],[11,"interior_unsafe","","",357],[11,"interior_unsized","","",357],[11,"needs_drop","","",357],[11,"owned_pointer","","Includes only those bits that still apply when indirected through a `Box` pointer",357],[11,"reference","","Includes only those bits that still apply when indirected through a reference (`&`)",357],[11,"managed_pointer","","Includes only those bits that still apply when indirected through a managed pointer (`@`)",357],[11,"unsafe_pointer","","Includes only those bits that still apply when indirected through an unsafe pointer (`*`)",357],[11,"union","","",357],[11,"has_dtor","","",357],[6,"Output","rustdoc::core",""],[11,"bitor","rustc::middle::ty","",357],[6,"Output","rustdoc::core",""],[11,"bitand","rustc::middle::ty","",357],[6,"Output","rustdoc::core",""],[11,"sub","rustc::middle::ty","",357],[11,"fmt","","",357],[11,"fmt","","",358],[11,"eq","","",358],[11,"ne","","",358],[11,"ne","","",358],[11,"assert_receiver_is_total_eq","","",358],[11,"cmp","","",358],[11,"partial_cmp","","",358],[11,"lt","","",358],[11,"le","","",358],[11,"gt","","",358],[11,"ge","","",358],[11,"lt","","",358],[11,"le","","",358],[11,"gt","","",358],[11,"ge","","",358],[11,"repr","","",346],[11,"clone","","",101],[11,"clone_from","","",101],[11,"from_ast_variant","","Creates a new VariantInfo from the corresponding ast representation.",101],[11,"is_present","","",359],[11,"has_drop_flag","","",359],[11,"clone","","",360],[11,"clone_from","","",360],[11,"to_string","","",319],[11,"from_mutbl","","",342],[11,"to_mutbl_lossy","","Returns a mutability `m` such that an `&m T` pointer could be used to obtain this borrow\nkind. Because borrow kinds are richer than mutabilities, we sometimes have to pick a\nmutability that is stronger than necessary so that it at least *would permit* the borrow in\nquestion.",342],[11,"to_user_str","","",342],[11,"is_method_call","","",333],[11,"upvar_capture","","",333],[11,"tcx","","",354],[11,"node_ty","","",354],[11,"expr_ty_adjusted","","",354],[11,"node_method_ty","","",354],[11,"node_method_origin","","",354],[11,"adjustments","","",354],[11,"is_method_call","","",354],[11,"temporary_scope","","",354],[11,"upvar_capture","","",354],[11,"type_moves_by_default","","",354],[11,"param_env","","",354],[11,"closure_kind","","",354],[11,"closure_type","","",354],[11,"closure_upvars","","",354],[11,"fmt","","",361],[11,"eq","","",361],[11,"ne","","",361],[11,"ne","","",361],[11,"assert_receiver_is_total_eq","","",361],[11,"clone","","",361],[11,"clone_from","","",361],[11,"decode","","",136],[11,"encode","","",136],[11,"is_identity","","",320],[11,"is_identity","","",322],[11,"new","","",340],[11,"shifted","","",340],[11,"repr","","",320],[11,"repr","","",321],[11,"repr","","",322],[11,"repr","","",323],[11,"repr","","",343],[11,"repr","","",74],[11,"repr","","",330],[11,"has_regions_escaping_depth","rustc::middle::subst","",67],[11,"has_escaping_regions","","",67],[11,"has_regions_escaping_depth","","",51],[11,"has_escaping_regions","","",51],[11,"has_regions_escaping_depth","rustc::middle::ty","",355],[11,"has_escaping_regions","","",355],[11,"has_regions_escaping_depth","","",72],[11,"has_escaping_regions","","",72],[11,"has_regions_escaping_depth","","",352],[11,"has_escaping_regions","","",352],[11,"has_regions_escaping_depth","","",74],[11,"has_escaping_regions","","",74],[11,"has_regions_escaping_depth","","",65],[11,"has_escaping_regions","","",65],[11,"has_regions_escaping_depth","rustc::middle::subst","",280],[11,"has_escaping_regions","","",280],[11,"has_regions_escaping_depth","rustc::middle::ty","",55],[11,"has_escaping_regions","","",55],[11,"has_regions_escaping_depth","","",76],[11,"has_escaping_regions","","",76],[11,"has_regions_escaping_depth","","",75],[11,"has_escaping_regions","","",75],[11,"has_regions_escaping_depth","","",77],[11,"has_escaping_regions","","",77],[11,"has_regions_escaping_depth","","",78],[11,"has_escaping_regions","","",78],[11,"has_regions_escaping_depth","","",79],[11,"has_escaping_regions","","",79],[11,"repr","","",78],[11,"has_projection_types","collections::vec","",50],[11,"has_projection_types","rustc::middle::subst","",51],[11,"has_projection_types","rustc::middle::ty","",338],[11,"has_projection_types","","",360],[11,"has_projection_types","","",353],[11,"has_projection_types","","",74],[11,"has_projection_types","","",75],[11,"has_projection_types","","",76],[11,"has_projection_types","","",72],[11,"has_projection_types","","",77],[11,"has_projection_types","","",78],[11,"has_projection_types","","",79],[11,"has_projection_types","","",65],[11,"has_projection_types","rustc::middle::subst","",67],[11,"has_projection_types","core::option","",54],[11,"has_projection_types","alloc::rc","",53],[11,"has_projection_types","alloc::boxed","",362],[11,"has_projection_types","rustc::middle::ty","",55],[11,"has_projection_types","","",85],[11,"has_projection_types","","",195],[11,"has_projection_types","","",313],[11,"has_projection_types","","",337],[11,"references_error","","",55],[11,"references_error","alloc::rc","",53],[11,"references_error","rustc::middle::ty","",75],[11,"references_error","","",78],[11,"references_error","","",65],[11,"references_error","","",74],[11,"references_error","","",77],[11,"references_error","","",76],[11,"references_error","","",72],[11,"repr","","",338],[11,"repr","","",360],[11,"repr","","",313],[11,"repr","","",354],[11,"fold_with","core::option","",54],[11,"fold_with","alloc::rc","",53],[11,"fold_with","alloc::boxed","",362],[11,"fold_with","collections::vec","",50],[11,"fold_with","rustc::middle::ty","",55],[11,"fold_with","syntax::owned_slice","",56],[11,"fold_with","rustc::middle::subst","",51],[11,"fold_with","rustc::middle::ty","",337],[11,"fold_with","","",338],[11,"fold_with","","",316],[11,"fold_with","","",85],[11,"fold_with","","",195],[11,"fold_with","","",65],[11,"fold_with","","",313],[11,"fold_with","","",72],[11,"fold_with","rustc::middle::subst","",67],[11,"fold_with","rustc::middle::ty","",356],[11,"fold_with","","",323],[11,"fold_with","","",139],[11,"fold_with","","",330],[11,"fold_with","collections::enum_set","",363],[11,"fold_with","rustc::middle::ty","",63],[11,"fold_with","","",66],[11,"fold_with","","",61],[11,"fold_with","","",71],[11,"fold_with","","",352],[11,"fold_with","","",74],[11,"fold_with","","",78],[11,"fold_with","","",79],[11,"fold_with","","",353],[11,"fold_with","","",321],[11,"fold_with","rustc::middle::traits","",304],[11,"fold_with","","",302],[11,"fold_with","","",306],[11,"fold_with","","",305],[11,"fold_with","","",303],[11,"fold_with","rustc::middle::ty","",76],[11,"fold_with","","",75],[11,"fold_with","","",77],[11,"fold_with","","",360],[11,"fold_with","","",354],[11,"tcx","rustc::middle::ty_fold","",364],[11,"fold_ty","","",364],[11,"enter_region_binder","","",364],[11,"exit_region_binder","","",364],[11,"fold_binder","","",364],[11,"fold_ty","","",364],[11,"fold_mt","","",364],[11,"fold_trait_ref","","",364],[11,"fold_substs","","",364],[11,"fold_fn_sig","","",364],[11,"fold_output","","",364],[11,"fold_bare_fn_ty","","",364],[11,"fold_closure_ty","","",364],[11,"fold_region","","",364],[11,"fold_existential_bounds","","",364],[11,"fold_autoref","","",364],[11,"fold_item_substs","","",364],[11,"new","","",365],[11,"tcx","","",365],[11,"enter_region_binder","","",365],[11,"exit_region_binder","","",365],[11,"fold_region","","",365],[11,"enter_region_binder","","",365],[11,"exit_region_binder","","",365],[11,"fold_binder","","",365],[11,"fold_ty","","",365],[11,"fold_mt","","",365],[11,"fold_trait_ref","","",365],[11,"fold_substs","","",365],[11,"fold_fn_sig","","",365],[11,"fold_output","","",365],[11,"fold_bare_fn_ty","","",365],[11,"fold_closure_ty","","",365],[11,"fold_region","","",365],[11,"fold_existential_bounds","","",365],[11,"fold_autoref","","",365],[11,"fold_item_substs","","",365],[11,"tcx","","",366],[11,"fold_region","","",366],[11,"enter_region_binder","","",366],[11,"exit_region_binder","","",366],[11,"fold_binder","","",366],[11,"fold_ty","","",366],[11,"fold_mt","","",366],[11,"fold_trait_ref","","",366],[11,"fold_substs","","",366],[11,"fold_fn_sig","","",366],[11,"fold_output","","",366],[11,"fold_bare_fn_ty","","",366],[11,"fold_closure_ty","","",366],[11,"fold_region","","",366],[11,"fold_existential_bounds","","",366],[11,"fold_autoref","","",366],[11,"fold_item_substs","","",366],[11,"new","rustc::middle::ty_walk","",367],[11,"skip_current_subtree","","Skips the subtree of types corresponding to the last type\nreturned by `next()`.",367],[6,"Item","rustdoc::core",""],[11,"next","rustc::middle::ty_walk","",367],[11,"size_hint","","",367],[11,"visit_foreign_item","rustc::middle::weak_lang_items","",368],[11,"visit_name","","",368],[11,"visit_ident","","",368],[11,"visit_mod","","",368],[11,"visit_foreign_item","","",368],[11,"visit_item","","",368],[11,"visit_local","","",368],[11,"visit_block","","",368],[11,"visit_stmt","","",368],[11,"visit_arm","","",368],[11,"visit_pat","","",368],[11,"visit_decl","","",368],[11,"visit_expr","","",368],[11,"visit_expr_post","","",368],[11,"visit_ty","","",368],[11,"visit_generics","","",368],[11,"visit_fn","","",368],[11,"visit_ty_method","","",368],[11,"visit_trait_item","","",368],[11,"visit_trait_ref","","",368],[11,"visit_ty_param_bound","","",368],[11,"visit_poly_trait_ref","","",368],[11,"visit_struct_def","","",368],[11,"visit_struct_field","","",368],[11,"visit_variant","","",368],[11,"visit_opt_lifetime_ref","","",368],[11,"visit_lifetime_bound","","",368],[11,"visit_lifetime_ref","","",368],[11,"visit_lifetime_def","","",368],[11,"visit_explicit_self","","",368],[11,"visit_mac","","",368],[11,"visit_path","","",368],[11,"visit_qpath","","",368],[11,"visit_path_segment","","",368],[11,"visit_path_parameters","","",368],[11,"visit_assoc_type_binding","","",368],[11,"visit_attribute","","",368],[11,"eq","rustc::metadata::common","",369],[11,"ne","","",369],[11,"ne","","",369],[11,"from_uint","","",369],[11,"fmt","","",370],[11,"clone","","",370],[11,"clone_from","","",370],[11,"fmt","rustc::metadata::tydecode","",371],[11,"clone","rustc::metadata::encoder","",372],[11,"clone_from","","",372],[11,"visit_expr","","",373],[11,"visit_item","","",373],[11,"visit_foreign_item","","",373],[11,"visit_name","","",373],[11,"visit_ident","","",373],[11,"visit_mod","","",373],[11,"visit_foreign_item","","",373],[11,"visit_item","","",373],[11,"visit_local","","",373],[11,"visit_block","","",373],[11,"visit_stmt","","",373],[11,"visit_arm","","",373],[11,"visit_pat","","",373],[11,"visit_decl","","",373],[11,"visit_expr","","",373],[11,"visit_expr_post","","",373],[11,"visit_ty","","",373],[11,"visit_generics","","",373],[11,"visit_fn","","",373],[11,"visit_ty_method","","",373],[11,"visit_trait_item","","",373],[11,"visit_trait_ref","","",373],[11,"visit_ty_param_bound","","",373],[11,"visit_poly_trait_ref","","",373],[11,"visit_struct_def","","",373],[11,"visit_struct_field","","",373],[11,"visit_variant","","",373],[11,"visit_opt_lifetime_ref","","",373],[11,"visit_lifetime_bound","","",373],[11,"visit_lifetime_ref","","",373],[11,"visit_lifetime_def","","",373],[11,"visit_explicit_self","","",373],[11,"visit_mac","","",373],[11,"visit_path","","",373],[11,"visit_qpath","","",373],[11,"visit_path_segment","","",373],[11,"visit_path_parameters","","",373],[11,"visit_assoc_type_binding","","",373],[11,"visit_attribute","","",373],[11,"visit_item","","",374],[11,"visit_name","","",374],[11,"visit_ident","","",374],[11,"visit_mod","","",374],[11,"visit_foreign_item","","",374],[11,"visit_item","","",374],[11,"visit_local","","",374],[11,"visit_block","","",374],[11,"visit_stmt","","",374],[11,"visit_arm","","",374],[11,"visit_pat","","",374],[11,"visit_decl","","",374],[11,"visit_expr","","",374],[11,"visit_expr_post","","",374],[11,"visit_ty","","",374],[11,"visit_generics","","",374],[11,"visit_fn","","",374],[11,"visit_ty_method","","",374],[11,"visit_trait_item","","",374],[11,"visit_trait_ref","","",374],[11,"visit_ty_param_bound","","",374],[11,"visit_poly_trait_ref","","",374],[11,"visit_struct_def","","",374],[11,"visit_struct_field","","",374],[11,"visit_variant","","",374],[11,"visit_opt_lifetime_ref","","",374],[11,"visit_lifetime_bound","","",374],[11,"visit_lifetime_ref","","",374],[11,"visit_lifetime_def","","",374],[11,"visit_explicit_self","","",374],[11,"visit_mac","","",374],[11,"visit_path","","",374],[11,"visit_qpath","","",374],[11,"visit_path_segment","","",374],[11,"visit_path_parameters","","",374],[11,"visit_assoc_type_binding","","",374],[11,"visit_attribute","","",374],[11,"eq","rustc::metadata::decoder","",375],[11,"ne","","",375],[11,"ne","","",375],[11,"fmt","","",376],[11,"clone","","",376],[11,"clone_from","","",376],[11,"clone","","",377],[11,"clone_from","","",377],[11,"visit_item","rustc::metadata::creader","",378],[11,"visit_name","","",378],[11,"visit_ident","","",378],[11,"visit_mod","","",378],[11,"visit_foreign_item","","",378],[11,"visit_item","","",378],[11,"visit_local","","",378],[11,"visit_block","","",378],[11,"visit_stmt","","",378],[11,"visit_arm","","",378],[11,"visit_pat","","",378],[11,"visit_decl","","",378],[11,"visit_expr","","",378],[11,"visit_expr_post","","",378],[11,"visit_ty","","",378],[11,"visit_generics","","",378],[11,"visit_fn","","",378],[11,"visit_ty_method","","",378],[11,"visit_trait_item","","",378],[11,"visit_trait_ref","","",378],[11,"visit_ty_param_bound","","",378],[11,"visit_poly_trait_ref","","",378],[11,"visit_struct_def","","",378],[11,"visit_struct_field","","",378],[11,"visit_variant","","",378],[11,"visit_opt_lifetime_ref","","",378],[11,"visit_lifetime_bound","","",378],[11,"visit_lifetime_ref","","",378],[11,"visit_lifetime_def","","",378],[11,"visit_explicit_self","","",378],[11,"visit_mac","","",378],[11,"visit_path","","",378],[11,"visit_qpath","","",378],[11,"visit_path_segment","","",378],[11,"visit_path_parameters","","",378],[11,"visit_assoc_type_binding","","",378],[11,"visit_attribute","","",378],[11,"as_slice","","",379],[11,"new","","",378],[11,"read_crates","","",378],[11,"read_plugin_metadata","","",378],[11,"exported_macros","","Read exported macros",380],[11,"plugin_registrar","","Look for a plugin registrar. Returns library path and symbol name.",380],[11,"clone","rustc::metadata::cstore","",381],[11,"clone_from","","",381],[11,"eq","","",381],[11,"ne","","",381],[11,"ne","","",381],[11,"fmt","","",381],[11,"from_i64","","",382],[11,"from_u64","","",382],[11,"from_int","","",382],[11,"from_i8","","",382],[11,"from_i16","","",382],[11,"from_i32","","",382],[11,"from_uint","","",382],[11,"from_u8","","",382],[11,"from_u16","","",382],[11,"from_u32","","",382],[11,"from_f32","","",382],[11,"from_f64","","",382],[11,"eq","","",382],[11,"ne","","",382],[11,"ne","","",382],[11,"clone","","",382],[11,"clone_from","","",382],[11,"clone","","",383],[11,"clone_from","","",383],[11,"eq","","",383],[11,"ne","","",383],[11,"ne","","",383],[11,"new","","",384],[11,"next_crate_num","","",384],[11,"get_crate_data","","",384],[11,"get_crate_hash","","",384],[11,"set_crate_data","","",384],[11,"iter_crate_data","","",384],[11,"iter_crate_data_origins","","Like `iter_crate_data`, but passes source paths (if available) as well.",384],[11,"add_used_crate_source","","",384],[11,"get_used_crate_source","","",384],[11,"reset","","",384],[11,"get_used_crates","","",384],[11,"add_used_library","","",384],[11,"get_used_libraries","","",384],[11,"add_used_link_args","","",384],[11,"get_used_link_args","","",384],[11,"add_extern_mod_stmt_cnum","","",384],[11,"find_extern_mod_stmt_cnum","","",384],[11,"data","","",57],[11,"name","","",57],[11,"hash","","",57],[11,"as_slice","","",385],[11,"maybe_load_library_crate","rustc::metadata::loader","",386],[11,"load_library_crate","","",386],[11,"report_load_errs","","",386],[11,"as_slice","","",387],[11,"for_each_lib_search_path","rustc::metadata::filesearch","",388],[11,"get_lib_path","","",388],[11,"search","","",388],[11,"new","","",388],[11,"get_dylib_search_paths","","",388],[11,"get_tools_search_paths","","",388],[11,"eq","rustc::session::config","",389],[11,"ne","","",389],[11,"ne","","",389],[11,"clone","","",389],[11,"clone_from","","",389],[11,"eq","","",390],[11,"ne","","",390],[11,"ne","","",390],[11,"clone","","",390],[11,"clone_from","","",390],[11,"assert_receiver_is_total_eq","","",391],[11,"cmp","","",391],[11,"partial_cmp","","",391],[11,"lt","","",391],[11,"le","","",391],[11,"gt","","",391],[11,"ge","","",391],[11,"lt","","",391],[11,"le","","",391],[11,"gt","","",391],[11,"ge","","",391],[11,"eq","","",391],[11,"ne","","",391],[11,"ne","","",391],[11,"clone","","",391],[11,"clone_from","","",391],[11,"clone","","",392],[11,"clone_from","","",392],[11,"clone","","",393],[11,"clone_from","","",393],[11,"assert_receiver_is_total_eq","","",394],[11,"eq","","",394],[11,"ne","","",394],[11,"ne","","",394],[11,"clone","","",394],[11,"clone_from","","",394],[11,"clone","","",395],[11,"clone_from","","",395],[11,"path","","",395],[11,"temp_path","","",395],[11,"with_extension","","",395],[11,"filestem","","",395],[11,"eq","","",396],[11,"ne","","",396],[11,"ne","","",396],[11,"fmt","","",397],[11,"hash","","",397],[11,"assert_receiver_is_total_eq","","",397],[11,"cmp","","",397],[11,"clone","","",397],[11,"clone_from","","",397],[11,"partial_cmp","","",397],[11,"lt","","",397],[11,"le","","",397],[11,"gt","","",397],[11,"ge","","",397],[11,"lt","","",397],[11,"le","","",397],[11,"gt","","",397],[11,"ge","","",397],[11,"eq","","",397],[11,"ne","","",397],[11,"ne","","",397],[11,"clone","","",398],[11,"clone_from","","",398],[11,"is_empty","","",398],[11,"clone","","",399],[11,"clone_from","","",399],[11,"clone","","",400],[11,"clone_from","","",400],[11,"fmt","","",401],[11,"assert_receiver_is_total_eq","","",401],[11,"eq","","",401],[11,"ne","","",401],[11,"ne","","",401],[11,"clone","","",401],[11,"clone_from","","",401],[11,"assert_receiver_is_total_eq","","",402],[11,"eq","","",402],[11,"ne","","",402],[11,"ne","","",402],[11,"clone","","",402],[11,"clone_from","","",402],[11,"is_stable","","",402],[11,"fmt","","",397],[11,"fmt","rustc::session::search_paths","",403],[11,"clone","","",403],[11,"clone_from","","",403],[11,"fmt","","",404],[11,"clone","","",404],[11,"clone_from","","",404],[11,"eq","","",404],[11,"ne","","",404],[11,"ne","","",404],[11,"assert_receiver_is_total_eq","","",404],[11,"new","","",403],[11,"add_path","","",403],[11,"iter","","",403],[6,"Item","rustdoc::core",""],[11,"next","rustc::session::search_paths","",405],[11,"size_hint","","",405],[11,"span_fatal","rustc::session","",406],[11,"span_fatal_with_code","","",406],[11,"fatal","","",406],[11,"span_err","","",406],[11,"span_err_with_code","","",406],[11,"err","","",406],[11,"err_count","","",406],[11,"has_errors","","",406],[11,"abort_if_errors","","",406],[11,"span_warn","","",406],[11,"span_warn_with_code","","",406],[11,"warn","","",406],[11,"opt_span_warn","","",406],[11,"span_note","","",406],[11,"span_end_note","","",406],[11,"span_help","","",406],[11,"fileline_note","","",406],[11,"fileline_help","","",406],[11,"note","","",406],[11,"help","","",406],[11,"opt_span_bug","","",406],[11,"span_bug","","",406],[11,"bug","","",406],[11,"span_unimpl","","",406],[11,"unimpl","","",406],[11,"add_lint","","",406],[11,"next_node_id","","",406],[11,"reserve_node_ids","","",406],[11,"diagnostic","","",406],[11,"codemap","","",406],[11,"impossible_case","","",406],[11,"verbose","","",406],[11,"time_passes","","",406],[11,"count_llvm_insns","","",406],[11,"count_type_sizes","","",406],[11,"time_llvm_passes","","",406],[11,"trans_stats","","",406],[11,"meta_stats","","",406],[11,"asm_comments","","",406],[11,"no_verify","","",406],[11,"borrowck_stats","","",406],[11,"print_llvm_passes","","",406],[11,"lto","","",406],[11,"no_landing_pads","","",406],[11,"unstable_options","","",406],[11,"print_enum_sizes","","",406],[11,"sysroot","","",406],[11,"target_filesearch","","",406],[11,"host_filesearch","","",406],[11,"args","rustc::plugin::registry","Get the `#[plugin]` attribute used to load this plugin.",407],[11,"register_syntax_extension","","Register a syntax extension of any kind.",407],[11,"register_macro","","Register a macro of the usual kind.",407],[11,"register_lint_pass","","Register a compiler lint pass.",407],[11,"register_lint_group","","Register a lint group.",407],[11,"visit_item","rustc::plugin::load","",408],[11,"visit_mac","","",408],[11,"visit_name","","",408],[11,"visit_ident","","",408],[11,"visit_mod","","",408],[11,"visit_foreign_item","","",408],[11,"visit_item","","",408],[11,"visit_local","","",408],[11,"visit_block","","",408],[11,"visit_stmt","","",408],[11,"visit_arm","","",408],[11,"visit_pat","","",408],[11,"visit_decl","","",408],[11,"visit_expr","","",408],[11,"visit_expr_post","","",408],[11,"visit_ty","","",408],[11,"visit_generics","","",408],[11,"visit_fn","","",408],[11,"visit_ty_method","","",408],[11,"visit_trait_item","","",408],[11,"visit_trait_ref","","",408],[11,"visit_ty_param_bound","","",408],[11,"visit_poly_trait_ref","","",408],[11,"visit_struct_def","","",408],[11,"visit_struct_field","","",408],[11,"visit_variant","","",408],[11,"visit_opt_lifetime_ref","","",408],[11,"visit_lifetime_bound","","",408],[11,"visit_lifetime_ref","","",408],[11,"visit_lifetime_def","","",408],[11,"visit_explicit_self","","",408],[11,"visit_mac","","",408],[11,"visit_path","","",408],[11,"visit_qpath","","",408],[11,"visit_path_segment","","",408],[11,"visit_path_parameters","","",408],[11,"visit_assoc_type_binding","","",408],[11,"visit_attribute","","",408],[11,"load_plugin","","",408],[11,"visit_item","rustc::plugin::build","",409],[11,"visit_name","","",409],[11,"visit_ident","","",409],[11,"visit_mod","","",409],[11,"visit_foreign_item","","",409],[11,"visit_item","","",409],[11,"visit_local","","",409],[11,"visit_block","","",409],[11,"visit_stmt","","",409],[11,"visit_arm","","",409],[11,"visit_pat","","",409],[11,"visit_decl","","",409],[11,"visit_expr","","",409],[11,"visit_expr_post","","",409],[11,"visit_ty","","",409],[11,"visit_generics","","",409],[11,"visit_fn","","",409],[11,"visit_ty_method","","",409],[11,"visit_trait_item","","",409],[11,"visit_trait_ref","","",409],[11,"visit_ty_param_bound","","",409],[11,"visit_poly_trait_ref","","",409],[11,"visit_struct_def","","",409],[11,"visit_struct_field","","",409],[11,"visit_variant","","",409],[11,"visit_opt_lifetime_ref","","",409],[11,"visit_lifetime_bound","","",409],[11,"visit_lifetime_ref","","",409],[11,"visit_lifetime_def","","",409],[11,"visit_explicit_self","","",409],[11,"visit_mac","","",409],[11,"visit_path","","",409],[11,"visit_qpath","","",409],[11,"visit_path_segment","","",409],[11,"visit_path_parameters","","",409],[11,"visit_assoc_type_binding","","",409],[11,"visit_attribute","","",409],[11,"fmt","rustc::lint","",410],[11,"name_lower","","Get the lint's name, with ASCII letters converted to lowercase.",410],[11,"clone","","",411],[11,"clone_from","","",411],[11,"eq","","",411],[11,"ne","","",411],[11,"assert_receiver_is_total_eq","","",411],[11,"hash","","",411],[11,"of","","Get the `LintId` for a `Lint`.",411],[11,"as_str","","Get the name of the lint.",411],[11,"fmt","","",412],[11,"cmp","","",412],[11,"assert_receiver_is_total_eq","","",412],[11,"partial_cmp","","",412],[11,"lt","","",412],[11,"le","","",412],[11,"gt","","",412],[11,"ge","","",412],[11,"lt","","",412],[11,"le","","",412],[11,"gt","","",412],[11,"ge","","",412],[11,"eq","","",412],[11,"ne","","",412],[11,"ne","","",412],[11,"clone","","",412],[11,"clone_from","","",412],[11,"as_str","","Convert a level to a lower-case string.",412],[11,"from_str","","Convert a lower-case string to a level.",412],[11,"assert_receiver_is_total_eq","","",413],[11,"eq","","",413],[11,"ne","","",413],[11,"ne","","",413],[11,"clone","","",413],[11,"clone_from","","",413],[11,"get_lints","rustc::lint::builtin","",414],[11,"check_expr","","",414],[11,"check_crate","","",414],[11,"check_ident","","",414],[11,"check_mod","","",414],[11,"check_foreign_item","","",414],[11,"check_item","","",414],[11,"check_local","","",414],[11,"check_block","","",414],[11,"check_stmt","","",414],[11,"check_arm","","",414],[11,"check_pat","","",414],[11,"check_decl","","",414],[11,"check_expr","","",414],[11,"check_expr_post","","",414],[11,"check_ty","","",414],[11,"check_generics","","",414],[11,"check_fn","","",414],[11,"check_ty_method","","",414],[11,"check_trait_method","","",414],[11,"check_struct_def","","",414],[11,"check_struct_def_post","","",414],[11,"check_struct_field","","",414],[11,"check_variant","","",414],[11,"check_variant_post","","",414],[11,"check_opt_lifetime_ref","","",414],[11,"check_lifetime_ref","","",414],[11,"check_lifetime_def","","",414],[11,"check_explicit_self","","",414],[11,"check_mac","","",414],[11,"check_path","","",414],[11,"check_attribute","","",414],[11,"enter_lint_attrs","","",414],[11,"exit_lint_attrs","","",414],[11,"get_lints","","",415],[11,"check_expr","","",415],[11,"check_crate","","",415],[11,"check_ident","","",415],[11,"check_mod","","",415],[11,"check_foreign_item","","",415],[11,"check_item","","",415],[11,"check_local","","",415],[11,"check_block","","",415],[11,"check_stmt","","",415],[11,"check_arm","","",415],[11,"check_pat","","",415],[11,"check_decl","","",415],[11,"check_expr","","",415],[11,"check_expr_post","","",415],[11,"check_ty","","",415],[11,"check_generics","","",415],[11,"check_fn","","",415],[11,"check_ty_method","","",415],[11,"check_trait_method","","",415],[11,"check_struct_def","","",415],[11,"check_struct_def_post","","",415],[11,"check_struct_field","","",415],[11,"check_variant","","",415],[11,"check_variant_post","","",415],[11,"check_opt_lifetime_ref","","",415],[11,"check_lifetime_ref","","",415],[11,"check_lifetime_def","","",415],[11,"check_explicit_self","","",415],[11,"check_mac","","",415],[11,"check_path","","",415],[11,"check_attribute","","",415],[11,"enter_lint_attrs","","",415],[11,"exit_lint_attrs","","",415],[11,"new","","",416],[11,"get_lints","","",416],[11,"check_expr","","",416],[11,"check_crate","","",416],[11,"check_ident","","",416],[11,"check_mod","","",416],[11,"check_foreign_item","","",416],[11,"check_item","","",416],[11,"check_local","","",416],[11,"check_block","","",416],[11,"check_stmt","","",416],[11,"check_arm","","",416],[11,"check_pat","","",416],[11,"check_decl","","",416],[11,"check_expr","","",416],[11,"check_expr_post","","",416],[11,"check_ty","","",416],[11,"check_generics","","",416],[11,"check_fn","","",416],[11,"check_ty_method","","",416],[11,"check_trait_method","","",416],[11,"check_struct_def","","",416],[11,"check_struct_def_post","","",416],[11,"check_struct_field","","",416],[11,"check_variant","","",416],[11,"check_variant_post","","",416],[11,"check_opt_lifetime_ref","","",416],[11,"check_lifetime_ref","","",416],[11,"check_lifetime_def","","",416],[11,"check_explicit_self","","",416],[11,"check_mac","","",416],[11,"check_path","","",416],[11,"check_attribute","","",416],[11,"enter_lint_attrs","","",416],[11,"exit_lint_attrs","","",416],[11,"visit_ty","","",417],[11,"visit_name","","",417],[11,"visit_ident","","",417],[11,"visit_mod","","",417],[11,"visit_foreign_item","","",417],[11,"visit_item","","",417],[11,"visit_local","","",417],[11,"visit_block","","",417],[11,"visit_stmt","","",417],[11,"visit_arm","","",417],[11,"visit_pat","","",417],[11,"visit_decl","","",417],[11,"visit_expr","","",417],[11,"visit_expr_post","","",417],[11,"visit_ty","","",417],[11,"visit_generics","","",417],[11,"visit_fn","","",417],[11,"visit_ty_method","","",417],[11,"visit_trait_item","","",417],[11,"visit_trait_ref","","",417],[11,"visit_ty_param_bound","","",417],[11,"visit_poly_trait_ref","","",417],[11,"visit_struct_def","","",417],[11,"visit_struct_field","","",417],[11,"visit_variant","","",417],[11,"visit_opt_lifetime_ref","","",417],[11,"visit_lifetime_bound","","",417],[11,"visit_lifetime_ref","","",417],[11,"visit_lifetime_def","","",417],[11,"visit_explicit_self","","",417],[11,"visit_mac","","",417],[11,"visit_path","","",417],[11,"visit_qpath","","",417],[11,"visit_path_segment","","",417],[11,"visit_path_parameters","","",417],[11,"visit_assoc_type_binding","","",417],[11,"visit_attribute","","",417],[11,"get_lints","","",418],[11,"check_item","","",418],[11,"check_crate","","",418],[11,"check_ident","","",418],[11,"check_mod","","",418],[11,"check_foreign_item","","",418],[11,"check_item","","",418],[11,"check_local","","",418],[11,"check_block","","",418],[11,"check_stmt","","",418],[11,"check_arm","","",418],[11,"check_pat","","",418],[11,"check_decl","","",418],[11,"check_expr","","",418],[11,"check_expr_post","","",418],[11,"check_ty","","",418],[11,"check_generics","","",418],[11,"check_fn","","",418],[11,"check_ty_method","","",418],[11,"check_trait_method","","",418],[11,"check_struct_def","","",418],[11,"check_struct_def_post","","",418],[11,"check_struct_field","","",418],[11,"check_variant","","",418],[11,"check_variant_post","","",418],[11,"check_opt_lifetime_ref","","",418],[11,"check_lifetime_ref","","",418],[11,"check_lifetime_def","","",418],[11,"check_explicit_self","","",418],[11,"check_mac","","",418],[11,"check_path","","",418],[11,"check_attribute","","",418],[11,"enter_lint_attrs","","",418],[11,"exit_lint_attrs","","",418],[11,"get_lints","","",419],[11,"check_item","","",419],[11,"check_expr","","",419],[11,"check_crate","","",419],[11,"check_ident","","",419],[11,"check_mod","","",419],[11,"check_foreign_item","","",419],[11,"check_item","","",419],[11,"check_local","","",419],[11,"check_block","","",419],[11,"check_stmt","","",419],[11,"check_arm","","",419],[11,"check_pat","","",419],[11,"check_decl","","",419],[11,"check_expr","","",419],[11,"check_expr_post","","",419],[11,"check_ty","","",419],[11,"check_generics","","",419],[11,"check_fn","","",419],[11,"check_ty_method","","",419],[11,"check_trait_method","","",419],[11,"check_struct_def","","",419],[11,"check_struct_def_post","","",419],[11,"check_struct_field","","",419],[11,"check_variant","","",419],[11,"check_variant_post","","",419],[11,"check_opt_lifetime_ref","","",419],[11,"check_lifetime_ref","","",419],[11,"check_lifetime_def","","",419],[11,"check_explicit_self","","",419],[11,"check_mac","","",419],[11,"check_path","","",419],[11,"check_attribute","","",419],[11,"enter_lint_attrs","","",419],[11,"exit_lint_attrs","","",419],[11,"visit_ty","","",420],[11,"visit_expr","","",420],[11,"visit_block","","",420],[11,"visit_name","","",420],[11,"visit_ident","","",420],[11,"visit_mod","","",420],[11,"visit_foreign_item","","",420],[11,"visit_item","","",420],[11,"visit_local","","",420],[11,"visit_block","","",420],[11,"visit_stmt","","",420],[11,"visit_arm","","",420],[11,"visit_pat","","",420],[11,"visit_decl","","",420],[11,"visit_expr","","",420],[11,"visit_expr_post","","",420],[11,"visit_ty","","",420],[11,"visit_generics","","",420],[11,"visit_fn","","",420],[11,"visit_ty_method","","",420],[11,"visit_trait_item","","",420],[11,"visit_trait_ref","","",420],[11,"visit_ty_param_bound","","",420],[11,"visit_poly_trait_ref","","",420],[11,"visit_struct_def","","",420],[11,"visit_struct_field","","",420],[11,"visit_variant","","",420],[11,"visit_opt_lifetime_ref","","",420],[11,"visit_lifetime_bound","","",420],[11,"visit_lifetime_ref","","",420],[11,"visit_lifetime_def","","",420],[11,"visit_explicit_self","","",420],[11,"visit_mac","","",420],[11,"visit_path","","",420],[11,"visit_qpath","","",420],[11,"visit_path_segment","","",420],[11,"visit_path_parameters","","",420],[11,"visit_assoc_type_binding","","",420],[11,"visit_attribute","","",420],[11,"new","","",421],[11,"get_lints","","",421],[11,"check_item","","",421],[11,"check_crate","","",421],[11,"check_ident","","",421],[11,"check_mod","","",421],[11,"check_foreign_item","","",421],[11,"check_item","","",421],[11,"check_local","","",421],[11,"check_block","","",421],[11,"check_stmt","","",421],[11,"check_arm","","",421],[11,"check_pat","","",421],[11,"check_decl","","",421],[11,"check_expr","","",421],[11,"check_expr_post","","",421],[11,"check_ty","","",421],[11,"check_generics","","",421],[11,"check_fn","","",421],[11,"check_ty_method","","",421],[11,"check_trait_method","","",421],[11,"check_struct_def","","",421],[11,"check_struct_def_post","","",421],[11,"check_struct_field","","",421],[11,"check_variant","","",421],[11,"check_variant_post","","",421],[11,"check_opt_lifetime_ref","","",421],[11,"check_lifetime_ref","","",421],[11,"check_lifetime_def","","",421],[11,"check_explicit_self","","",421],[11,"check_mac","","",421],[11,"check_path","","",421],[11,"check_attribute","","",421],[11,"enter_lint_attrs","","",421],[11,"exit_lint_attrs","","",421],[11,"get_lints","","",422],[11,"check_attribute","","",422],[11,"check_crate","","",422],[11,"check_ident","","",422],[11,"check_mod","","",422],[11,"check_foreign_item","","",422],[11,"check_item","","",422],[11,"check_local","","",422],[11,"check_block","","",422],[11,"check_stmt","","",422],[11,"check_arm","","",422],[11,"check_pat","","",422],[11,"check_decl","","",422],[11,"check_expr","","",422],[11,"check_expr_post","","",422],[11,"check_ty","","",422],[11,"check_generics","","",422],[11,"check_fn","","",422],[11,"check_ty_method","","",422],[11,"check_trait_method","","",422],[11,"check_struct_def","","",422],[11,"check_struct_def_post","","",422],[11,"check_struct_field","","",422],[11,"check_variant","","",422],[11,"check_variant_post","","",422],[11,"check_opt_lifetime_ref","","",422],[11,"check_lifetime_ref","","",422],[11,"check_lifetime_def","","",422],[11,"check_explicit_self","","",422],[11,"check_mac","","",422],[11,"check_path","","",422],[11,"check_attribute","","",422],[11,"enter_lint_attrs","","",422],[11,"exit_lint_attrs","","",422],[11,"get_lints","","",423],[11,"check_stmt","","",423],[11,"check_crate","","",423],[11,"check_ident","","",423],[11,"check_mod","","",423],[11,"check_foreign_item","","",423],[11,"check_item","","",423],[11,"check_local","","",423],[11,"check_block","","",423],[11,"check_stmt","","",423],[11,"check_arm","","",423],[11,"check_pat","","",423],[11,"check_decl","","",423],[11,"check_expr","","",423],[11,"check_expr_post","","",423],[11,"check_ty","","",423],[11,"check_generics","","",423],[11,"check_fn","","",423],[11,"check_ty_method","","",423],[11,"check_trait_method","","",423],[11,"check_struct_def","","",423],[11,"check_struct_def_post","","",423],[11,"check_struct_field","","",423],[11,"check_variant","","",423],[11,"check_variant_post","","",423],[11,"check_opt_lifetime_ref","","",423],[11,"check_lifetime_ref","","",423],[11,"check_lifetime_def","","",423],[11,"check_explicit_self","","",423],[11,"check_mac","","",423],[11,"check_path","","",423],[11,"check_attribute","","",423],[11,"enter_lint_attrs","","",423],[11,"exit_lint_attrs","","",423],[11,"get_lints","","",424],[11,"check_stmt","","",424],[11,"check_crate","","",424],[11,"check_ident","","",424],[11,"check_mod","","",424],[11,"check_foreign_item","","",424],[11,"check_item","","",424],[11,"check_local","","",424],[11,"check_block","","",424],[11,"check_stmt","","",424],[11,"check_arm","","",424],[11,"check_pat","","",424],[11,"check_decl","","",424],[11,"check_expr","","",424],[11,"check_expr_post","","",424],[11,"check_ty","","",424],[11,"check_generics","","",424],[11,"check_fn","","",424],[11,"check_ty_method","","",424],[11,"check_trait_method","","",424],[11,"check_struct_def","","",424],[11,"check_struct_def_post","","",424],[11,"check_struct_field","","",424],[11,"check_variant","","",424],[11,"check_variant_post","","",424],[11,"check_opt_lifetime_ref","","",424],[11,"check_lifetime_ref","","",424],[11,"check_lifetime_def","","",424],[11,"check_explicit_self","","",424],[11,"check_mac","","",424],[11,"check_path","","",424],[11,"check_attribute","","",424],[11,"enter_lint_attrs","","",424],[11,"exit_lint_attrs","","",424],[11,"get_lints","","",425],[11,"check_item","","",425],[11,"check_generics","","",425],[11,"check_crate","","",425],[11,"check_ident","","",425],[11,"check_mod","","",425],[11,"check_foreign_item","","",425],[11,"check_item","","",425],[11,"check_local","","",425],[11,"check_block","","",425],[11,"check_stmt","","",425],[11,"check_arm","","",425],[11,"check_pat","","",425],[11,"check_decl","","",425],[11,"check_expr","","",425],[11,"check_expr_post","","",425],[11,"check_ty","","",425],[11,"check_generics","","",425],[11,"check_fn","","",425],[11,"check_ty_method","","",425],[11,"check_trait_method","","",425],[11,"check_struct_def","","",425],[11,"check_struct_def_post","","",425],[11,"check_struct_field","","",425],[11,"check_variant","","",425],[11,"check_variant_post","","",425],[11,"check_opt_lifetime_ref","","",425],[11,"check_lifetime_ref","","",425],[11,"check_lifetime_def","","",425],[11,"check_explicit_self","","",425],[11,"check_mac","","",425],[11,"check_path","","",425],[11,"check_attribute","","",425],[11,"enter_lint_attrs","","",425],[11,"exit_lint_attrs","","",425],[11,"eq","","",426],[11,"ne","","",426],[11,"ne","","",426],[11,"get_lints","","",427],[11,"check_fn","","",427],[11,"check_item","","",427],[11,"check_ty_method","","",427],[11,"check_lifetime_def","","",427],[11,"check_pat","","",427],[11,"check_struct_def","","",427],[11,"check_crate","","",427],[11,"check_ident","","",427],[11,"check_mod","","",427],[11,"check_foreign_item","","",427],[11,"check_item","","",427],[11,"check_local","","",427],[11,"check_block","","",427],[11,"check_stmt","","",427],[11,"check_arm","","",427],[11,"check_pat","","",427],[11,"check_decl","","",427],[11,"check_expr","","",427],[11,"check_expr_post","","",427],[11,"check_ty","","",427],[11,"check_generics","","",427],[11,"check_fn","","",427],[11,"check_ty_method","","",427],[11,"check_trait_method","","",427],[11,"check_struct_def","","",427],[11,"check_struct_def_post","","",427],[11,"check_struct_field","","",427],[11,"check_variant","","",427],[11,"check_variant_post","","",427],[11,"check_opt_lifetime_ref","","",427],[11,"check_lifetime_ref","","",427],[11,"check_lifetime_def","","",427],[11,"check_explicit_self","","",427],[11,"check_mac","","",427],[11,"check_path","","",427],[11,"check_attribute","","",427],[11,"enter_lint_attrs","","",427],[11,"exit_lint_attrs","","",427],[11,"get_lints","","",428],[11,"check_item","","",428],[11,"check_pat","","",428],[11,"check_crate","","",428],[11,"check_ident","","",428],[11,"check_mod","","",428],[11,"check_foreign_item","","",428],[11,"check_item","","",428],[11,"check_local","","",428],[11,"check_block","","",428],[11,"check_stmt","","",428],[11,"check_arm","","",428],[11,"check_pat","","",428],[11,"check_decl","","",428],[11,"check_expr","","",428],[11,"check_expr_post","","",428],[11,"check_ty","","",428],[11,"check_generics","","",428],[11,"check_fn","","",428],[11,"check_ty_method","","",428],[11,"check_trait_method","","",428],[11,"check_struct_def","","",428],[11,"check_struct_def_post","","",428],[11,"check_struct_field","","",428],[11,"check_variant","","",428],[11,"check_variant_post","","",428],[11,"check_opt_lifetime_ref","","",428],[11,"check_lifetime_ref","","",428],[11,"check_lifetime_def","","",428],[11,"check_explicit_self","","",428],[11,"check_mac","","",428],[11,"check_path","","",428],[11,"check_attribute","","",428],[11,"enter_lint_attrs","","",428],[11,"exit_lint_attrs","","",428],[11,"get_lints","","",429],[11,"check_expr","","",429],[11,"check_stmt","","",429],[11,"check_crate","","",429],[11,"check_ident","","",429],[11,"check_mod","","",429],[11,"check_foreign_item","","",429],[11,"check_item","","",429],[11,"check_local","","",429],[11,"check_block","","",429],[11,"check_stmt","","",429],[11,"check_arm","","",429],[11,"check_pat","","",429],[11,"check_decl","","",429],[11,"check_expr","","",429],[11,"check_expr_post","","",429],[11,"check_ty","","",429],[11,"check_generics","","",429],[11,"check_fn","","",429],[11,"check_ty_method","","",429],[11,"check_trait_method","","",429],[11,"check_struct_def","","",429],[11,"check_struct_def_post","","",429],[11,"check_struct_field","","",429],[11,"check_variant","","",429],[11,"check_variant_post","","",429],[11,"check_opt_lifetime_ref","","",429],[11,"check_lifetime_ref","","",429],[11,"check_lifetime_def","","",429],[11,"check_explicit_self","","",429],[11,"check_mac","","",429],[11,"check_path","","",429],[11,"check_attribute","","",429],[11,"enter_lint_attrs","","",429],[11,"exit_lint_attrs","","",429],[11,"get_lints","","",430],[11,"check_item","","",430],[11,"check_crate","","",430],[11,"check_ident","","",430],[11,"check_mod","","",430],[11,"check_foreign_item","","",430],[11,"check_item","","",430],[11,"check_local","","",430],[11,"check_block","","",430],[11,"check_stmt","","",430],[11,"check_arm","","",430],[11,"check_pat","","",430],[11,"check_decl","","",430],[11,"check_expr","","",430],[11,"check_expr_post","","",430],[11,"check_ty","","",430],[11,"check_generics","","",430],[11,"check_fn","","",430],[11,"check_ty_method","","",430],[11,"check_trait_method","","",430],[11,"check_struct_def","","",430],[11,"check_struct_def_post","","",430],[11,"check_struct_field","","",430],[11,"check_variant","","",430],[11,"check_variant_post","","",430],[11,"check_opt_lifetime_ref","","",430],[11,"check_lifetime_ref","","",430],[11,"check_lifetime_def","","",430],[11,"check_explicit_self","","",430],[11,"check_mac","","",430],[11,"check_path","","",430],[11,"check_attribute","","",430],[11,"enter_lint_attrs","","",430],[11,"exit_lint_attrs","","",430],[11,"get_lints","","",431],[11,"check_pat","","",431],[11,"check_crate","","",431],[11,"check_ident","","",431],[11,"check_mod","","",431],[11,"check_foreign_item","","",431],[11,"check_item","","",431],[11,"check_local","","",431],[11,"check_block","","",431],[11,"check_stmt","","",431],[11,"check_arm","","",431],[11,"check_pat","","",431],[11,"check_decl","","",431],[11,"check_expr","","",431],[11,"check_expr_post","","",431],[11,"check_ty","","",431],[11,"check_generics","","",431],[11,"check_fn","","",431],[11,"check_ty_method","","",431],[11,"check_trait_method","","",431],[11,"check_struct_def","","",431],[11,"check_struct_def_post","","",431],[11,"check_struct_field","","",431],[11,"check_variant","","",431],[11,"check_variant_post","","",431],[11,"check_opt_lifetime_ref","","",431],[11,"check_lifetime_ref","","",431],[11,"check_lifetime_def","","",431],[11,"check_explicit_self","","",431],[11,"check_mac","","",431],[11,"check_path","","",431],[11,"check_attribute","","",431],[11,"enter_lint_attrs","","",431],[11,"exit_lint_attrs","","",431],[11,"get_lints","","",432],[11,"check_expr","","",432],[11,"check_crate","","",432],[11,"check_ident","","",432],[11,"check_mod","","",432],[11,"check_foreign_item","","",432],[11,"check_item","","",432],[11,"check_local","","",432],[11,"check_block","","",432],[11,"check_stmt","","",432],[11,"check_arm","","",432],[11,"check_pat","","",432],[11,"check_decl","","",432],[11,"check_expr","","",432],[11,"check_expr_post","","",432],[11,"check_ty","","",432],[11,"check_generics","","",432],[11,"check_fn","","",432],[11,"check_ty_method","","",432],[11,"check_trait_method","","",432],[11,"check_struct_def","","",432],[11,"check_struct_def_post","","",432],[11,"check_struct_field","","",432],[11,"check_variant","","",432],[11,"check_variant_post","","",432],[11,"check_opt_lifetime_ref","","",432],[11,"check_lifetime_ref","","",432],[11,"check_lifetime_def","","",432],[11,"check_explicit_self","","",432],[11,"check_mac","","",432],[11,"check_path","","",432],[11,"check_attribute","","",432],[11,"enter_lint_attrs","","",432],[11,"exit_lint_attrs","","",432],[11,"get_lints","","",433],[11,"check_expr","","",433],[11,"check_crate","","",433],[11,"check_ident","","",433],[11,"check_mod","","",433],[11,"check_foreign_item","","",433],[11,"check_item","","",433],[11,"check_local","","",433],[11,"check_block","","",433],[11,"check_stmt","","",433],[11,"check_arm","","",433],[11,"check_pat","","",433],[11,"check_decl","","",433],[11,"check_expr","","",433],[11,"check_expr_post","","",433],[11,"check_ty","","",433],[11,"check_generics","","",433],[11,"check_fn","","",433],[11,"check_ty_method","","",433],[11,"check_trait_method","","",433],[11,"check_struct_def","","",433],[11,"check_struct_def_post","","",433],[11,"check_struct_field","","",433],[11,"check_variant","","",433],[11,"check_variant_post","","",433],[11,"check_opt_lifetime_ref","","",433],[11,"check_lifetime_ref","","",433],[11,"check_lifetime_def","","",433],[11,"check_explicit_self","","",433],[11,"check_mac","","",433],[11,"check_path","","",433],[11,"check_attribute","","",433],[11,"enter_lint_attrs","","",433],[11,"exit_lint_attrs","","",433],[11,"get_lints","","",434],[11,"check_expr","","",434],[11,"check_stmt","","",434],[11,"check_fn","","",434],[11,"check_crate","","",434],[11,"check_ident","","",434],[11,"check_mod","","",434],[11,"check_foreign_item","","",434],[11,"check_item","","",434],[11,"check_local","","",434],[11,"check_block","","",434],[11,"check_stmt","","",434],[11,"check_arm","","",434],[11,"check_pat","","",434],[11,"check_decl","","",434],[11,"check_expr","","",434],[11,"check_expr_post","","",434],[11,"check_ty","","",434],[11,"check_generics","","",434],[11,"check_fn","","",434],[11,"check_ty_method","","",434],[11,"check_trait_method","","",434],[11,"check_struct_def","","",434],[11,"check_struct_def_post","","",434],[11,"check_struct_field","","",434],[11,"check_variant","","",434],[11,"check_variant_post","","",434],[11,"check_opt_lifetime_ref","","",434],[11,"check_lifetime_ref","","",434],[11,"check_lifetime_def","","",434],[11,"check_explicit_self","","",434],[11,"check_mac","","",434],[11,"check_path","","",434],[11,"check_attribute","","",434],[11,"enter_lint_attrs","","",434],[11,"exit_lint_attrs","","",434],[11,"get_lints","","",435],[11,"check_expr","","",435],[11,"check_crate","","",435],[11,"check_ident","","",435],[11,"check_mod","","",435],[11,"check_foreign_item","","",435],[11,"check_item","","",435],[11,"check_local","","",435],[11,"check_block","","",435],[11,"check_stmt","","",435],[11,"check_arm","","",435],[11,"check_pat","","",435],[11,"check_decl","","",435],[11,"check_expr","","",435],[11,"check_expr_post","","",435],[11,"check_ty","","",435],[11,"check_generics","","",435],[11,"check_fn","","",435],[11,"check_ty_method","","",435],[11,"check_trait_method","","",435],[11,"check_struct_def","","",435],[11,"check_struct_def_post","","",435],[11,"check_struct_field","","",435],[11,"check_variant","","",435],[11,"check_variant_post","","",435],[11,"check_opt_lifetime_ref","","",435],[11,"check_lifetime_ref","","",435],[11,"check_lifetime_def","","",435],[11,"check_explicit_self","","",435],[11,"check_mac","","",435],[11,"check_path","","",435],[11,"check_attribute","","",435],[11,"enter_lint_attrs","","",435],[11,"exit_lint_attrs","","",435],[11,"new","","",436],[11,"get_lints","","",436],[11,"enter_lint_attrs","","",436],[11,"exit_lint_attrs","","",436],[11,"check_struct_def","","",436],[11,"check_struct_def_post","","",436],[11,"check_crate","","",436],[11,"check_item","","",436],[11,"check_fn","","",436],[11,"check_ty_method","","",436],[11,"check_struct_field","","",436],[11,"check_variant","","",436],[11,"check_variant_post","","",436],[11,"check_crate","","",436],[11,"check_ident","","",436],[11,"check_mod","","",436],[11,"check_foreign_item","","",436],[11,"check_item","","",436],[11,"check_local","","",436],[11,"check_block","","",436],[11,"check_stmt","","",436],[11,"check_arm","","",436],[11,"check_pat","","",436],[11,"check_decl","","",436],[11,"check_expr","","",436],[11,"check_expr_post","","",436],[11,"check_ty","","",436],[11,"check_generics","","",436],[11,"check_fn","","",436],[11,"check_ty_method","","",436],[11,"check_trait_method","","",436],[11,"check_struct_def","","",436],[11,"check_struct_def_post","","",436],[11,"check_struct_field","","",436],[11,"check_variant","","",436],[11,"check_variant_post","","",436],[11,"check_opt_lifetime_ref","","",436],[11,"check_lifetime_ref","","",436],[11,"check_lifetime_def","","",436],[11,"check_explicit_self","","",436],[11,"check_mac","","",436],[11,"check_path","","",436],[11,"check_attribute","","",436],[11,"enter_lint_attrs","","",436],[11,"exit_lint_attrs","","",436],[11,"get_lints","","",437],[11,"check_item","","",437],[11,"check_crate","","",437],[11,"check_ident","","",437],[11,"check_mod","","",437],[11,"check_foreign_item","","",437],[11,"check_item","","",437],[11,"check_local","","",437],[11,"check_block","","",437],[11,"check_stmt","","",437],[11,"check_arm","","",437],[11,"check_pat","","",437],[11,"check_decl","","",437],[11,"check_expr","","",437],[11,"check_expr_post","","",437],[11,"check_ty","","",437],[11,"check_generics","","",437],[11,"check_fn","","",437],[11,"check_ty_method","","",437],[11,"check_trait_method","","",437],[11,"check_struct_def","","",437],[11,"check_struct_def_post","","",437],[11,"check_struct_field","","",437],[11,"check_variant","","",437],[11,"check_variant_post","","",437],[11,"check_opt_lifetime_ref","","",437],[11,"check_lifetime_ref","","",437],[11,"check_lifetime_def","","",437],[11,"check_explicit_self","","",437],[11,"check_mac","","",437],[11,"check_path","","",437],[11,"check_attribute","","",437],[11,"enter_lint_attrs","","",437],[11,"exit_lint_attrs","","",437],[11,"new","","",438],[11,"get_lints","","",438],[11,"check_item","","",438],[11,"check_crate","","",438],[11,"check_ident","","",438],[11,"check_mod","","",438],[11,"check_foreign_item","","",438],[11,"check_item","","",438],[11,"check_local","","",438],[11,"check_block","","",438],[11,"check_stmt","","",438],[11,"check_arm","","",438],[11,"check_pat","","",438],[11,"check_decl","","",438],[11,"check_expr","","",438],[11,"check_expr_post","","",438],[11,"check_ty","","",438],[11,"check_generics","","",438],[11,"check_fn","","",438],[11,"check_ty_method","","",438],[11,"check_trait_method","","",438],[11,"check_struct_def","","",438],[11,"check_struct_def_post","","",438],[11,"check_struct_field","","",438],[11,"check_variant","","",438],[11,"check_variant_post","","",438],[11,"check_opt_lifetime_ref","","",438],[11,"check_lifetime_ref","","",438],[11,"check_lifetime_def","","",438],[11,"check_explicit_self","","",438],[11,"check_mac","","",438],[11,"check_path","","",438],[11,"check_attribute","","",438],[11,"enter_lint_attrs","","",438],[11,"exit_lint_attrs","","",438],[11,"get_lints","","",439],[11,"check_item","","",439],[11,"check_expr","","",439],[11,"check_crate","","",439],[11,"check_ident","","",439],[11,"check_mod","","",439],[11,"check_foreign_item","","",439],[11,"check_item","","",439],[11,"check_local","","",439],[11,"check_block","","",439],[11,"check_stmt","","",439],[11,"check_arm","","",439],[11,"check_pat","","",439],[11,"check_decl","","",439],[11,"check_expr","","",439],[11,"check_expr_post","","",439],[11,"check_ty","","",439],[11,"check_generics","","",439],[11,"check_fn","","",439],[11,"check_ty_method","","",439],[11,"check_trait_method","","",439],[11,"check_struct_def","","",439],[11,"check_struct_def_post","","",439],[11,"check_struct_field","","",439],[11,"check_variant","","",439],[11,"check_variant_post","","",439],[11,"check_opt_lifetime_ref","","",439],[11,"check_lifetime_ref","","",439],[11,"check_lifetime_def","","",439],[11,"check_explicit_self","","",439],[11,"check_mac","","",439],[11,"check_path","","",439],[11,"check_attribute","","",439],[11,"enter_lint_attrs","","",439],[11,"exit_lint_attrs","","",439],[11,"get_lints","","",440],[11,"check_fn","","",440],[11,"check_crate","","",440],[11,"check_ident","","",440],[11,"check_mod","","",440],[11,"check_foreign_item","","",440],[11,"check_item","","",440],[11,"check_local","","",440],[11,"check_block","","",440],[11,"check_stmt","","",440],[11,"check_arm","","",440],[11,"check_pat","","",440],[11,"check_decl","","",440],[11,"check_expr","","",440],[11,"check_expr_post","","",440],[11,"check_ty","","",440],[11,"check_generics","","",440],[11,"check_fn","","",440],[11,"check_ty_method","","",440],[11,"check_trait_method","","",440],[11,"check_struct_def","","",440],[11,"check_struct_def_post","","",440],[11,"check_struct_field","","",440],[11,"check_variant","","",440],[11,"check_variant_post","","",440],[11,"check_opt_lifetime_ref","","",440],[11,"check_lifetime_ref","","",440],[11,"check_lifetime_def","","",440],[11,"check_explicit_self","","",440],[11,"check_mac","","",440],[11,"check_path","","",440],[11,"check_attribute","","",440],[11,"enter_lint_attrs","","",440],[11,"exit_lint_attrs","","",440],[11,"get_lints","","",441],[11,"check_crate","","",441],[11,"check_ident","","",441],[11,"check_mod","","",441],[11,"check_foreign_item","","",441],[11,"check_item","","",441],[11,"check_local","","",441],[11,"check_block","","",441],[11,"check_stmt","","",441],[11,"check_arm","","",441],[11,"check_pat","","",441],[11,"check_decl","","",441],[11,"check_expr","","",441],[11,"check_expr_post","","",441],[11,"check_ty","","",441],[11,"check_generics","","",441],[11,"check_fn","","",441],[11,"check_ty_method","","",441],[11,"check_trait_method","","",441],[11,"check_struct_def","","",441],[11,"check_struct_def_post","","",441],[11,"check_struct_field","","",441],[11,"check_variant","","",441],[11,"check_variant_post","","",441],[11,"check_opt_lifetime_ref","","",441],[11,"check_lifetime_ref","","",441],[11,"check_lifetime_def","","",441],[11,"check_explicit_self","","",441],[11,"check_mac","","",441],[11,"check_path","","",441],[11,"check_attribute","","",441],[11,"enter_lint_attrs","","",441],[11,"exit_lint_attrs","","",441],[11,"get_lints","","",442],[11,"check_item","","",442],[11,"check_crate","","",442],[11,"check_ident","","",442],[11,"check_mod","","",442],[11,"check_foreign_item","","",442],[11,"check_item","","",442],[11,"check_local","","",442],[11,"check_block","","",442],[11,"check_stmt","","",442],[11,"check_arm","","",442],[11,"check_pat","","",442],[11,"check_decl","","",442],[11,"check_expr","","",442],[11,"check_expr_post","","",442],[11,"check_ty","","",442],[11,"check_generics","","",442],[11,"check_fn","","",442],[11,"check_ty_method","","",442],[11,"check_trait_method","","",442],[11,"check_struct_def","","",442],[11,"check_struct_def_post","","",442],[11,"check_struct_field","","",442],[11,"check_variant","","",442],[11,"check_variant_post","","",442],[11,"check_opt_lifetime_ref","","",442],[11,"check_lifetime_ref","","",442],[11,"check_lifetime_def","","",442],[11,"check_explicit_self","","",442],[11,"check_mac","","",442],[11,"check_path","","",442],[11,"check_attribute","","",442],[11,"enter_lint_attrs","","",442],[11,"exit_lint_attrs","","",442],[11,"get_lints","","",443],[11,"check_attribute","","",443],[11,"check_crate","","",443],[11,"check_ident","","",443],[11,"check_mod","","",443],[11,"check_foreign_item","","",443],[11,"check_item","","",443],[11,"check_local","","",443],[11,"check_block","","",443],[11,"check_stmt","","",443],[11,"check_arm","","",443],[11,"check_pat","","",443],[11,"check_decl","","",443],[11,"check_expr","","",443],[11,"check_expr_post","","",443],[11,"check_ty","","",443],[11,"check_generics","","",443],[11,"check_fn","","",443],[11,"check_ty_method","","",443],[11,"check_trait_method","","",443],[11,"check_struct_def","","",443],[11,"check_struct_def_post","","",443],[11,"check_struct_field","","",443],[11,"check_variant","","",443],[11,"check_variant_post","","",443],[11,"check_opt_lifetime_ref","","",443],[11,"check_lifetime_ref","","",443],[11,"check_lifetime_def","","",443],[11,"check_explicit_self","","",443],[11,"check_mac","","",443],[11,"check_path","","",443],[11,"check_attribute","","",443],[11,"enter_lint_attrs","","",443],[11,"exit_lint_attrs","","",443],[11,"new","rustc::lint::context","",444],[11,"get_lints","","",444],[11,"get_lint_groups","","",444],[11,"register_pass","","",444],[11,"register_group","","",444],[11,"register_builtin","","",444],[11,"process_command_line","","",444],[11,"sess","","Get the overall compiler `Session` object.",445],[11,"current_level","","Get the level of `lint` at the current position of the lint\ntraversal.",445],[11,"lint","","Emit a lint at the appropriate level, with no associated span.",445],[11,"span_lint","","Emit a lint at the appropriate level, for a particular span.",445],[11,"visit_item","","",445],[11,"visit_foreign_item","","",445],[11,"visit_pat","","",445],[11,"visit_expr","","",445],[11,"visit_stmt","","",445],[11,"visit_fn","","",445],[11,"visit_ty_method","","",445],[11,"visit_struct_def","","",445],[11,"visit_struct_field","","",445],[11,"visit_variant","","",445],[11,"visit_ty","","",445],[11,"visit_ident","","",445],[11,"visit_mod","","",445],[11,"visit_local","","",445],[11,"visit_block","","",445],[11,"visit_arm","","",445],[11,"visit_decl","","",445],[11,"visit_expr_post","","",445],[11,"visit_generics","","",445],[11,"visit_trait_item","","",445],[11,"visit_opt_lifetime_ref","","",445],[11,"visit_lifetime_ref","","",445],[11,"visit_lifetime_def","","",445],[11,"visit_explicit_self","","",445],[11,"visit_mac","","",445],[11,"visit_path","","",445],[11,"visit_attribute","","",445],[11,"visit_name","","",445],[11,"visit_ident","","",445],[11,"visit_mod","","",445],[11,"visit_foreign_item","","",445],[11,"visit_item","","",445],[11,"visit_local","","",445],[11,"visit_block","","",445],[11,"visit_stmt","","",445],[11,"visit_arm","","",445],[11,"visit_pat","","",445],[11,"visit_decl","","",445],[11,"visit_expr","","",445],[11,"visit_expr_post","","",445],[11,"visit_ty","","",445],[11,"visit_generics","","",445],[11,"visit_fn","","",445],[11,"visit_ty_method","","",445],[11,"visit_trait_item","","",445],[11,"visit_trait_ref","","",445],[11,"visit_ty_param_bound","","",445],[11,"visit_poly_trait_ref","","",445],[11,"visit_struct_def","","",445],[11,"visit_struct_field","","",445],[11,"visit_variant","","",445],[11,"visit_opt_lifetime_ref","","",445],[11,"visit_lifetime_bound","","",445],[11,"visit_lifetime_ref","","",445],[11,"visit_lifetime_def","","",445],[11,"visit_explicit_self","","",445],[11,"visit_mac","","",445],[11,"visit_path","","",445],[11,"visit_qpath","","",445],[11,"visit_path_segment","","",445],[11,"visit_path_parameters","","",445],[11,"visit_assoc_type_binding","","",445],[11,"visit_attribute","","",445],[11,"visit_id","","",445],[11,"get_lints","","",446],[11,"check_item","","",446],[11,"check_crate","","",446],[11,"check_ident","","",446],[11,"check_mod","","",446],[11,"check_foreign_item","","",446],[11,"check_item","","",446],[11,"check_local","","",446],[11,"check_block","","",446],[11,"check_stmt","","",446],[11,"check_arm","","",446],[11,"check_pat","","",446],[11,"check_decl","","",446],[11,"check_expr","","",446],[11,"check_expr_post","","",446],[11,"check_ty","","",446],[11,"check_generics","","",446],[11,"check_fn","","",446],[11,"check_ty_method","","",446],[11,"check_trait_method","","",446],[11,"check_struct_def","","",446],[11,"check_struct_def_post","","",446],[11,"check_struct_field","","",446],[11,"check_variant","","",446],[11,"check_variant_post","","",446],[11,"check_opt_lifetime_ref","","",446],[11,"check_lifetime_ref","","",446],[11,"check_lifetime_def","","",446],[11,"check_explicit_self","","",446],[11,"check_mac","","",446],[11,"check_path","","",446],[11,"check_attribute","","",446],[11,"enter_lint_attrs","","",446],[11,"exit_lint_attrs","","",446],[11,"fmt","rustc::util::common","",447],[11,"clone","","",447],[11,"clone_from","","",447],[11,"drop","","",448],[11,"visit_expr","","",449],[11,"visit_name","","",449],[11,"visit_ident","","",449],[11,"visit_mod","","",449],[11,"visit_foreign_item","","",449],[11,"visit_item","","",449],[11,"visit_local","","",449],[11,"visit_block","","",449],[11,"visit_stmt","","",449],[11,"visit_arm","","",449],[11,"visit_pat","","",449],[11,"visit_decl","","",449],[11,"visit_expr","","",449],[11,"visit_expr_post","","",449],[11,"visit_ty","","",449],[11,"visit_generics","","",449],[11,"visit_fn","","",449],[11,"visit_ty_method","","",449],[11,"visit_trait_item","","",449],[11,"visit_trait_ref","","",449],[11,"visit_ty_param_bound","","",449],[11,"visit_poly_trait_ref","","",449],[11,"visit_struct_def","","",449],[11,"visit_struct_field","","",449],[11,"visit_variant","","",449],[11,"visit_opt_lifetime_ref","","",449],[11,"visit_lifetime_bound","","",449],[11,"visit_lifetime_ref","","",449],[11,"visit_lifetime_def","","",449],[11,"visit_explicit_self","","",449],[11,"visit_mac","","",449],[11,"visit_path","","",449],[11,"visit_qpath","","",449],[11,"visit_path_segment","","",449],[11,"visit_path_parameters","","",449],[11,"visit_assoc_type_binding","","",449],[11,"visit_attribute","","",449],[11,"visit_expr","","",450],[11,"visit_name","","",450],[11,"visit_ident","","",450],[11,"visit_mod","","",450],[11,"visit_foreign_item","","",450],[11,"visit_item","","",450],[11,"visit_local","","",450],[11,"visit_block","","",450],[11,"visit_stmt","","",450],[11,"visit_arm","","",450],[11,"visit_pat","","",450],[11,"visit_decl","","",450],[11,"visit_expr","","",450],[11,"visit_expr_post","","",450],[11,"visit_ty","","",450],[11,"visit_generics","","",450],[11,"visit_fn","","",450],[11,"visit_ty_method","","",450],[11,"visit_trait_item","","",450],[11,"visit_trait_ref","","",450],[11,"visit_ty_param_bound","","",450],[11,"visit_poly_trait_ref","","",450],[11,"visit_struct_def","","",450],[11,"visit_struct_field","","",450],[11,"visit_variant","","",450],[11,"visit_opt_lifetime_ref","","",450],[11,"visit_lifetime_bound","","",450],[11,"visit_lifetime_ref","","",450],[11,"visit_lifetime_def","","",450],[11,"visit_explicit_self","","",450],[11,"visit_mac","","",450],[11,"visit_path","","",450],[11,"visit_qpath","","",450],[11,"visit_path_segment","","",450],[11,"visit_path_parameters","","",450],[11,"visit_assoc_type_binding","","",450],[11,"visit_attribute","","",450],[11,"repr","core::option","",54],[11,"repr","syntax::ptr","",52],[11,"repr","core::result","",238],[11,"repr","alloc::rc","",53],[11,"repr","alloc::boxed","",362],[11,"repr","syntax::owned_slice","",56],[11,"repr","collections::vec","",50],[11,"user_string","","",50],[11,"repr","rustc::middle::def","",131],[11,"user_string","rustc::middle::ty","",343],[11,"repr","","",61],[11,"repr","","",71],[11,"repr","","",334],[11,"repr","","",316],[11,"repr","rustc::middle::subst","",67],[11,"repr","","",51],[11,"repr","rustc::middle::ty","",356],[11,"repr","rustc::middle::subst","",280],[11,"repr","collections::enum_set","",363],[11,"repr","rustc::middle::ty","",66],[11,"repr","","",65],[11,"repr","","",451],[11,"repr","syntax::ast","",90],[11,"repr","","",259],[11,"repr","","",104],[11,"user_string","","",104],[11,"repr","","",94],[11,"repr","","",452],[11,"repr","","",69],[11,"repr","syntax::codemap","",453],[11,"repr","syntax::ast","",260],[11,"repr","rustc::middle::ty","",134],[11,"repr","","",72],[11,"user_string","","",72],[11,"repr","","",132],[11,"repr","rustc::middle::region","",133],[11,"repr","syntax::ast","",129],[11,"repr","rustc::middle::ty","",355],[11,"repr","","",352],[11,"repr","","",353],[11,"repr","","",318],[11,"repr","","",319],[11,"repr","","",92],[11,"repr","syntax::ast","",108],[11,"user_string","","",108],[11,"repr","","",107],[11,"repr","","",83],[11,"repr","","",99],[11,"repr","rustc::middle::ty","",337],[11,"repr","","",195],[11,"repr","","",85],[11,"repr","","",327],[11,"repr","","",139],[11,"repr","","",325],[11,"repr","","",326],[11,"repr","","",64],[11,"user_string","","",64],[11,"repr","syntax::codemap","",103],[11,"user_string","alloc::rc","",53],[11,"user_string","rustc::middle::ty","",66],[11,"repr","","",63],[11,"user_string","collections::enum_set","",363],[11,"user_string","rustc::middle::ty","",55],[11,"user_string","","",65],[11,"user_string","syntax::ast","",107],[11,"repr","syntax::abi","",454],[11,"user_string","","",454],[11,"repr","rustc::middle::ty","",341],[11,"repr","syntax::ast","",110],[11,"repr","rustc::middle::ty","",342],[11,"repr","","",137],[11,"repr","","",138],[11,"repr","","",227],[11,"repr","","",229],[11,"repr","","",348],[11,"repr","","",347],[11,"repr","","",228],[11,"repr","syntax::ast","",455],[11,"repr","","",456],[11,"repr","","",230],[11,"repr","rustc::middle::ty","",361],[11,"user_string","","",339],[11,"repr","","",339],[11,"repr","","",55],[11,"repr","std::collections::hash::map","",457],[11,"repr","rustc::middle::ty","",77],[11,"user_string","","",77],[11,"repr","","",76],[11,"user_string","","",76],[11,"repr","","",75],[11,"user_string","","",75],[11,"user_string","","",78],[11,"repr","","",79],[11,"user_string","","",79],[11,"user_string","","",74],[11,"default","rustc::util::nodemap","",458],[6,"Output","rustdoc::core",""],[11,"reset","rustc::util::nodemap","",458],[11,"finish","","",458],[11,"write","","",458],[11,"new","rustc::util::snapshot_vec","",459],[11,"record","","",459],[11,"push","","",459],[11,"get","","",459],[11,"get_mut","","Returns a mutable pointer into the vec; whatever changes you make here cannot be undone\nautomatically, so you should be sure call `record()` with some sort of suitable undo\naction.",459],[11,"set","","Updates the element at the given index. The old value will saved (and perhaps restored) if\na snapshot is active.",459],[11,"start_snapshot","","",459],[11,"actions_since_snapshot","","",459],[11,"rollback_to","","",459],[11,"commit","","Commits all changes since the last snapshot. Of course, they\ncan still be undone if there is a snapshot further out.",459],[11,"input","rustc_back::sha2","",460],[11,"reset","","",460],[11,"zero_until","","",460],[11,"next","","",460],[11,"full_buffer","","",460],[11,"position","","",460],[11,"remaining","","",460],[11,"size","","",460],[11,"new","","Construct a new instance of a SHA-256 digest.",461],[11,"input","","",461],[11,"result","","",461],[11,"reset","","",461],[11,"output_bits","","",461],[11,"input_str","","",461],[11,"result_bytes","","",461],[11,"result_str","","",461],[11,"open","rustc_llvm::archive_ro","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",462],[11,"read","","Reads a file in the archive",462],[11,"drop","","",462],[11,"describe","rustc_llvm::diagnostic","",463],[11,"unpack","","",464],[11,"eq","rustc_llvm","",465],[11,"ne","","",465],[11,"ne","","",465],[11,"fmt","","",466],[11,"hash","","",467],[11,"cmp","","",467],[11,"partial_cmp","","",467],[11,"lt","","",467],[11,"le","","",467],[11,"gt","","",467],[11,"ge","","",467],[11,"lt","","",467],[11,"le","","",467],[11,"gt","","",467],[11,"ge","","",467],[11,"clone","","",467],[11,"clone_from","","",467],[11,"assert_receiver_is_total_eq","","",467],[11,"eq","","",467],[11,"ne","","",467],[11,"ne","","",467],[11,"empty","","Returns an empty set of flags.",467],[11,"all","","Returns the set containing all flags.",467],[11,"bits","","Returns the raw value of the flags currently stored.",467],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",467],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",467],[11,"is_empty","","Returns `true` if no flags are currently stored.",467],[11,"is_all","","Returns `true` if all flags are currently set.",467],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",467],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",467],[11,"insert","","Inserts the specified flags in-place.",467],[11,"remove","","Removes the specified flags in-place.",467],[11,"toggle","","Toggles the specified flags in-place.",467],[6,"Output","rustdoc::core",""],[11,"bitor","rustc_llvm","Returns the union of the two sets of flags.",467],[6,"Output","rustdoc::core",""],[11,"bitxor","rustc_llvm","Returns the left flags, but with all the right flags toggled.",467],[6,"Output","rustdoc::core",""],[11,"bitand","rustc_llvm","Returns the intersection between the two sets of flags.",467],[6,"Output","rustdoc::core",""],[11,"sub","rustc_llvm","Returns the set difference of the two sets of flags.",467],[6,"Output","rustdoc::core",""],[11,"not","rustc_llvm","Returns the complement of this set of flags.",467],[11,"apply_llfn","","",467],[11,"apply_callsite","","",467],[11,"apply_llfn","","",468],[11,"apply_callsite","","",468],[11,"apply_llfn","","",469],[11,"apply_callsite","","",469],[11,"new","","",470],[11,"arg","","",470],[11,"ret","","",470],[11,"apply_llfn","","",470],[11,"apply_callsite","","",470],[11,"fmt","","",471],[11,"eq","","",471],[11,"ne","","",471],[11,"ne","","",471],[11,"clone","","",472],[11,"clone_from","","",472],[11,"eq","","",472],[11,"ne","","",472],[11,"ne","","",472],[11,"eq","","",473],[11,"ne","","",473],[11,"ne","","",473],[11,"drop","","",474],[11,"new","","",475],[11,"drop","","",475],[11,"drop","","",476],[4,"Input","rustdoc::core",""],[13,"File","","Load source from file",120],[13,"Str","","The string is the source",120],[3,"SearchPaths","",""],[3,"DocContext","",""],[12,"krate","","",477],[12,"maybe_typed","","",477],[12,"input","","",477],[12,"external_paths","","",477],[12,"external_traits","","",477],[12,"external_typarams","","",477],[12,"inlined","","",477],[12,"populated_crate_impls","","",477],[3,"CrateAnalysis","",""],[12,"exported_items","","",478],[12,"public_items","","",478],[12,"external_paths","","",478],[12,"external_traits","","",478],[12,"external_typarams","","",478],[12,"inlined","","",478],[4,"MaybeTyped","","Are we generating documentation (`Typed`) or tests (`NotTyped`)?"],[13,"Typed","","",479],[13,"NotTyped","","",479],[5,"run_core","",""],[6,"ExternalPaths","",""],[6,"Externs","",""],[11,"sess","","",477],[11,"tcx_opt","","",477],[11,"tcx","","",477],[0,"doctree","rustdoc","This module is used to store stuff from Rust's AST in a more convenient\nmanner (and with prettier names) before cleaning."],[3,"Module","rustdoc::doctree",""],[12,"name","","",480],[12,"attrs","","",480],[12,"where_outer","","",480],[12,"where_inner","","",480],[12,"extern_crates","","",480],[12,"imports","","",480],[12,"structs","","",480],[12,"enums","","",480],[12,"fns","","",480],[12,"mods","","",480],[12,"id","","",480],[12,"typedefs","","",480],[12,"statics","","",480],[12,"constants","","",480],[12,"traits","","",480],[12,"vis","","",480],[12,"stab","","",480],[12,"impls","","",480],[12,"foreigns","","",480],[12,"macros","","",480],[12,"is_crate","","",480],[3,"Struct","",""],[12,"vis","","",481],[12,"stab","","",481],[12,"id","","",481],[12,"struct_type","","",481],[12,"name","","",481],[12,"generics","","",481],[12,"attrs","","",481],[12,"fields","","",481],[12,"whence","","",481],[3,"Enum","",""],[12,"vis","","",482],[12,"stab","","",482],[12,"variants","","",482],[12,"generics","","",482],[12,"attrs","","",482],[12,"id","","",482],[12,"whence","","",482],[12,"name","","",482],[3,"Variant","",""],[12,"name","","",483],[12,"attrs","","",483],[12,"kind","","",483],[12,"id","","",483],[12,"vis","","",483],[12,"stab","","",483],[12,"whence","","",483],[3,"Function","",""],[12,"decl","","",484],[12,"attrs","","",484],[12,"id","","",484],[12,"name","","",484],[12,"vis","","",484],[12,"stab","","",484],[12,"unsafety","","",484],[12,"whence","","",484],[12,"generics","","",484],[3,"Typedef","",""],[12,"ty","","",485],[12,"gen","","",485],[12,"name","","",485],[12,"id","","",485],[12,"attrs","","",485],[12,"whence","","",485],[12,"vis","","",485],[12,"stab","","",485],[3,"Static","",""],[12,"type_","","",486],[12,"mutability","","",486],[12,"expr","","",486],[12,"name","","",486],[12,"attrs","","",486],[12,"vis","","",486],[12,"stab","","",486],[12,"id","","",486],[12,"whence","","",486],[3,"Constant","",""],[12,"type_","","",487],[12,"expr","","",487],[12,"name","","",487],[12,"attrs","","",487],[12,"vis","","",487],[12,"stab","","",487],[12,"id","","",487],[12,"whence","","",487],[3,"Trait","",""],[12,"unsafety","","",488],[12,"name","","",488],[12,"items","","",488],[12,"generics","","",488],[12,"bounds","","",488],[12,"attrs","","",488],[12,"id","","",488],[12,"whence","","",488],[12,"vis","","",488],[12,"stab","","",488],[3,"Impl","",""],[12,"unsafety","","",489],[12,"polarity","","",489],[12,"generics","","",489],[12,"trait_","","",489],[12,"for_","","",489],[12,"items","","",489],[12,"attrs","","",489],[12,"whence","","",489],[12,"vis","","",489],[12,"stab","","",489],[12,"id","","",489],[3,"Macro","",""],[12,"name","","",490],[12,"id","","",490],[12,"attrs","","",490],[12,"whence","","",490],[12,"stab","","",490],[3,"ExternCrate","",""],[12,"name","","",491],[12,"path","","",491],[12,"vis","","",491],[12,"attrs","","",491],[12,"whence","","",491],[3,"Import","",""],[12,"id","","",492],[12,"vis","","",492],[12,"attrs","","",492],[12,"node","","",492],[12,"whence","","",492],[4,"StructType","",""],[13,"Plain","","A normal struct",493],[13,"Tuple","","A tuple struct",493],[13,"Newtype","","A newtype struct (tuple struct with one element)",493],[13,"Unit","","A unit struct",493],[4,"TypeBound","",""],[13,"RegionBound","","",494],[13,"TraitBound","","",494],[5,"struct_type_from_def","",""],[11,"new","","",480],[11,"decode","","",493],[11,"encode","","",493],[11,"clone","","",493],[11,"fmt","","",493],[11,"fmt","","",486],[0,"fold","rustdoc",""],[8,"DocFolder","rustdoc::fold",""],[11,"fold_item","","",495],[11,"fold_item_recur","","don't override!",495],[11,"fold_mod","","",495],[11,"fold_crate","","",495],[0,"html","rustdoc",""],[0,"highlight","rustdoc::html","Basic html highlighting functionality"],[5,"highlight","rustdoc::html::highlight","Highlights some source code, returning the HTML output."],[0,"escape","rustdoc::html","HTML Escaping"],[3,"Escape","rustdoc::html::escape","Wrapper struct which will emit the HTML-escaped version of the contained\nstring when passed to a format string."],[11,"fmt","","",496],[0,"item_type","rustdoc::html","Item types."],[4,"ItemType","rustdoc::html::item_type","Item type. Corresponds to `clean::ItemEnum` variants."],[13,"Module","","",497],[13,"ExternCrate","","",497],[13,"Import","","",497],[13,"Struct","","",497],[13,"Enum","","",497],[13,"Function","","",497],[13,"Typedef","","",497],[13,"Static","","",497],[13,"Trait","","",497],[13,"Impl","","",497],[13,"TyMethod","","",497],[13,"Method","","",497],[13,"StructField","","",497],[13,"Variant","","",497],[13,"Macro","","",497],[13,"Primitive","","",497],[13,"AssociatedType","","",497],[13,"Constant","","",497],[11,"clone","","",497],[11,"eq","","",497],[11,"ne","","",497],[11,"from_item","","",497],[11,"from_type_kind","","",497],[11,"to_static_str","","",497],[11,"fmt","","",497],[0,"format","rustdoc::html","HTML formatting module"],[3,"VisSpace","rustdoc::html::format","Helper to render an optional visibility with a space after it (if the\nvisibility is preset)"],[3,"UnsafetySpace","","Similarly to VisSpace, this structure is used to render a function style with a\nspace after it."],[3,"Method","","Wrapper struct for properly emitting a method declaration."],[3,"MutableSpace","","Similar to VisSpace, but used for mutability"],[3,"RawMutableSpace","","Similar to VisSpace, but used for mutability"],[3,"Stability","","Wrapper struct for properly emitting the stability level."],[3,"ConciseStability","","Wrapper struct for emitting the stability level concisely."],[3,"WhereClause","","Wrapper struct for emitting a where clause from Generics."],[3,"TyParamBounds","","Wrapper struct for emitting type parameter bounds."],[3,"CommaSep","","Wrapper struct for emitting a comma-separated list of items"],[11,"get","","",498],[11,"get","","",499],[11,"fmt","","",500],[11,"fmt","","",501],[11,"fmt","rustdoc::clean","",6],[11,"fmt","rustdoc::html::format","",502],[11,"fmt","rustdoc::clean","",68],[11,"fmt","","",14],[11,"fmt","","",34],[11,"fmt","","",45],[11,"fmt","","",21],[11,"fmt","","",20],[11,"fmt","","",40],[11,"fmt","","",11],[11,"fmt","","",37],[11,"fmt","","",10],[11,"fmt","rustdoc::html::format","",503],[11,"fmt","","",498],[11,"fmt","","",499],[11,"fmt","rustdoc::clean","",48],[11,"fmt","","",27],[11,"fmt","","",28],[11,"fmt","","",31],[11,"fmt","rustdoc::html::format","",504],[11,"fmt","","",505],[11,"fmt","","",506],[11,"fmt","","",507],[0,"layout","rustdoc::html",""],[3,"Layout","rustdoc::html::layout",""],[12,"logo","","",508],[12,"favicon","","",508],[12,"external_html","","",508],[12,"krate","","",508],[12,"playground_url","","",508],[3,"Page","",""],[12,"title","","",509],[12,"ty","","",509],[12,"root_path","","",509],[12,"description","","",509],[12,"keywords","","",509],[5,"render","",""],[5,"redirect","",""],[11,"clone","","",508],[0,"markdown","rustdoc::html","Markdown formatting for rustdoc"],[3,"Markdown","rustdoc::html::markdown","A unit struct which has the `fmt::String` trait implemented. When\nformatted, this struct will emit the HTML corresponding to the rendered\nversion of the contained markdown string."],[3,"MarkdownWithToc","","A unit struct like `Markdown`, that renders the markdown with a\ntable of contents."],[5,"render","",""],[5,"find_testable_code","",""],[5,"reset_headers","","By default this markdown renderer generates anchors for each header in the\nrendered document. The anchor name is the contents of the header separated\nby hyphens, and a task-local map is used to disambiguate among duplicate\nheaders (numbers are appended)."],[5,"plain_summary_line","",""],[7,"PLAYGROUND_KRATE","",""],[11,"fmt","","",510],[11,"fmt","","",511],[0,"render","rustdoc::html","Rustdoc's HTML Rendering module"],[3,"NameDoc","rustdoc::html::render","A pair of name and its optional document."],[3,"Context","","Major driving force in all rustdoc rendering. This contains information\nabout where in the tree-like hierarchy rendering is occurring and controls\nhow the current page is being rendered."],[12,"current","","Current hierarchy of components leading down to what's currently being\nrendered",512],[12,"root_path","","String representation of how to get back to the root path of the 'doc/'\nfolder in terms of a relative URL.",512],[12,"src_root","","The path to the crate root source minus the file name.\nUsed for simplifying paths to the highlighted source code files.",512],[12,"dst","","The current destination folder of where HTML artifacts should be placed.\nThis changes as the context descends into the module hierarchy.",512],[12,"layout","","This describes the layout of each page, and is not modified after\ncreation of the context (contains info like the favicon and added html).",512],[12,"sidebar","","This map is a list of what should be displayed on the sidebar of the\ncurrent page. The key is the section header (traits, modules,\nfunctions), and the value is the list of containers belonging to this\nheader. This map will change depending on the surrounding context of the\npage.",512],[12,"include_sources","","This flag indicates whether [src] links should be generated or not. If\nthe source files are present in the html rendering, then this will be\n`true`.",512],[12,"render_redirect_pages","","A flag, which when turned off, will render pages which redirect to the\nreal location of an item. This is used to allow external links to\npublicly reused items to redirect to the right location.",512],[12,"passes","","All the passes that were run on this crate.",512],[3,"Implementor","","Metadata about an implementor of a trait."],[12,"def_id","","",513],[12,"generics","","",513],[12,"trait_","","",513],[12,"for_","","",513],[12,"stability","","",513],[3,"Impl","","Metadata about implementations for a type."],[12,"impl_","","",514],[12,"dox","","",514],[12,"stability","","",514],[3,"Cache","","This cache is used to store information about the `clean::Crate` being\nrendered in order to provide more useful documentation. This contains\ninformation like all implementors of a trait, all traits a type implements,\ndocumentation for all known traits, etc."],[12,"typarams","","Mapping of typaram ids to the name of the type parameter. This is used\nwhen pretty-printing a type (so pretty printing doesn't have to\npainfully maintain a context like this)",515],[12,"impls","","Maps a type id to all known implementations for that type. This is only\nrecognized for intra-crate `ResolvedPath` types, and is used to print\nout extra documentation on the page of an enum/struct.",515],[12,"paths","","Maintains a mapping of local crate node ids to the fully qualified name\nand \"short type description\" of that node. This is used when generating\nURLs when a type is being linked to. External paths are not located in\nthis map because the `External` type itself has all the information\nnecessary.",515],[12,"external_paths","","Similar to `paths`, but only holds external paths. This is only used for\ngenerating explicit hyperlinks to other crates.",515],[12,"traits","","This map contains information about all known traits of this crate.\nImplementations of a crate should inherit the documentation of the\nparent trait if no extra documentation is specified, and default methods\nshould show up in documentation about trait implementations.",515],[12,"implementors","","When rendering traits, it's often useful to be able to list all\nimplementors of the trait, and this mapping is exactly, that: a mapping\nof trait ids to the list of known implementors of the trait",515],[12,"extern_locations","","Cache of where external crate documentation can be found.",515],[12,"primitive_locations","","Cache of where documentation for primitives can be found.",515],[12,"inlined","","Set of definitions which have been inlined from external crates.",515],[4,"ExternalLocation","","Indicates where an external crate can be found."],[13,"Remote","","Remote URL root of the external crate",516],[13,"Local","","This external crate can be found in the local doc/ folder",516],[13,"Unknown","","The external crate could not be found.",516],[5,"run","","Generates the documentation for `crate` into the directory `dst`"],[5,"cache","",""],[7,"CURRENT_LOCATION_KEY","",""],[11,"partial_cmp","","",517],[11,"lt","","",517],[11,"le","","",517],[11,"gt","","",517],[11,"ge","","",517],[11,"eq","","",517],[11,"ne","","",517],[11,"cmp","","",517],[11,"clone","","",517],[11,"clone","","",512],[11,"clone","","",514],[11,"default","","",515],[11,"fold_item","","",515],[0,"toc","rustdoc::html","Table-of-contents creation."],[3,"Toc","rustdoc::html::toc","A (recursive) table of contents"],[3,"TocEntry","",""],[3,"TocBuilder","","Progressive construction of a table of contents."],[11,"eq","","",518],[11,"ne","","",518],[11,"eq","","",519],[11,"ne","","",519],[11,"eq","","",520],[11,"ne","","",520],[11,"new","","",520],[11,"into_toc","","Convert into a true `Toc` struct.",520],[11,"push","","Push a level `level` heading into the appropriate place in the\nhierarchy, returning a string containing the section number in\n`<num>.<num>.<num>` format.",520],[11,"fmt","","",518],[11,"fmt","","",518],[0,"markdown","rustdoc",""],[5,"render","rustdoc::markdown","Render `input` (e.g. \"foo.md\") into an HTML file in `output`\n(e.g. output = \"bar\" => \"bar/foo.html\")."],[5,"test","","Run any tests/code examples in the markdown file `input`."],[0,"passes","rustdoc",""],[5,"strip_hidden","rustdoc::passes","Strip items marked `#[doc(hidden)]`"],[5,"strip_private","","Strip private items from the point of view of a crate or externally from a\ncrate, specified by the `xcrate` flag."],[5,"unindent_comments","",""],[5,"collapse_docs","",""],[5,"unindent","",""],[0,"plugins","rustdoc",""],[3,"PluginManager","rustdoc::plugins","Manages loading and running of plugins"],[12,"prefix","","The directory plugins will be loaded from",521],[6,"PluginJson","",""],[6,"PluginResult","",""],[6,"PluginCallback","",""],[11,"new","","Create a new plugin manager",521],[11,"load_plugin","","Load a plugin with the given name.",521],[11,"add_plugin","","Load a normal Rust function as a plugin.",521],[11,"run_plugins","","Run all the loaded plugins over the crate, returning their results",521],[0,"stability_summary","rustdoc","This module crawls a `clean::Crate` and produces a summarization of the\nstability levels within the crate. The summary contains the module\nhierarchy, with item counts for every stability level per module. A parent\nmodule's count includes its children's."],[3,"Counts","rustdoc::stability_summary","The counts for each stability level."],[12,"unstable","","",522],[12,"stable","","",522],[12,"unmarked","","No stability level, inherited or otherwise.",522],[3,"ModuleSummary","","A summarized module, which includes total counts and summarized children\nmodules."],[12,"name","","",523],[12,"counts","","",523],[12,"submodules","","",523],[5,"build","","Summarizes the stability levels in a crate."],[11,"eq","","",522],[11,"ne","","",522],[11,"decode","","",522],[11,"encode","","",522],[6,"Output","",""],[11,"add","","",522],[11,"total","","",522],[11,"eq","","",523],[11,"ne","","",523],[11,"decode","","",523],[11,"encode","","",523],[11,"partial_cmp","","",523],[11,"cmp","","",523],[0,"visit_ast","rustdoc","Rust AST Visitor. Extracts useful information and massages it into a form\nusable for clean"],[3,"RustdocVisitor","rustdoc::visit_ast",""],[12,"module","","",524],[12,"attrs","","",524],[12,"cx","","",524],[12,"analysis","","",524],[11,"new","","",524],[11,"visit","","",524],[11,"visit_struct_def","","",524],[11,"visit_enum_def","","",524],[11,"visit_fn","","",524],[11,"visit_mod_contents","","",524],[11,"visit_item","","",524],[0,"test","rustdoc",""],[3,"Collector","rustdoc::test",""],[12,"tests","","",525],[5,"run","",""],[5,"maketest","",""],[11,"new","","",525],[11,"add_test","","",525],[11,"register_header","","",525],[11,"fold_item","","",525],[7,"ANALYSISKEY","rustdoc",""],[11,"clean","rustdoc::visit_ast","",524],[11,"clean","rustdoc::doctree","",480],[11,"clean","","",484],[11,"clean","","",488],[11,"clean","","",481],[11,"clean","","",482],[11,"clean","","",483],[11,"clean","","",485],[11,"clean","","",486],[11,"clean","","",487],[11,"clean","","",489],[11,"clean","","",491],[11,"clean","","",492],[11,"clean","","",490],[11,"fmt","rustdoc::stability_summary","",523]],"paths":[[3,"ExternalHtml"],[3,"Crate"],[3,"ExternalCrate"],[3,"Item"],[3,"Module"],[3,"TyParam"],[3,"Generics"],[3,"Method"],[3,"TyMethod"],[3,"Function"],[3,"FnDecl"],[3,"Arguments"],[3,"Argument"],[3,"Trait"],[3,"PolyTrait"],[3,"Struct"],[3,"VariantStruct"],[3,"Enum"],[3,"Variant"],[3,"Span"],[3,"Path"],[3,"PathSegment"],[3,"Typedef"],[3,"BareFunctionDecl"],[3,"Static"],[3,"Constant"],[3,"Impl"],[3,"ImportSource"],[3,"ViewListIdent"],[3,"Macro"],[3,"Stability"],[3,"TypeBinding"],[4,"ItemEnum"],[4,"Attribute"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"SelfTy"],[4,"FunctionRetTy"],[4,"TraitMethod"],[4,"ImplMethod"],[4,"Type"],[4,"PrimitiveType"],[4,"TypeKind"],[4,"StructField"],[4,"VariantKind"],[4,"PathParameters"],[4,"Mutability"],[4,"ImplPolarity"],[4,"Import"],[8,"Clean"],[3,"Vec"],[3,"VecPerParamSpace"],[3,"P"],[3,"Rc"],[4,"Option"],[3,"Binder"],[3,"OwnedSlice"],[3,"crate_metadata"],[6,"MetaItem"],[6,"Attribute"],[3,"TyParam"],[3,"TypeParameterDef"],[4,"TyParamBound"],[3,"ExistentialBounds"],[4,"BuiltinBound"],[3,"TraitRef"],[3,"ParamBounds"],[3,"Substs"],[3,"Lifetime"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"RegionParameterDef"],[4,"Region"],[4,"WherePredicate"],[4,"Predicate"],[3,"TraitPredicate"],[3,"EquatePredicate"],[3,"OutlivesPredicate"],[3,"ProjectionPredicate"],[3,"ProjectionTy"],[3,"Generics"],[3,"Method"],[3,"TypeMethod"],[4,"ExplicitSelf_"],[3,"FnDecl"],[4,"FnOutput"],[3,"Arg"],[4,"FunctionRetTy"],[3,"TraitRef"],[3,"PolyTraitRef"],[4,"TraitItem"],[4,"ImplItem"],[3,"Method"],[4,"ImplOrTraitItem"],[3,"Ty"],[6,"Ty"],[3,"QPath"],[6,"StructField"],[3,"field_ty"],[4,"Visibility"],[3,"StructDef"],[3,"VariantInfo"],[4,"VariantKind"],[3,"Span"],[3,"Path"],[4,"PathParameters"],[3,"PathSegment"],[3,"Ident"],[3,"Name"],[3,"BareFnTy"],[4,"Mutability"],[4,"ImplPolarity"],[6,"PathListItem"],[3,"ForeignMod"],[3,"ForeignItem"],[3,"Stability"],[3,"AssociatedType"],[3,"AssociatedType"],[3,"Typedef"],[3,"TypeBinding"],[4,"Input"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"Svh"],[4,"SawAbiComponent"],[4,"SawExprComponent"],[4,"SawStmtComponent"],[3,"StrictVersionHashVisitor"],[3,"DecodeContext"],[3,"DefId"],[3,"NestedItemsDropper"],[4,"Def"],[3,"FreeRegion"],[4,"CodeExtent"],[4,"BoundRegion"],[3,"Decoder"],[3,"Freevar"],[3,"UpvarBorrow"],[4,"UpvarCapture"],[4,"MethodOrigin"],[3,"EncodeContext"],[3,"Encoder"],[3,"SideTableEncodingIdVisitor"],[3,"Doc"],[3,"LabelledCFG"],[3,"CFG"],[3,"CheckCrateVisitor"],[3,"CheckCrateVisitor"],[3,"CheckItemRecursionVisitor"],[4,"Context"],[3,"CheckLoopVisitor"],[3,"Matrix"],[4,"Constructor"],[4,"Usefulness"],[3,"MatchCheckCtxt"],[3,"StaticInliner"],[3,"MutationChecker"],[3,"AtBindingPatternVisitor"],[3,"RvalueContext"],[3,"RvalueContextDelegate"],[4,"Mode"],[3,"CheckStaticVisitor"],[3,"GlobalVisitor"],[3,"GlobalChecker"],[3,"ConstEvalVisitor"],[4,"const_val"],[4,"EntryOrExit"],[3,"DataFlowContext"],[3,"Union"],[3,"Subtract"],[3,"MarkSymbolVisitor"],[3,"LifeSeeder"],[3,"DeadVisitor"],[4,"MethodProvenance"],[4,"TyParamProvenance"],[4,"TraitItemKind"],[4,"UnsafeContext"],[3,"EffectCheckVisitor"],[3,"EntryContext"],[4,"LoanCause"],[4,"ConsumeMode"],[4,"MoveReason"],[4,"MatchMode"],[4,"TrackMatchMode"],[4,"MutateMode"],[3,"ExprUseVisitor"],[4,"SimplifiedType"],[3,"Edge"],[3,"NodeIndex"],[3,"EdgeIndex"],[3,"Direction"],[3,"Graph"],[3,"DepthFirstTraversal"],[3,"IntrinsicCheckingVisitor"],[3,"TransmuteRestriction"],[3,"FnSig"],[3,"CombineFields"],[3,"Generalizer"],[3,"Equate"],[3,"InferCtxt"],[3,"Glb"],[3,"Lub"],[4,"Node"],[3,"ConstraintGraph"],[4,"Constraint"],[4,"GenericKind"],[3,"TwoRegions"],[4,"UndoLogEntry"],[4,"CombineMapType"],[4,"RegionResolutionError"],[3,"SameRegions"],[3,"RegionSnapshot"],[3,"RegionVarBindings"],[4,"Classification"],[4,"Verify"],[4,"VarValue"],[3,"RegionAndOrigin"],[3,"OpportunisticTypeResolver"],[3,"FullTypeResolver"],[3,"TypeFreshener"],[3,"Sub"],[4,"RelationDir"],[3,"TypeVariableTable"],[3,"Delegate"],[4,"VarValue"],[3,"UnificationTable"],[3,"Delegate"],[3,"IntVid"],[4,"IntVarValue"],[3,"FloatVid"],[4,"FloatTy"],[4,"TypeOrigin"],[4,"ValuePairs"],[3,"TypeTrace"],[4,"SubregionOrigin"],[4,"LateBoundRegionConversionTime"],[4,"RegionVariableOrigin"],[4,"fixup_err"],[4,"Result"],[4,"LangItem"],[3,"LanguageItems"],[3,"LanguageItemCollector"],[3,"Variable"],[3,"LiveNode"],[4,"LiveNodeKind"],[3,"IrMaps"],[3,"LocalInfo"],[4,"VarKind"],[3,"Liveness"],[3,"Users"],[4,"categorization"],[3,"Upvar"],[4,"PointerKind"],[4,"InteriorKind"],[4,"FieldName"],[4,"ElementKind"],[4,"MutabilityCategory"],[4,"Note"],[3,"cmt_"],[3,"Expr"],[3,"Pat"],[3,"MemCategorizationContext"],[4,"ClosureKind"],[4,"LastPrivate"],[4,"PrivateDep"],[4,"ImportUse"],[3,"ReachableContext"],[3,"BlockRemainder"],[4,"InnermostDeclaringBlock"],[3,"DeclaringStatementContext"],[4,"InnermostEnclosingExpr"],[3,"Context"],[3,"RegionMaps"],[3,"RegionResolutionVisitor"],[4,"DefRegion"],[3,"LifetimeContext"],[4,"ScopeChain"],[3,"Annotator"],[3,"Index"],[3,"Checker"],[4,"RegionSubsts"],[4,"ParamSpace"],[3,"EnumeratedItems"],[3,"SubstFolder"],[3,"RegionObligation"],[3,"FulfillmentContext"],[3,"MismatchedProjectionTypes"],[3,"AssociatedTypeNormalizer"],[3,"Normalized"],[4,"ProjectionTyError"],[4,"ProjectionTyCandidate"],[4,"MethodViolationCode"],[4,"ObjectSafetyViolation"],[3,"SelectionCache"],[4,"MethodMatchedData"],[4,"SelectionCandidate"],[4,"EvaluationResult"],[3,"SelectionContext"],[3,"TraitObligationStack"],[4,"MethodMatchResult"],[3,"Elaborator"],[3,"Supertraits"],[3,"VtableImplData"],[3,"VtableObjectData"],[3,"Obligation"],[4,"Vtable"],[3,"VtableBuiltinData"],[4,"SelectionError"],[3,"FulfillmentError"],[4,"FulfillmentErrorCode"],[3,"ObligationCause"],[4,"ObligationCauseCode"],[3,"DerivedObligationCause"],[3,"field"],[4,"ImplOrTraitItemContainer"],[4,"ImplOrTraitItemId"],[3,"mt"],[3,"creader_cache_key"],[3,"ItemVariances"],[4,"Variance"],[4,"AutoAdjustment"],[4,"UnsizeKind"],[3,"AutoDerefRef"],[4,"AutoRef"],[3,"param_index"],[3,"MethodParam"],[3,"MethodObject"],[3,"MethodCallee"],[3,"MethodCall"],[4,"ExprAdjustment"],[4,"vtable_origin"],[3,"CtxtArenas"],[3,"TypeFlags"],[3,"ctxt"],[3,"TyS"],[3,"InternedTy"],[4,"sty"],[3,"BareFnTy"],[3,"ClosureTy"],[3,"ParamTy"],[3,"DebruijnIndex"],[3,"UpvarId"],[4,"BorrowKind"],[3,"TyTrait"],[4,"terr_vstore_kind"],[3,"expected_found"],[4,"type_err"],[3,"TyVid"],[3,"RegionVid"],[4,"InferTy"],[4,"UnconstrainedNumeric"],[4,"InferRegion"],[3,"Generics"],[3,"GenericBounds"],[3,"ParameterEnvironment"],[3,"TypeScheme"],[3,"ItemSubsts"],[3,"TypeContents"],[4,"Representability"],[4,"DtorKind"],[3,"ClosureUpvar"],[4,"ExplicitSelfCategory"],[3,"Box"],[3,"EnumSet"],[3,"BottomUpFolder"],[3,"RegionFolder"],[3,"RegionEraser"],[3,"TypeWalker"],[3,"Context"],[4,"astencode_tag"],[3,"LinkMeta"],[4,"DefIdSource"],[3,"entry"],[3,"EncodeVisitor"],[3,"ImplVisitor"],[4,"Family"],[4,"DefLike"],[3,"CrateDep"],[3,"CrateReader"],[4,"PMDSource"],[3,"PluginMetadata"],[4,"LinkagePreference"],[4,"NativeLibraryKind"],[3,"CrateSource"],[3,"CStore"],[4,"MetadataBlob"],[3,"Context"],[3,"ArchiveMetadata"],[3,"FileSearch"],[4,"OptLevel"],[4,"DebugInfoLevel"],[4,"OutputType"],[3,"Options"],[4,"UnstableFeatures"],[4,"PrintRequest"],[3,"OutputFilenames"],[4,"EntryFnType"],[4,"CrateType"],[4,"Passes"],[3,"CodegenOptions"],[3,"DebuggingOptions"],[4,"OptionStability"],[3,"RustcOptGroup"],[3,"SearchPaths"],[4,"PathKind"],[3,"Iter"],[3,"Session"],[3,"Registry"],[3,"PluginLoader"],[3,"RegistrarFinder"],[3,"Lint"],[3,"LintId"],[4,"Level"],[4,"LintSource"],[3,"WhileTrue"],[3,"UnusedCasts"],[3,"TypeLimits"],[3,"ImproperCTypesVisitor"],[3,"ImproperCTypes"],[3,"BoxPointers"],[3,"RawPtrDeriveVisitor"],[3,"RawPointerDerive"],[3,"UnusedAttributes"],[3,"PathStatements"],[3,"UnusedResults"],[3,"NonCamelCaseTypes"],[4,"MethodContext"],[3,"NonSnakeCase"],[3,"NonUpperCaseGlobals"],[3,"UnusedParens"],[3,"UnusedImportBraces"],[3,"NonShorthandFieldPatterns"],[3,"UnusedUnsafe"],[3,"UnsafeBlocks"],[3,"UnusedMut"],[3,"UnusedAllocation"],[3,"MissingDoc"],[3,"MissingCopyImplementations"],[3,"MissingDebugImplementations"],[3,"Stability"],[3,"UnconditionalRecursion"],[3,"HardwiredLints"],[3,"PrivateNoMangleFns"],[3,"UnstableFeatures"],[3,"LintStore"],[3,"Context"],[3,"GatherNodeLevels"],[3,"ErrorReported"],[3,"Indenter"],[3,"LoopQueryVisitor"],[3,"BlockQueryVisitor"],[3,"TraitDef"],[3,"Item"],[3,"Spanned"],[4,"Abi"],[4,"IntTy"],[4,"UintTy"],[3,"HashMap"],[3,"FnvHasher"],[3,"SnapshotVec"],[3,"FixedBuffer64"],[3,"Sha256"],[3,"ArchiveRO"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"CallConv"],[4,"DiagnosticSeverity"],[3,"Attribute"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[3,"AttrBuilder"],[4,"TypeKind"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[3,"DocContext"],[3,"CrateAnalysis"],[4,"MaybeTyped"],[3,"Module"],[3,"Struct"],[3,"Enum"],[3,"Variant"],[3,"Function"],[3,"Typedef"],[3,"Static"],[3,"Constant"],[3,"Trait"],[3,"Impl"],[3,"Macro"],[3,"ExternCrate"],[3,"Import"],[4,"StructType"],[4,"TypeBound"],[8,"DocFolder"],[3,"Escape"],[4,"ItemType"],[3,"VisSpace"],[3,"UnsafetySpace"],[3,"CommaSep"],[3,"TyParamBounds"],[3,"WhereClause"],[3,"Method"],[3,"MutableSpace"],[3,"RawMutableSpace"],[3,"Stability"],[3,"ConciseStability"],[3,"Layout"],[3,"Page"],[3,"Markdown"],[3,"MarkdownWithToc"],[3,"Context"],[3,"Implementor"],[3,"Impl"],[3,"Cache"],[4,"ExternalLocation"],[3,"NameDoc"],[3,"Toc"],[3,"TocEntry"],[3,"TocBuilder"],[3,"PluginManager"],[3,"Counts"],[3,"ModuleSummary"],[3,"RustdocVisitor"],[3,"Collector"]]};

searchIndex['rustc_llvm'] = {"items":[[0,"","rustc_llvm",""],[3,"Attribute","",""],[3,"AttrBuilder","",""],[3,"TargetData","",""],[12,"lltd","","",0],[3,"ObjectFile","",""],[12,"llof","","",1],[3,"SectionIter","",""],[12,"llsi","","",2],[4,"CallConv","",""],[13,"CCallConv","","",3],[13,"FastCallConv","","",3],[13,"ColdCallConv","","",3],[13,"X86StdcallCallConv","","",3],[13,"X86FastcallCallConv","","",3],[13,"X86_64_Win64","","",3],[4,"Visibility","",""],[13,"LLVMDefaultVisibility","","",4],[13,"HiddenVisibility","","",4],[13,"ProtectedVisibility","","",4],[4,"Linkage","",""],[13,"ExternalLinkage","","",5],[13,"AvailableExternallyLinkage","","",5],[13,"LinkOnceAnyLinkage","","",5],[13,"LinkOnceODRLinkage","","",5],[13,"WeakAnyLinkage","","",5],[13,"WeakODRLinkage","","",5],[13,"AppendingLinkage","","",5],[13,"InternalLinkage","","",5],[13,"PrivateLinkage","","",5],[13,"ExternalWeakLinkage","","",5],[13,"CommonLinkage","","",5],[4,"DiagnosticSeverity","",""],[13,"Error","","",6],[13,"Warning","","",6],[13,"Remark","","",6],[13,"Note","","",6],[4,"OtherAttribute","",""],[13,"SanitizeAddressAttribute","","",7],[13,"MinSizeAttribute","","",7],[13,"NoDuplicateAttribute","","",7],[13,"StackProtectStrongAttribute","","",7],[13,"SanitizeThreadAttribute","","",7],[13,"SanitizeMemoryAttribute","","",7],[13,"NoBuiltinAttribute","","",7],[13,"ReturnedAttribute","","",7],[13,"ColdAttribute","","",7],[13,"BuiltinAttribute","","",7],[13,"OptimizeNoneAttribute","","",7],[13,"InAllocaAttribute","","",7],[13,"NonNullAttribute","","",7],[4,"SpecialAttribute","",""],[13,"DereferenceableAttribute","","",8],[4,"AttributeSet","",""],[13,"ReturnIndex","","",9],[13,"FunctionIndex","","",9],[4,"IntPredicate","",""],[13,"IntEQ","","",10],[13,"IntNE","","",10],[13,"IntUGT","","",10],[13,"IntUGE","","",10],[13,"IntULT","","",10],[13,"IntULE","","",10],[13,"IntSGT","","",10],[13,"IntSGE","","",10],[13,"IntSLT","","",10],[13,"IntSLE","","",10],[4,"RealPredicate","",""],[13,"RealPredicateFalse","","",11],[13,"RealOEQ","","",11],[13,"RealOGT","","",11],[13,"RealOGE","","",11],[13,"RealOLT","","",11],[13,"RealOLE","","",11],[13,"RealONE","","",11],[13,"RealORD","","",11],[13,"RealUNO","","",11],[13,"RealUEQ","","",11],[13,"RealUGT","","",11],[13,"RealUGE","","",11],[13,"RealULT","","",11],[13,"RealULE","","",11],[13,"RealUNE","","",11],[13,"RealPredicateTrue","","",11],[4,"TypeKind","",""],[13,"Void","","",12],[13,"Half","","",12],[13,"Float","","",12],[13,"Double","","",12],[13,"X86_FP80","","",12],[13,"FP128","","",12],[13,"PPC_FP128","","",12],[13,"Label","","",12],[13,"Integer","","",12],[13,"Function","","",12],[13,"Struct","","",12],[13,"Array","","",12],[13,"Pointer","","",12],[13,"Vector","","",12],[13,"Metadata","","",12],[13,"X86_MMX","","",12],[4,"AtomicBinOp","",""],[13,"AtomicXchg","","",13],[13,"AtomicAdd","","",13],[13,"AtomicSub","","",13],[13,"AtomicAnd","","",13],[13,"AtomicNand","","",13],[13,"AtomicOr","","",13],[13,"AtomicXor","","",13],[13,"AtomicMax","","",13],[13,"AtomicMin","","",13],[13,"AtomicUMax","","",13],[13,"AtomicUMin","","",13],[4,"AtomicOrdering","",""],[13,"NotAtomic","","",14],[13,"Unordered","","",14],[13,"Monotonic","","",14],[13,"Acquire","","",14],[13,"Release","","",14],[13,"AcquireRelease","","",14],[13,"SequentiallyConsistent","","",14],[4,"FileType","",""],[13,"AssemblyFileType","","",15],[13,"ObjectFileType","","",15],[4,"MetadataType","",""],[13,"MD_dbg","","",16],[13,"MD_tbaa","","",16],[13,"MD_prof","","",16],[13,"MD_fpmath","","",16],[13,"MD_range","","",16],[13,"MD_tbaa_struct","","",16],[4,"AsmDialect","",""],[13,"AD_ATT","","",17],[13,"AD_Intel","","",17],[4,"CodeGenOptLevel","",""],[13,"CodeGenLevelNone","","",18],[13,"CodeGenLevelLess","","",18],[13,"CodeGenLevelDefault","","",18],[13,"CodeGenLevelAggressive","","",18],[4,"RelocMode","",""],[13,"RelocDefault","","",19],[13,"RelocStatic","","",19],[13,"RelocPIC","","",19],[13,"RelocDynamicNoPic","","",19],[4,"CodeGenModel","",""],[13,"CodeModelDefault","","",20],[13,"CodeModelJITDefault","","",20],[13,"CodeModelSmall","","",20],[13,"CodeModelKernel","","",20],[13,"CodeModelMedium","","",20],[13,"CodeModelLarge","","",20],[4,"DiagnosticKind","",""],[13,"DK_InlineAsm","","",21],[13,"DK_StackSize","","",21],[13,"DK_DebugMetadataVersion","","",21],[13,"DK_SampleProfile","","",21],[13,"DK_OptimizationRemark","","",21],[13,"DK_OptimizationRemarkMissed","","",21],[13,"DK_OptimizationRemarkAnalysis","","",21],[13,"DK_OptimizationFailure","","",21],[4,"Module_opaque","",""],[4,"Context_opaque","",""],[4,"Type_opaque","",""],[4,"Value_opaque","",""],[4,"Metadata_opaque","",""],[4,"BasicBlock_opaque","",""],[4,"Builder_opaque","",""],[4,"ExecutionEngine_opaque","",""],[4,"RustJITMemoryManager_opaque","",""],[4,"MemoryBuffer_opaque","",""],[4,"PassManager_opaque","",""],[4,"PassManagerBuilder_opaque","",""],[4,"Use_opaque","",""],[4,"TargetData_opaque","",""],[4,"ObjectFile_opaque","",""],[4,"SectionIterator_opaque","",""],[4,"Pass_opaque","",""],[4,"TargetMachine_opaque","",""],[4,"Archive_opaque","",""],[4,"Twine_opaque","",""],[4,"DiagnosticInfo_opaque","",""],[4,"DebugLoc_opaque","",""],[4,"SMDiagnostic_opaque","",""],[4,"RustString_opaque","",""],[5,"SetInstructionCallConv","",""],[5,"SetFunctionCallConv","",""],[5,"SetLinkage","",""],[5,"SetUnnamedAddr","",""],[5,"set_thread_local","",""],[5,"ConstICmp","",""],[5,"ConstFCmp","",""],[5,"SetFunctionAttribute","",""],[5,"mk_target_data","",""],[5,"mk_section_iter","",""],[5,"get_param","","Safe wrapper around `LLVMGetParam`, because segfaults are no fun."],[5,"rust_llvm_string_write_impl","","Appending to a Rust string -- used by raw_rust_string_ostream."],[5,"build_string","",""],[5,"twine_to_string","",""],[5,"debug_loc_to_string","",""],[5,"static_link_hack_this_sucks","",""],[5,"LLVMContextCreate","",""],[5,"LLVMContextDispose","",""],[5,"LLVMGetMDKindIDInContext","",""],[5,"LLVMModuleCreateWithNameInContext","",""],[5,"LLVMGetModuleContext","",""],[5,"LLVMDisposeModule","",""],[5,"LLVMGetDataLayout","","Data layout. See Module::getDataLayout."],[5,"LLVMSetDataLayout","",""],[5,"LLVMGetTarget","","Target triple. See Module::getTargetTriple."],[5,"LLVMSetTarget","",""],[5,"LLVMDumpModule","","See Module::dump."],[5,"LLVMSetModuleInlineAsm","","See Module::setModuleInlineAsm."],[5,"LLVMGetTypeKind","","See llvm::LLVMTypeKind::getTypeID."],[5,"LLVMGetTypeContext","","See llvm::LLVMType::getContext."],[5,"LLVMInt1TypeInContext","",""],[5,"LLVMInt8TypeInContext","",""],[5,"LLVMInt16TypeInContext","",""],[5,"LLVMInt32TypeInContext","",""],[5,"LLVMInt64TypeInContext","",""],[5,"LLVMIntTypeInContext","",""],[5,"LLVMGetIntTypeWidth","",""],[5,"LLVMFloatTypeInContext","",""],[5,"LLVMDoubleTypeInContext","",""],[5,"LLVMX86FP80TypeInContext","",""],[5,"LLVMFP128TypeInContext","",""],[5,"LLVMPPCFP128TypeInContext","",""],[5,"LLVMFunctionType","",""],[5,"LLVMIsFunctionVarArg","",""],[5,"LLVMGetReturnType","",""],[5,"LLVMCountParamTypes","",""],[5,"LLVMGetParamTypes","",""],[5,"LLVMStructTypeInContext","",""],[5,"LLVMCountStructElementTypes","",""],[5,"LLVMGetStructElementTypes","",""],[5,"LLVMIsPackedStruct","",""],[5,"LLVMRustArrayType","",""],[5,"LLVMPointerType","",""],[5,"LLVMVectorType","",""],[5,"LLVMGetElementType","",""],[5,"LLVMGetArrayLength","",""],[5,"LLVMGetPointerAddressSpace","",""],[5,"LLVMGetPointerToGlobal","",""],[5,"LLVMGetVectorSize","",""],[5,"LLVMVoidTypeInContext","",""],[5,"LLVMLabelTypeInContext","",""],[5,"LLVMMetadataTypeInContext","",""],[5,"LLVMTypeOf","",""],[5,"LLVMGetValueName","",""],[5,"LLVMSetValueName","",""],[5,"LLVMDumpValue","",""],[5,"LLVMReplaceAllUsesWith","",""],[5,"LLVMHasMetadata","",""],[5,"LLVMGetMetadata","",""],[5,"LLVMSetMetadata","",""],[5,"LLVMGetFirstUse","",""],[5,"LLVMGetNextUse","",""],[5,"LLVMGetUser","",""],[5,"LLVMGetUsedValue","",""],[5,"LLVMGetNumOperands","",""],[5,"LLVMGetOperand","",""],[5,"LLVMSetOperand","",""],[5,"LLVMConstNull","",""],[5,"LLVMConstAllOnes","",""],[5,"LLVMConstICmp","",""],[5,"LLVMConstFCmp","",""],[5,"LLVMGetUndef","",""],[5,"LLVMIsConstant","",""],[5,"LLVMIsNull","",""],[5,"LLVMIsUndef","",""],[5,"LLVMConstPointerNull","",""],[5,"LLVMMDStringInContext","",""],[5,"LLVMMDNodeInContext","",""],[5,"LLVMAddNamedMetadataOperand","",""],[5,"LLVMConstInt","",""],[5,"LLVMConstIntOfString","",""],[5,"LLVMConstIntOfStringAndSize","",""],[5,"LLVMConstReal","",""],[5,"LLVMConstRealOfString","",""],[5,"LLVMConstRealOfStringAndSize","",""],[5,"LLVMConstIntGetZExtValue","",""],[5,"LLVMConstIntGetSExtValue","",""],[5,"LLVMConstStringInContext","",""],[5,"LLVMConstStructInContext","",""],[5,"LLVMConstArray","",""],[5,"LLVMConstVector","",""],[5,"LLVMAlignOf","",""],[5,"LLVMSizeOf","",""],[5,"LLVMConstNeg","",""],[5,"LLVMConstNSWNeg","",""],[5,"LLVMConstNUWNeg","",""],[5,"LLVMConstFNeg","",""],[5,"LLVMConstNot","",""],[5,"LLVMConstAdd","",""],[5,"LLVMConstNSWAdd","",""],[5,"LLVMConstNUWAdd","",""],[5,"LLVMConstFAdd","",""],[5,"LLVMConstSub","",""],[5,"LLVMConstNSWSub","",""],[5,"LLVMConstNUWSub","",""],[5,"LLVMConstFSub","",""],[5,"LLVMConstMul","",""],[5,"LLVMConstNSWMul","",""],[5,"LLVMConstNUWMul","",""],[5,"LLVMConstFMul","",""],[5,"LLVMConstUDiv","",""],[5,"LLVMConstSDiv","",""],[5,"LLVMConstExactSDiv","",""],[5,"LLVMConstFDiv","",""],[5,"LLVMConstURem","",""],[5,"LLVMConstSRem","",""],[5,"LLVMConstFRem","",""],[5,"LLVMConstAnd","",""],[5,"LLVMConstOr","",""],[5,"LLVMConstXor","",""],[5,"LLVMConstShl","",""],[5,"LLVMConstLShr","",""],[5,"LLVMConstAShr","",""],[5,"LLVMConstGEP","",""],[5,"LLVMConstInBoundsGEP","",""],[5,"LLVMConstTrunc","",""],[5,"LLVMConstSExt","",""],[5,"LLVMConstZExt","",""],[5,"LLVMConstFPTrunc","",""],[5,"LLVMConstFPExt","",""],[5,"LLVMConstUIToFP","",""],[5,"LLVMConstSIToFP","",""],[5,"LLVMConstFPToUI","",""],[5,"LLVMConstFPToSI","",""],[5,"LLVMConstPtrToInt","",""],[5,"LLVMConstIntToPtr","",""],[5,"LLVMConstBitCast","",""],[5,"LLVMConstZExtOrBitCast","",""],[5,"LLVMConstSExtOrBitCast","",""],[5,"LLVMConstTruncOrBitCast","",""],[5,"LLVMConstPointerCast","",""],[5,"LLVMConstIntCast","",""],[5,"LLVMConstFPCast","",""],[5,"LLVMConstSelect","",""],[5,"LLVMConstExtractElement","",""],[5,"LLVMConstInsertElement","",""],[5,"LLVMConstShuffleVector","",""],[5,"LLVMConstExtractValue","",""],[5,"LLVMConstInsertValue","",""],[5,"LLVMConstInlineAsm","",""],[5,"LLVMBlockAddress","",""],[5,"LLVMGetGlobalParent","",""],[5,"LLVMIsDeclaration","",""],[5,"LLVMGetLinkage","",""],[5,"LLVMSetLinkage","",""],[5,"LLVMGetSection","",""],[5,"LLVMSetSection","",""],[5,"LLVMGetVisibility","",""],[5,"LLVMSetVisibility","",""],[5,"LLVMGetAlignment","",""],[5,"LLVMSetAlignment","",""],[5,"LLVMAddGlobal","",""],[5,"LLVMAddGlobalInAddressSpace","",""],[5,"LLVMGetNamedGlobal","",""],[5,"LLVMGetFirstGlobal","",""],[5,"LLVMGetLastGlobal","",""],[5,"LLVMGetNextGlobal","",""],[5,"LLVMGetPreviousGlobal","",""],[5,"LLVMDeleteGlobal","",""],[5,"LLVMGetInitializer","",""],[5,"LLVMSetInitializer","",""],[5,"LLVMIsThreadLocal","",""],[5,"LLVMSetThreadLocal","",""],[5,"LLVMIsGlobalConstant","",""],[5,"LLVMSetGlobalConstant","",""],[5,"LLVMAddAlias","",""],[5,"LLVMAddFunction","",""],[5,"LLVMGetNamedFunction","",""],[5,"LLVMGetFirstFunction","",""],[5,"LLVMGetLastFunction","",""],[5,"LLVMGetNextFunction","",""],[5,"LLVMGetPreviousFunction","",""],[5,"LLVMDeleteFunction","",""],[5,"LLVMGetOrInsertFunction","",""],[5,"LLVMGetIntrinsicID","",""],[5,"LLVMGetFunctionCallConv","",""],[5,"LLVMSetFunctionCallConv","",""],[5,"LLVMGetGC","",""],[5,"LLVMSetGC","",""],[5,"LLVMAddDereferenceableAttr","",""],[5,"LLVMAddFunctionAttribute","",""],[5,"LLVMAddFunctionAttrString","",""],[5,"LLVMRemoveFunctionAttrString","",""],[5,"LLVMGetFunctionAttr","",""],[5,"LLVMCountParams","",""],[5,"LLVMGetParams","",""],[5,"LLVMGetParam","",""],[5,"LLVMGetParamParent","",""],[5,"LLVMGetFirstParam","",""],[5,"LLVMGetLastParam","",""],[5,"LLVMGetNextParam","",""],[5,"LLVMGetPreviousParam","",""],[5,"LLVMAddAttribute","",""],[5,"LLVMRemoveAttribute","",""],[5,"LLVMGetAttribute","",""],[5,"LLVMSetParamAlignment","",""],[5,"LLVMBasicBlockAsValue","",""],[5,"LLVMValueIsBasicBlock","",""],[5,"LLVMValueAsBasicBlock","",""],[5,"LLVMGetBasicBlockParent","",""],[5,"LLVMCountBasicBlocks","",""],[5,"LLVMGetBasicBlocks","",""],[5,"LLVMGetFirstBasicBlock","",""],[5,"LLVMGetLastBasicBlock","",""],[5,"LLVMGetNextBasicBlock","",""],[5,"LLVMGetPreviousBasicBlock","",""],[5,"LLVMGetEntryBasicBlock","",""],[5,"LLVMAppendBasicBlockInContext","",""],[5,"LLVMInsertBasicBlockInContext","",""],[5,"LLVMDeleteBasicBlock","",""],[5,"LLVMMoveBasicBlockAfter","",""],[5,"LLVMMoveBasicBlockBefore","",""],[5,"LLVMGetInstructionParent","",""],[5,"LLVMGetFirstInstruction","",""],[5,"LLVMGetLastInstruction","",""],[5,"LLVMGetNextInstruction","",""],[5,"LLVMGetPreviousInstruction","",""],[5,"LLVMInstructionEraseFromParent","",""],[5,"LLVMSetInstructionCallConv","",""],[5,"LLVMGetInstructionCallConv","",""],[5,"LLVMAddInstrAttribute","",""],[5,"LLVMRemoveInstrAttribute","",""],[5,"LLVMSetInstrParamAlignment","",""],[5,"LLVMAddCallSiteAttribute","",""],[5,"LLVMAddDereferenceableCallSiteAttr","",""],[5,"LLVMIsTailCall","",""],[5,"LLVMSetTailCall","",""],[5,"LLVMGetVolatile","",""],[5,"LLVMSetVolatile","",""],[5,"LLVMAddIncoming","",""],[5,"LLVMCountIncoming","",""],[5,"LLVMGetIncomingValue","",""],[5,"LLVMGetIncomingBlock","",""],[5,"LLVMCreateBuilderInContext","",""],[5,"LLVMPositionBuilder","",""],[5,"LLVMPositionBuilderBefore","",""],[5,"LLVMPositionBuilderAtEnd","",""],[5,"LLVMGetInsertBlock","",""],[5,"LLVMClearInsertionPosition","",""],[5,"LLVMInsertIntoBuilder","",""],[5,"LLVMInsertIntoBuilderWithName","",""],[5,"LLVMDisposeBuilder","",""],[5,"LLVMRustCreateJITMemoryManager","",""],[5,"LLVMBuildExecutionEngine","",""],[5,"LLVMDisposeExecutionEngine","",""],[5,"LLVMExecutionEngineFinalizeObject","",""],[5,"LLVMRustLoadDynamicLibrary","",""],[5,"LLVMExecutionEngineAddModule","",""],[5,"LLVMExecutionEngineRemoveModule","",""],[5,"LLVMSetCurrentDebugLocation","",""],[5,"LLVMGetCurrentDebugLocation","",""],[5,"LLVMSetInstDebugLocation","",""],[5,"LLVMBuildRetVoid","",""],[5,"LLVMBuildRet","",""],[5,"LLVMBuildAggregateRet","",""],[5,"LLVMBuildBr","",""],[5,"LLVMBuildCondBr","",""],[5,"LLVMBuildSwitch","",""],[5,"LLVMBuildIndirectBr","",""],[5,"LLVMBuildInvoke","",""],[5,"LLVMBuildLandingPad","",""],[5,"LLVMBuildResume","",""],[5,"LLVMBuildUnreachable","",""],[5,"LLVMAddCase","",""],[5,"LLVMAddDestination","",""],[5,"LLVMAddClause","",""],[5,"LLVMSetCleanup","",""],[5,"LLVMBuildAdd","",""],[5,"LLVMBuildNSWAdd","",""],[5,"LLVMBuildNUWAdd","",""],[5,"LLVMBuildFAdd","",""],[5,"LLVMBuildSub","",""],[5,"LLVMBuildNSWSub","",""],[5,"LLVMBuildNUWSub","",""],[5,"LLVMBuildFSub","",""],[5,"LLVMBuildMul","",""],[5,"LLVMBuildNSWMul","",""],[5,"LLVMBuildNUWMul","",""],[5,"LLVMBuildFMul","",""],[5,"LLVMBuildUDiv","",""],[5,"LLVMBuildSDiv","",""],[5,"LLVMBuildExactSDiv","",""],[5,"LLVMBuildFDiv","",""],[5,"LLVMBuildURem","",""],[5,"LLVMBuildSRem","",""],[5,"LLVMBuildFRem","",""],[5,"LLVMBuildShl","",""],[5,"LLVMBuildLShr","",""],[5,"LLVMBuildAShr","",""],[5,"LLVMBuildAnd","",""],[5,"LLVMBuildOr","",""],[5,"LLVMBuildXor","",""],[5,"LLVMBuildBinOp","",""],[5,"LLVMBuildNeg","",""],[5,"LLVMBuildNSWNeg","",""],[5,"LLVMBuildNUWNeg","",""],[5,"LLVMBuildFNeg","",""],[5,"LLVMBuildNot","",""],[5,"LLVMBuildMalloc","",""],[5,"LLVMBuildArrayMalloc","",""],[5,"LLVMBuildAlloca","",""],[5,"LLVMBuildArrayAlloca","",""],[5,"LLVMBuildFree","",""],[5,"LLVMBuildLoad","",""],[5,"LLVMBuildStore","",""],[5,"LLVMBuildGEP","",""],[5,"LLVMBuildInBoundsGEP","",""],[5,"LLVMBuildStructGEP","",""],[5,"LLVMBuildGlobalString","",""],[5,"LLVMBuildGlobalStringPtr","",""],[5,"LLVMBuildTrunc","",""],[5,"LLVMBuildZExt","",""],[5,"LLVMBuildSExt","",""],[5,"LLVMBuildFPToUI","",""],[5,"LLVMBuildFPToSI","",""],[5,"LLVMBuildUIToFP","",""],[5,"LLVMBuildSIToFP","",""],[5,"LLVMBuildFPTrunc","",""],[5,"LLVMBuildFPExt","",""],[5,"LLVMBuildPtrToInt","",""],[5,"LLVMBuildIntToPtr","",""],[5,"LLVMBuildBitCast","",""],[5,"LLVMBuildZExtOrBitCast","",""],[5,"LLVMBuildSExtOrBitCast","",""],[5,"LLVMBuildTruncOrBitCast","",""],[5,"LLVMBuildCast","",""],[5,"LLVMBuildPointerCast","",""],[5,"LLVMBuildIntCast","",""],[5,"LLVMBuildFPCast","",""],[5,"LLVMBuildICmp","",""],[5,"LLVMBuildFCmp","",""],[5,"LLVMBuildPhi","",""],[5,"LLVMBuildCall","",""],[5,"LLVMBuildSelect","",""],[5,"LLVMBuildVAArg","",""],[5,"LLVMBuildExtractElement","",""],[5,"LLVMBuildInsertElement","",""],[5,"LLVMBuildShuffleVector","",""],[5,"LLVMBuildExtractValue","",""],[5,"LLVMBuildInsertValue","",""],[5,"LLVMBuildIsNull","",""],[5,"LLVMBuildIsNotNull","",""],[5,"LLVMBuildPtrDiff","",""],[5,"LLVMBuildAtomicLoad","",""],[5,"LLVMBuildAtomicStore","",""],[5,"LLVMBuildAtomicCmpXchg","",""],[5,"LLVMBuildAtomicRMW","",""],[5,"LLVMBuildAtomicFence","",""],[5,"LLVMIsATerminatorInst","",""],[5,"LLVMIsAStoreInst","",""],[5,"LLVMWriteBitcodeToFile","","Writes a module to the specified path. Returns 0 on success."],[5,"LLVMCreateTargetData","","Creates target data from a target layout string."],[5,"LLVMAddTargetData","","Adds the target data to the given pass manager. The pass manager\nreferences the target data only weakly."],[5,"LLVMStoreSizeOfType","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMSizeOfTypeInBits","","Number of bytes clobbered when doing a Store to *T."],[5,"LLVMABISizeOfType","","Distance between successive elements in an array of T. Includes ABI padding."],[5,"LLVMPreferredAlignmentOfType","","Returns the preferred alignment of a type."],[5,"LLVMABIAlignmentOfType","","Returns the minimum alignment of a type."],[5,"LLVMOffsetOfElement","","Computes the byte offset of the indexed struct element for a\ntarget."],[5,"LLVMCallFrameAlignmentOfType","","Returns the minimum alignment of a type when part of a call frame."],[5,"LLVMDisposeTargetData","","Disposes target data."],[5,"LLVMCreatePassManager","","Creates a pass manager."],[5,"LLVMCreateFunctionPassManagerForModule","","Creates a function-by-function pass manager"],[5,"LLVMDisposePassManager","","Disposes a pass manager."],[5,"LLVMRunPassManager","","Runs a pass manager on a module."],[5,"LLVMRunFunctionPassManager","","Runs the function passes on the provided function."],[5,"LLVMInitializeFunctionPassManager","","Initializes all the function passes scheduled in the manager"],[5,"LLVMFinalizeFunctionPassManager","","Finalizes all the function passes scheduled in the manager"],[5,"LLVMInitializePasses","",""],[5,"LLVMAddVerifierPass","","Adds a verification pass."],[5,"LLVMAddGlobalOptimizerPass","",""],[5,"LLVMAddIPSCCPPass","",""],[5,"LLVMAddDeadArgEliminationPass","",""],[5,"LLVMAddInstructionCombiningPass","",""],[5,"LLVMAddCFGSimplificationPass","",""],[5,"LLVMAddFunctionInliningPass","",""],[5,"LLVMAddFunctionAttrsPass","",""],[5,"LLVMAddScalarReplAggregatesPass","",""],[5,"LLVMAddScalarReplAggregatesPassSSA","",""],[5,"LLVMAddJumpThreadingPass","",""],[5,"LLVMAddConstantPropagationPass","",""],[5,"LLVMAddReassociatePass","",""],[5,"LLVMAddLoopRotatePass","",""],[5,"LLVMAddLICMPass","",""],[5,"LLVMAddLoopUnswitchPass","",""],[5,"LLVMAddLoopDeletionPass","",""],[5,"LLVMAddLoopUnrollPass","",""],[5,"LLVMAddGVNPass","",""],[5,"LLVMAddMemCpyOptPass","",""],[5,"LLVMAddSCCPPass","",""],[5,"LLVMAddDeadStoreEliminationPass","",""],[5,"LLVMAddStripDeadPrototypesPass","",""],[5,"LLVMAddConstantMergePass","",""],[5,"LLVMAddArgumentPromotionPass","",""],[5,"LLVMAddTailCallEliminationPass","",""],[5,"LLVMAddIndVarSimplifyPass","",""],[5,"LLVMAddAggressiveDCEPass","",""],[5,"LLVMAddGlobalDCEPass","",""],[5,"LLVMAddCorrelatedValuePropagationPass","",""],[5,"LLVMAddPruneEHPass","",""],[5,"LLVMAddSimplifyLibCallsPass","",""],[5,"LLVMAddLoopIdiomPass","",""],[5,"LLVMAddEarlyCSEPass","",""],[5,"LLVMAddTypeBasedAliasAnalysisPass","",""],[5,"LLVMAddBasicAliasAnalysisPass","",""],[5,"LLVMPassManagerBuilderCreate","",""],[5,"LLVMPassManagerBuilderDispose","",""],[5,"LLVMPassManagerBuilderSetOptLevel","",""],[5,"LLVMPassManagerBuilderSetSizeLevel","",""],[5,"LLVMPassManagerBuilderSetDisableUnitAtATime","",""],[5,"LLVMPassManagerBuilderSetDisableUnrollLoops","",""],[5,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls","",""],[5,"LLVMPassManagerBuilderUseInlinerWithThreshold","",""],[5,"LLVMPassManagerBuilderPopulateModulePassManager","",""],[5,"LLVMPassManagerBuilderPopulateFunctionPassManager","",""],[5,"LLVMPassManagerBuilderPopulateLTOPassManager","",""],[5,"LLVMDisposeMemoryBuffer","","Destroys a memory buffer."],[5,"LLVMCreateObjectFile","","Opens an object file."],[5,"LLVMDisposeObjectFile","","Closes an object file."],[5,"LLVMGetSections","","Enumerates the sections in an object file."],[5,"LLVMDisposeSectionIterator","","Destroys a section iterator."],[5,"LLVMIsSectionIteratorAtEnd","","Returns true if the section iterator is at the end of the section\nlist:"],[5,"LLVMMoveToNextSection","","Moves the section iterator to point to the next section."],[5,"LLVMGetSectionSize","","Returns the current section size."],[5,"LLVMGetSectionContents","","Returns the current section contents as a string buffer."],[5,"LLVMRustCreateMemoryBufferWithContentsOfFile","","Reads the given file and returns it as a memory buffer. Use\nLLVMDisposeMemoryBuffer() to get rid of it."],[5,"LLVMCreateMemoryBufferWithMemoryRange","","Borrows the contents of the memory buffer (doesn't copy it)"],[5,"LLVMCreateMemoryBufferWithMemoryRangeCopy","",""],[5,"LLVMIsMultithreaded","",""],[5,"LLVMStartMultithreaded","",""],[5,"LLVMRustGetLastError","","Returns a string describing the last error caused by an LLVMRust* call."],[5,"LLVMRustPrintPassTimings","","Print the pass timings since static dtors aren't picking them up."],[5,"LLVMStructCreateNamed","",""],[5,"LLVMStructSetBody","",""],[5,"LLVMConstNamedStruct","",""],[5,"LLVMSetDebug","","Enables LLVM debug output."],[5,"LLVMInlineAsm","","Prepares inline assembly."],[7,"LLVMRustDebugMetadataVersion","",""],[5,"LLVMRustAddModuleFlag","",""],[5,"LLVMDIBuilderCreate","",""],[5,"LLVMDIBuilderDispose","",""],[5,"LLVMDIBuilderFinalize","",""],[5,"LLVMDIBuilderCreateCompileUnit","",""],[5,"LLVMDIBuilderCreateFile","",""],[5,"LLVMDIBuilderCreateSubroutineType","",""],[5,"LLVMDIBuilderCreateFunction","",""],[5,"LLVMDIBuilderCreateBasicType","",""],[5,"LLVMDIBuilderCreatePointerType","",""],[5,"LLVMDIBuilderCreateStructType","",""],[5,"LLVMDIBuilderCreateMemberType","",""],[5,"LLVMDIBuilderCreateLexicalBlock","",""],[5,"LLVMDIBuilderCreateStaticVariable","",""],[5,"LLVMDIBuilderCreateVariable","",""],[5,"LLVMDIBuilderCreateArrayType","",""],[5,"LLVMDIBuilderCreateVectorType","",""],[5,"LLVMDIBuilderGetOrCreateSubrange","",""],[5,"LLVMDIBuilderGetOrCreateArray","",""],[5,"LLVMDIBuilderInsertDeclareAtEnd","",""],[5,"LLVMDIBuilderInsertDeclareBefore","",""],[5,"LLVMDIBuilderCreateEnumerator","",""],[5,"LLVMDIBuilderCreateEnumerationType","",""],[5,"LLVMDIBuilderCreateUnionType","",""],[5,"LLVMSetUnnamedAddr","",""],[5,"LLVMDIBuilderCreateTemplateTypeParameter","",""],[5,"LLVMDIBuilderCreateOpDeref","",""],[5,"LLVMDIBuilderCreateOpPlus","",""],[5,"LLVMDIBuilderCreateNameSpace","",""],[5,"LLVMDIBuilderCreateDebugLocation","",""],[5,"LLVMDICompositeTypeSetTypeArray","",""],[5,"LLVMWriteTypeToString","",""],[5,"LLVMWriteValueToString","",""],[5,"LLVMIsAArgument","",""],[5,"LLVMIsAAllocaInst","",""],[5,"LLVMInitializeX86TargetInfo","",""],[5,"LLVMInitializeX86Target","",""],[5,"LLVMInitializeX86TargetMC","",""],[5,"LLVMInitializeX86AsmPrinter","",""],[5,"LLVMInitializeX86AsmParser","",""],[5,"LLVMInitializeARMTargetInfo","",""],[5,"LLVMInitializeARMTarget","",""],[5,"LLVMInitializeARMTargetMC","",""],[5,"LLVMInitializeARMAsmPrinter","",""],[5,"LLVMInitializeARMAsmParser","",""],[5,"LLVMInitializeAArch64TargetInfo","",""],[5,"LLVMInitializeAArch64Target","",""],[5,"LLVMInitializeAArch64TargetMC","",""],[5,"LLVMInitializeAArch64AsmPrinter","",""],[5,"LLVMInitializeAArch64AsmParser","",""],[5,"LLVMInitializeMipsTargetInfo","",""],[5,"LLVMInitializeMipsTarget","",""],[5,"LLVMInitializeMipsTargetMC","",""],[5,"LLVMInitializeMipsAsmPrinter","",""],[5,"LLVMInitializeMipsAsmParser","",""],[5,"LLVMInitializePowerPCTargetInfo","",""],[5,"LLVMInitializePowerPCTarget","",""],[5,"LLVMInitializePowerPCTargetMC","",""],[5,"LLVMInitializePowerPCAsmPrinter","",""],[5,"LLVMInitializePowerPCAsmParser","",""],[5,"LLVMRustAddPass","",""],[5,"LLVMRustCreateTargetMachine","",""],[5,"LLVMRustDisposeTargetMachine","",""],[5,"LLVMRustAddAnalysisPasses","",""],[5,"LLVMRustAddBuilderLibraryInfo","",""],[5,"LLVMRustAddLibraryInfo","",""],[5,"LLVMRustRunFunctionPassManager","",""],[5,"LLVMRustWriteOutputFile","",""],[5,"LLVMRustPrintModule","",""],[5,"LLVMRustSetLLVMOptions","",""],[5,"LLVMRustPrintPasses","",""],[5,"LLVMRustSetNormalizedTarget","",""],[5,"LLVMRustAddAlwaysInlinePass","",""],[5,"LLVMRustLinkInExternalBitcode","",""],[5,"LLVMRustRunRestrictionPass","",""],[5,"LLVMRustMarkAllFunctionsNounwind","",""],[5,"LLVMRustOpenArchive","",""],[5,"LLVMRustArchiveReadSection","",""],[5,"LLVMRustDestroyArchive","",""],[5,"LLVMRustSetDLLExportStorageClass","",""],[5,"LLVMVersionMajor","",""],[5,"LLVMVersionMinor","",""],[5,"LLVMRustGetSectionName","",""],[5,"LLVMWriteTwineToString","",""],[5,"LLVMContextSetDiagnosticHandler","",""],[5,"LLVMUnpackOptimizationDiagnostic","",""],[5,"LLVMUnpackInlineAsmDiagnostic","",""],[5,"LLVMWriteDiagnosticInfoToString","",""],[5,"LLVMGetDiagInfoSeverity","",""],[5,"LLVMGetDiagInfoKind","",""],[5,"LLVMWriteDebugLocToString","",""],[5,"LLVMSetInlineAsmDiagnosticHandler","",""],[5,"LLVMWriteSMDiagnosticToString","",""],[0,"archive_ro","","A wrapper around LLVM's archive (.a) code"],[3,"ArchiveRO","rustc_llvm::archive_ro",""],[11,"open","","Opens a static archive for read-only purposes. This is more optimized\nthan the `open` method because it uses LLVM's internal `Archive` class\nrather than shelling out to `ar` for everything.",22],[11,"read","","Reads a file in the archive",22],[11,"drop","","",22],[0,"diagnostic","rustc_llvm","LLVM diagnostic reports."],[3,"OptimizationDiagnostic","rustc_llvm::diagnostic",""],[12,"kind","","",23],[12,"pass_name","","",23],[12,"function","","",23],[12,"debug_loc","","",23],[12,"message","","",23],[3,"InlineAsmDiagnostic","",""],[12,"cookie","","",24],[12,"message","","",24],[12,"instruction","","",24],[4,"OptimizationDiagnosticKind","",""],[13,"OptimizationRemark","","",25],[13,"OptimizationMissed","","",25],[13,"OptimizationAnalysis","","",25],[13,"OptimizationFailure","","",25],[4,"Diagnostic","",""],[13,"Optimization","","",26],[13,"InlineAsm","","",26],[13,"UnknownDiagnostic","","LLVM has other types that we do not wrap here.",26],[11,"describe","","",25],[11,"unpack","","",26],[0,"debuginfo","rustc_llvm",""],[4,"DIBuilder_opaque","rustc_llvm::debuginfo",""],[4,"DIDescriptorFlags","",""],[13,"FlagPrivate","","",27],[13,"FlagProtected","","",27],[13,"FlagFwdDecl","","",27],[13,"FlagAppleBlock","","",27],[13,"FlagBlockByrefStruct","","",27],[13,"FlagVirtual","","",27],[13,"FlagArtificial","","",27],[13,"FlagExplicit","","",27],[13,"FlagPrototyped","","",27],[13,"FlagObjcClassComplete","","",27],[13,"FlagObjectPointer","","",27],[13,"FlagVector","","",27],[13,"FlagStaticMember","","",27],[13,"FlagIndirectVariable","","",27],[13,"FlagLValueReference","","",27],[13,"FlagRValueReference","","",27],[6,"DIBuilderRef","",""],[6,"DIDescriptor","",""],[6,"DIScope","",""],[6,"DILocation","",""],[6,"DIFile","",""],[6,"DILexicalBlock","",""],[6,"DISubprogram","",""],[6,"DINameSpace","",""],[6,"DIType","",""],[6,"DIBasicType","",""],[6,"DIDerivedType","",""],[6,"DICompositeType","",""],[6,"DIVariable","",""],[6,"DIGlobalVariable","",""],[6,"DIArray","",""],[6,"DISubrange","",""],[6,"DIEnumerator","",""],[6,"DITemplateTypeParameter","",""],[6,"Opcode","rustc_llvm",""],[6,"Bool","",""],[6,"ModuleRef","",""],[6,"ContextRef","",""],[6,"TypeRef","",""],[6,"ValueRef","",""],[6,"MetadataRef","",""],[6,"BasicBlockRef","",""],[6,"BuilderRef","",""],[6,"ExecutionEngineRef","",""],[6,"RustJITMemoryManagerRef","",""],[6,"MemoryBufferRef","",""],[6,"PassManagerRef","",""],[6,"PassManagerBuilderRef","",""],[6,"UseRef","",""],[6,"TargetDataRef","",""],[6,"ObjectFileRef","",""],[6,"SectionIteratorRef","",""],[6,"PassRef","",""],[6,"TargetMachineRef","",""],[6,"ArchiveRef","",""],[6,"TwineRef","",""],[6,"DiagnosticInfoRef","",""],[6,"DebugLocRef","",""],[6,"SMDiagnosticRef","",""],[6,"DiagnosticHandler","",""],[6,"InlineAsmDiagHandler","",""],[6,"RustStringRef","",""],[17,"True","",""],[17,"False","",""],[17,"ZExtAttribute","",""],[17,"SExtAttribute","",""],[17,"NoReturnAttribute","",""],[17,"InRegAttribute","",""],[17,"StructRetAttribute","",""],[17,"NoUnwindAttribute","",""],[17,"NoAliasAttribute","",""],[17,"ByValAttribute","",""],[17,"NestAttribute","",""],[17,"ReadNoneAttribute","",""],[17,"ReadOnlyAttribute","",""],[17,"NoInlineAttribute","",""],[17,"AlwaysInlineAttribute","",""],[17,"OptimizeForSizeAttribute","",""],[17,"StackProtectAttribute","",""],[17,"StackProtectReqAttribute","",""],[17,"AlignmentAttribute","",""],[17,"NoCaptureAttribute","",""],[17,"NoRedZoneAttribute","",""],[17,"NoImplicitFloatAttribute","",""],[17,"NakedAttribute","",""],[17,"InlineHintAttribute","",""],[17,"StackAttribute","",""],[17,"ReturnsTwiceAttribute","",""],[17,"UWTableAttribute","",""],[17,"NonLazyBindAttribute","",""],[8,"AttrHelper","",""],[10,"apply_llfn","","",28],[10,"apply_callsite","","",28],[11,"eq","","",3],[11,"ne","","",3],[11,"fmt","","",6],[11,"hash","","",29],[11,"cmp","","",29],[11,"partial_cmp","","",29],[11,"lt","","",29],[11,"le","","",29],[11,"gt","","",29],[11,"ge","","",29],[11,"clone","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"empty","","Returns an empty set of flags.",29],[11,"all","","Returns the set containing all flags.",29],[11,"bits","","Returns the raw value of the flags currently stored.",29],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29],[11,"is_empty","","Returns `true` if no flags are currently stored.",29],[11,"is_all","","Returns `true` if all flags are currently set.",29],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29],[11,"insert","","Inserts the specified flags in-place.",29],[11,"remove","","Removes the specified flags in-place.",29],[11,"toggle","","Toggles the specified flags in-place.",29],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",29],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",29],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",29],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",29],[11,"apply_llfn","","",29],[11,"apply_callsite","","",29],[11,"apply_llfn","","",7],[11,"apply_callsite","","",7],[11,"apply_llfn","","",8],[11,"apply_callsite","","",8],[11,"new","","",30],[11,"arg","","",30],[11,"ret","","",30],[11,"apply_llfn","","",30],[11,"apply_callsite","","",30],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"drop","","",0],[11,"new","","",1],[11,"drop","","",1],[11,"drop","","",2]],"paths":[[3,"TargetData"],[3,"ObjectFile"],[3,"SectionIter"],[4,"CallConv"],[4,"Visibility"],[4,"Linkage"],[4,"DiagnosticSeverity"],[4,"OtherAttribute"],[4,"SpecialAttribute"],[4,"AttributeSet"],[4,"IntPredicate"],[4,"RealPredicate"],[4,"TypeKind"],[4,"AtomicBinOp"],[4,"AtomicOrdering"],[4,"FileType"],[4,"MetadataType"],[4,"AsmDialect"],[4,"CodeGenOptLevel"],[4,"RelocMode"],[4,"CodeGenModel"],[4,"DiagnosticKind"],[3,"ArchiveRO"],[3,"OptimizationDiagnostic"],[3,"InlineAsmDiagnostic"],[4,"OptimizationDiagnosticKind"],[4,"Diagnostic"],[4,"DIDescriptorFlags"],[8,"AttrHelper"],[3,"Attribute"],[3,"AttrBuilder"]]};

searchIndex['rustc_back'] = {"items":[[0,"","rustc_back","Some stuff used by rustc that doesn't have many dependencies"],[0,"abi","",""],[17,"BOX_FIELD_DROP_GLUE","rustc_back::abi",""],[17,"BOX_FIELD_BODY","",""],[17,"FAT_PTR_ADDR","","The first half of a fat pointer.\n- For a closure, this is the code address.\n- For an object or trait instance, this is the address of the box.\n- For a slice, this is the base address."],[17,"FAT_PTR_EXTRA","","The second half of a fat pointer.\n- For a closure, this is the address of the environment.\n- For an object or trait instance, this is the address of the vtable.\n- For a slice, this is the length."],[0,"archive","rustc_back","A helper class for dealing with static archives"],[3,"ArchiveConfig","rustc_back::archive",""],[12,"handler","","",0],[12,"dst","","",0],[12,"lib_search_paths","","",0],[12,"slib_prefix","","",0],[12,"slib_suffix","","",0],[12,"maybe_ar_prog","","",0],[3,"Archive","",""],[3,"ArchiveBuilder","","Helper for adding many files to an archive with a single invocation of\n`ar`."],[5,"find_library","",""],[7,"METADATA_FILENAME","",""],[11,"open","","Opens an existing static archive",1],[11,"remove_file","","Removes a file from this archive",1],[11,"files","","Lists all files in an archive",1],[11,"extend","","Creates an `ArchiveBuilder` for adding files to this archive.",1],[11,"create","","Create a new static archive, ready for adding files.",2],[11,"add_native_library","","Adds all of the contents of a native library to this archive. This will\nsearch in the relevant locations for a library named `name`.",2],[11,"add_rlib","","Adds all of the contents of the rlib at the specified path to this\narchive.",2],[11,"add_file","","Adds an arbitrary file to this archive",2],[11,"update_symbols","","Indicate that the next call to `build` should updates all symbols in\nthe archive (run 'ar s' over it).",2],[11,"build","","Combine the provided files, rlibs, and native libraries into a single\n`Archive`.",2],[0,"arm","rustc_back",""],[5,"get_target_strs","rustc_back::arm",""],[0,"fs","rustc_back",""],[5,"realpath","rustc_back::fs","Returns an absolute path in the filesystem that `path` points to. The\nreturned path does not contain any symlinks in its hierarchy."],[0,"mips","rustc_back",""],[5,"get_target_strs","rustc_back::mips",""],[0,"mipsel","rustc_back",""],[5,"get_target_strs","rustc_back::mipsel",""],[0,"rpath","rustc_back",""],[3,"RPathConfig","rustc_back::rpath",""],[12,"used_crates","","",3],[12,"out_filename","","",3],[12,"is_like_osx","","",3],[12,"has_rpath","","",3],[12,"get_install_prefix_lib_path","","",3],[12,"realpath","","",3],[5,"get_rpath_flags","",""],[0,"sha2","rustc_back","This module implements only the Sha256 function since that is all that is needed for internal\nuse. This implementation is not intended for external use or for any use where security is\nimportant."],[3,"Sha256","rustc_back::sha2","The SHA-256 hash algorithm"],[8,"Digest","","The Digest trait specifies an interface common to digest functions, such as SHA-1 and the SHA-2\nfamily of digest functions."],[10,"input","","Provide message data.",4],[10,"result","","Retrieve the digest result. This method may be called multiple times.",4],[10,"reset","","Reset the digest. This method must be called after result() and before supplying more\ndata.",4],[10,"output_bits","","Get the output size in bits.",4],[11,"input_str","","Convenience function that feeds a string into a digest.",4],[11,"result_bytes","","Convenience function that retrieves the result of a digest as a\nnewly allocated vec of bytes.",4],[11,"result_str","","Convenience function that retrieves the result of a digest as a\nString in hexadecimal format.",4],[11,"new","","Construct a new instance of a SHA-256 digest.",5],[11,"input","","",5],[11,"result","","",5],[11,"reset","","",5],[11,"output_bits","","",5],[0,"svh","rustc_back","Calculation and management of a Strict Version Hash for crates"],[3,"Svh","rustc_back::svh",""],[11,"fmt","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"new","","",6],[11,"as_str","","",6],[11,"calculate","","",6],[11,"fmt","","",6],[0,"target_strs","rustc_back",""],[3,"t","rustc_back::target_strs",""],[12,"module_asm","","",7],[12,"data_layout","","",7],[12,"target_triple","","",7],[12,"cc_args","","",7],[0,"x86","rustc_back",""],[5,"get_target_strs","rustc_back::x86",""],[0,"x86_64","rustc_back",""],[5,"get_target_strs","rustc_back::x86_64",""],[0,"target","rustc_back","[Flexible target specification.](https://github.com/rust-lang/rfcs/pull/131)"],[3,"Target","rustc_back::target","Everything `rustc` knows about how to compile for a specific target."],[12,"data_layout","","[Data layout](http://llvm.org/docs/LangRef.html#data-layout) to pass to LLVM.",8],[12,"llvm_target","","Target triple to pass to LLVM.",8],[12,"target_endian","","String to use as the `target_endian` `cfg` variable.",8],[12,"target_pointer_width","","String to use as the `target_pointer_width` `cfg` variable.",8],[12,"target_os","","OS name to use for conditional compilation.",8],[12,"arch","","Architecture to use for ABI considerations. Valid options: \"x86\", \"x86_64\", \"arm\",\n\"aarch64\", \"mips\", and \"powerpc\". \"mips\" includes \"mipsel\".",8],[12,"options","","Optional settings with defaults.",8],[3,"TargetOptions","","Optional aspects of a target specification."],[12,"linker","","Linker to invoke. Defaults to \"cc\".",9],[12,"pre_link_args","","Linker arguments that are unconditionally passed *before* any user-defined libraries.",9],[12,"post_link_args","","Linker arguments that are unconditionally passed *after* any user-defined libraries.",9],[12,"cpu","","Default CPU to pass to LLVM. Corresponds to `llc -mcpu=$cpu`. Defaults to \"default\".",9],[12,"features","","Default target features to pass to LLVM. These features will *always* be passed, and cannot\nbe disabled even via `-C`. Corresponds to `llc -mattr=$features`.",9],[12,"dynamic_linking","","Whether dynamic linking is available on this target. Defaults to false.",9],[12,"executables","","Whether executables are available on this target. iOS, for example, only allows static\nlibraries. Defaults to false.",9],[12,"morestack","","Whether LLVM's segmented stack prelude is supported by whatever runtime is available.\nWill emit stack checks and calls to __morestack. Defaults to false.",9],[12,"relocation_model","","Relocation model to use in object file. Corresponds to `llc\n-relocation-model=$relocation_model`. Defaults to \"pic\".",9],[12,"code_model","","Code model to use. Corresponds to `llc -code-model=$code_model`. Defaults to \"default\".",9],[12,"disable_redzone","","Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.",9],[12,"eliminate_frame_pointer","","Eliminate frame pointers from stack frames if possible. Defaults to true.",9],[12,"function_sections","","Emit each function in its own section. Defaults to true.",9],[12,"dll_prefix","","String to prepend to the name of every dynamic library. Defaults to \"lib\".",9],[12,"dll_suffix","","String to append to the name of every dynamic library. Defaults to \".so\".",9],[12,"exe_suffix","","String to append to the name of every executable.",9],[12,"staticlib_prefix","","String to prepend to the name of every static library. Defaults to \"lib\".",9],[12,"staticlib_suffix","","String to append to the name of every static library. Defaults to \".a\".",9],[12,"is_like_osx","","Whether the target toolchain is like OSX's. Only useful for compiling against iOS/OS X, in\nparticular running dsymutil and some other stuff like `-dead_strip`. Defaults to false.",9],[12,"is_like_windows","","Whether the target toolchain is like Windows'. Only useful for compiling against Windows,\nonly realy used for figuring out how to find libraries, since Windows uses its own\nlibrary naming convention. Defaults to false.",9],[12,"linker_is_gnu","","Whether the linker support GNU-like arguments such as -O. Defaults to false.",9],[12,"has_rpath","","Whether the linker support rpaths or not. Defaults to false.",9],[12,"no_compiler_rt","","Whether to disable linking to compiler-rt. Defaults to false, as LLVM will emit references\nto the functions that compiler-rt provides.",9],[12,"position_independent_executables","","Dynamically linked executables can be compiled as position independent if the default\nrelocation model of position independent code is not changed. This is a requirement to take\nadvantage of ASLR, as otherwise the functions in the executable are not randomized and can\nbe used during an exploit of a vulnerability in any code.",9],[11,"fmt","","",8],[11,"clone","","",8],[11,"fmt","","",9],[11,"clone","","",9],[11,"default","","Create a set of \"sane defaults\" for any target. This is still incomplete, and if used for\ncompilation, will certainly not work.",9],[11,"adjust_abi","","Given a function ABI, turn \"System\" into the correct ABI for this target.",8],[11,"from_json","","Load a target descriptor from a JSON object.",8],[11,"search","","Search RUST_TARGET_PATH for a JSON file specifying the given target triple. Note that it\ncould also just be a bare filename already, so also check for that. If one of the hardcoded\ntargets we know about, just return it directly.",8]],"paths":[[3,"ArchiveConfig"],[3,"Archive"],[3,"ArchiveBuilder"],[3,"RPathConfig"],[8,"Digest"],[3,"Sha256"],[3,"Svh"],[3,"t"],[3,"Target"],[3,"TargetOptions"]]};

searchIndex['rustc_bitflags'] = {"items":[[0,"","rustc_bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};

searchIndex['unicode'] = {"items":[[0,"","unicode","# The Unicode Library"],[0,"regex","",""],[7,"UNICODE_CLASSES","unicode::regex",""],[7,"PERLD","",""],[7,"PERLS","",""],[7,"PERLW","",""],[0,"char","unicode","Character manipulation (`char` type, Unicode Scalar Value)"],[17,"MAX","unicode::char","The highest valid code point"],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character"],[5,"compose","",""],[5,"canonical_combining_class","",""],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[8,"CharExt","","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",0],[10,"to_digit","","Converts a character to the corresponding digit.",0],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape\nof a character, as `char`s.",0],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",0],[10,"len_utf8","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",0],[10,"len_utf16","","Returns the amount of bytes this character would need if encoded in\nUTF-16.",0],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",0],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",0],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",0],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",0],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",0],[10,"is_lowercase","","Indicates whether a character is in lowercase.",0],[10,"is_uppercase","","Indicates whether a character is in uppercase.",0],[10,"is_whitespace","","Indicates whether a character is whitespace.",0],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",0],[10,"is_control","","Indicates whether a character is a control code point.",0],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",0],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",0],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",0],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",0],[0,"str","unicode",""],[3,"Words","unicode::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[3,"Utf16Items","","An iterator that decodes UTF-16 encoded codepoints from a vector\nof `u16`s."],[3,"Utf16Encoder","","Iterator adaptor for encoding `char`s to UTF-16."],[4,"Utf16Item","","The possibilities for values decoded from a `u16` stream."],[13,"ScalarValue","","A valid codepoint.",1],[13,"LoneSurrogate","","An invalid surrogate without its pair.",1],[5,"utf8_char_width","","Given a first byte, determine how many bytes are in this UTF-8 character"],[5,"is_utf16","","Determines if a vector of `u16` contains valid UTF-16"],[5,"utf16_items","","Create an iterator over the UTF-16 encoded codepoints in `v`,\nreturning invalid surrogates as `LoneSurrogate`s."],[8,"UnicodeStr","","Methods for Unicode string slices"],[10,"graphemes","","",2],[10,"grapheme_indices","","",2],[10,"words","","",2],[10,"is_whitespace","","",2],[10,"is_alphanumeric","","",2],[10,"width","","",2],[10,"trim","","",2],[10,"trim_left","","",2],[10,"trim_right","","",2],[11,"reverse","core::cmp","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",3],[11,"fmt","core::num","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"ne","","",4],[11,"eq","","",5],[11,"ne","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"clone_from","","",5],[11,"fmt","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"clone_from","","",6],[11,"fmt","","",6],[11,"fmt","","",5],[11,"description","","",5],[11,"cause","","",5],[11,"eq","","",7],[11,"ne","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"clone_from","","",7],[11,"fmt","","",7],[11,"eq","","",8],[11,"ne","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"clone_from","","",8],[11,"fmt","","",8],[11,"fmt","","",7],[11,"description","","",7],[11,"cause","","",7],[11,"hash","core::nonzero","",9],[11,"fmt","","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"cmp","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"ne","","",9],[11,"assert_receiver_is_total_eq","","",9],[11,"clone","","",9],[11,"clone_from","","",9],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",9],[11,"deref","","",9],[11,"null","core::ptr","Returns a null Unique.",10],[11,"offset","","Return an (unsafe) pointer into the memory owned by `self`.",10],[11,"cmp","core::marker","",11],[11,"partial_cmp","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"assert_receiver_is_total_eq","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"clone_from","","",11],[11,"cmp","","",12],[11,"partial_cmp","","",12],[11,"lt","","",12],[11,"le","","",12],[11,"gt","","",12],[11,"ge","","",12],[11,"lt","","",12],[11,"le","","",12],[11,"gt","","",12],[11,"ge","","",12],[11,"assert_receiver_is_total_eq","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"clone_from","","",12],[11,"cmp","","",13],[11,"partial_cmp","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"assert_receiver_is_total_eq","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"clone_from","","",13],[11,"cmp","","",14],[11,"partial_cmp","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"assert_receiver_is_total_eq","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"clone_from","","",14],[11,"cmp","","",15],[11,"partial_cmp","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"assert_receiver_is_total_eq","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"clone_from","","",15],[11,"cmp","","",16],[11,"partial_cmp","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"assert_receiver_is_total_eq","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"clone_from","","",16],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"assert_receiver_is_total_eq","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"clone_from","","",17],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"assert_receiver_is_total_eq","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"clone_from","","",18],[11,"assert_receiver_is_total_eq","core::ops","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"clone_from","","",19],[11,"fmt","","",19],[11,"assert_receiver_is_total_eq","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"clone_from","","",20],[11,"fmt","","",20],[11,"assert_receiver_is_total_eq","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"clone_from","","",21],[11,"fmt","","",21],[11,"assert_receiver_is_total_eq","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"clone_from","","",22],[11,"fmt","","",22],[11,"fmt","core::cmp","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"clone_from","","",3],[11,"assert_receiver_is_total_eq","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"is","unicode::std","Returns true if the boxed type is the same as `T`",23],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",23],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",23],[11,"hash","core::any","",24],[11,"fmt","","",24],[11,"assert_receiver_is_total_eq","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"clone_from","","",24],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",24],[11,"new","core::atomic","Creates a new `AtomicBool`.",25],[11,"load","","Loads a value from the bool.",25],[11,"store","","Stores a value into the bool.",25],[11,"swap","","Stores a value into the bool, returning the old value.",25],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",25],[11,"fetch_and","","Logical \"and\" with a boolean value.",25],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",25],[11,"fetch_or","","Logical \"or\" with a boolean value.",25],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",25],[11,"new","","Creates a new `AtomicIsize`.",26],[11,"load","","Loads a value from the isize.",26],[11,"store","","Stores a value into the isize.",26],[11,"swap","","Stores a value into the isize, returning the old value.",26],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",26],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",26],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",26],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",26],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",26],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",26],[11,"new","","Creates a new `AtomicUsize`.",27],[11,"load","","Loads a value from the usize.",27],[11,"store","","Stores a value into the usize.",27],[11,"swap","","Stores a value into the usize, returning the old value.",27],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",27],[11,"fetch_add","","Add to the current usize, returning the previous value.",27],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",27],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",27],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",27],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",27],[11,"new","","Creates a new `AtomicPtr`.",28],[11,"load","","Loads a value from the pointer.",28],[11,"store","","Stores a value into the pointer.",28],[11,"swap","","Stores a value into the pointer, returning the old value.",28],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",28],[11,"new","","",29],[11,"load","","",29],[11,"store","","",29],[11,"swap","","",29],[11,"compare_and_swap","","",29],[11,"fetch_add","","",29],[11,"fetch_sub","","",29],[11,"fetch_and","","",29],[11,"fetch_or","","",29],[11,"fetch_xor","","",29],[11,"new","","",30],[11,"load","","",30],[11,"store","","",30],[11,"swap","","",30],[11,"compare_and_swap","","",30],[11,"fetch_add","","",30],[11,"fetch_sub","","",30],[11,"fetch_and","","",30],[11,"fetch_or","","",30],[11,"fetch_xor","","",30],[11,"into_cow","core::borrow","",31],[11,"clone","","",31],[11,"clone_from","","",31],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",31],[11,"into_owned","","Extract the owned data.",31],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",31],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",31],[11,"deref","","",31],[11,"assert_receiver_is_total_eq","","",31],[11,"cmp","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"partial_cmp","","",31],[11,"lt","","",31],[11,"le","","",31],[11,"gt","","",31],[11,"ge","","",31],[11,"fmt","","",31],[11,"fmt","","",31],[11,"new","core::cell","Creates a new `Cell` containing the given value.",32],[11,"get","","Returns a copy of the contained value.",32],[11,"set","","Sets the contained value.",32],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",32],[11,"clone","","",32],[11,"clone_from","","",32],[11,"default","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"fmt","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"clone_from","","",33],[11,"new","","Creates a new `RefCell` containing `value`.",34],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",34],[11,"borrow_state","","Query the current state of this `RefCell`",34],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",34],[11,"borrow","","Immutably borrows the wrapped value.",34],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",34],[11,"borrow_mut","","Mutably borrows the wrapped value.",34],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",34],[11,"clone","","",34],[11,"clone_from","","",34],[11,"default","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"drop","","",35],[11,"clone","","",35],[11,"clone_from","","",35],[11,"deref","","",36],[11,"drop","","",37],[11,"deref","","",38],[11,"deref_mut","","",38],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",39],[11,"get","","Gets a mutable pointer to the wrapped value.",39],[11,"into_inner","","Unwraps the value",39],[11,"clone","core::char","",40],[11,"clone_from","","",40],[11,"clone","","",41],[11,"clone_from","","",41],[11,"next","","",40],[11,"size_hint","","",40],[11,"clone","","",42],[11,"clone_from","","",42],[11,"clone","","",43],[11,"clone_from","","",43],[11,"next","","",42],[11,"size_hint","","",42],[11,"drop","core::finally","",44],[11,"len","core::iter","",45],[11,"len","","",46],[11,"len","","",47],[11,"len","","",48],[11,"len","","",49],[11,"clone","","",47],[11,"clone_from","","",47],[11,"next","","",47],[11,"size_hint","","",47],[11,"size_hint","","",47],[11,"next_back","","",47],[11,"indexable","","",47],[11,"idx","","",47],[11,"next","","",50],[11,"size_hint","","",50],[11,"size_hint","","",50],[11,"next_back","","",50],[11,"len","","",50],[11,"fmt","","",51],[11,"eq","","",51],[11,"ne","","",51],[11,"ne","","",51],[11,"clone","","",51],[11,"clone_from","","",51],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",51],[11,"clone","","",52],[11,"clone_from","","",52],[11,"next","","",52],[11,"size_hint","","",52],[11,"size_hint","","",52],[11,"next_back","","",52],[11,"len","","",52],[11,"clone","","",53],[11,"clone_from","","",53],[11,"next","","",53],[11,"size_hint","","",53],[11,"size_hint","","",53],[11,"indexable","","",53],[11,"idx","","",53],[11,"clone","","",54],[11,"clone_from","","",54],[11,"next","","",54],[11,"size_hint","","",54],[11,"size_hint","","",54],[11,"next_back","","",54],[11,"indexable","","",54],[11,"idx","","",54],[11,"clone","","",49],[11,"clone_from","","",49],[11,"next","","",49],[11,"size_hint","","",49],[11,"size_hint","","",49],[11,"next_back","","",49],[11,"indexable","","",49],[11,"idx","","",49],[11,"clone","","",48],[11,"clone_from","","",48],[11,"next","","",48],[11,"size_hint","","",48],[11,"size_hint","","",48],[11,"next_back","","",48],[11,"indexable","","",48],[11,"idx","","",48],[11,"clone","","",55],[11,"clone_from","","",55],[11,"next","","",55],[11,"size_hint","","",55],[11,"size_hint","","",55],[11,"next_back","","",55],[11,"clone","","",56],[11,"clone_from","","",56],[11,"next","","",56],[11,"size_hint","","",56],[11,"size_hint","","",56],[11,"next_back","","",56],[11,"clone","","",45],[11,"clone_from","","",45],[11,"next","","",45],[11,"size_hint","","",45],[11,"size_hint","","",45],[11,"next_back","","",45],[11,"indexable","","",45],[11,"idx","","",45],[11,"clone","","",57],[11,"clone_from","","",57],[11,"next","","",57],[11,"size_hint","","",57],[11,"size_hint","","",57],[11,"len","","",57],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",57],[11,"is_empty","","Check whether peekable iterator is empty or not.",57],[11,"clone","","",58],[11,"clone_from","","",58],[11,"next","","",58],[11,"size_hint","","",58],[11,"size_hint","","",58],[11,"clone","","",59],[11,"clone_from","","",59],[11,"next","","",59],[11,"size_hint","","",59],[11,"size_hint","","",59],[11,"clone","","",60],[11,"clone_from","","",60],[11,"next","","",60],[11,"size_hint","","",60],[11,"size_hint","","",60],[11,"indexable","","",60],[11,"idx","","",60],[11,"len","","",60],[11,"clone","","",61],[11,"clone_from","","",61],[11,"next","","",61],[11,"size_hint","","",61],[11,"size_hint","","",61],[11,"indexable","","",61],[11,"idx","","",61],[11,"len","","",61],[11,"clone","","",62],[11,"clone_from","","",62],[11,"next","","",62],[11,"size_hint","","",62],[11,"size_hint","","",62],[11,"clone","","",63],[11,"clone_from","","",63],[11,"next","","",63],[11,"size_hint","","",63],[11,"size_hint","","",63],[11,"next_back","","",63],[11,"clone","","",64],[11,"clone_from","","",64],[11,"next","","",64],[11,"size_hint","","",64],[11,"size_hint","","",64],[11,"next_back","","",64],[11,"indexable","","",64],[11,"idx","","",64],[11,"len","","",64],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",64],[11,"clone","","",46],[11,"clone_from","","",46],[11,"next","","",46],[11,"size_hint","","",46],[11,"size_hint","","",46],[11,"next_back","","",46],[11,"indexable","","",46],[11,"idx","","",46],[11,"clone","","",65],[11,"clone_from","","",65],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",65],[11,"next","","",65],[11,"size_hint","","",65],[11,"size_hint","","",65],[11,"clone","","",66],[11,"clone_from","","",66],[11,"next","","",66],[11,"size_hint","","",66],[11,"size_hint","","",66],[11,"clone","","",67],[11,"clone_from","","",67],[11,"next","","",67],[11,"size_hint","","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"clone","","",68],[11,"clone_from","","",68],[11,"next","","",68],[11,"size_hint","","",68],[11,"size_hint","","",68],[11,"next_back","","",68],[11,"clone","","",69],[11,"clone_from","","",69],[11,"next","","",69],[11,"size_hint","","",69],[11,"clone","","",70],[11,"clone_from","","",70],[11,"next","","",70],[11,"size_hint","","",70],[11,"next","core::ops","",20],[11,"size_hint","","",20],[11,"size_hint","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"len","","",20],[11,"next_back","","",20],[11,"next","","",21],[11,"size_hint","","",21],[11,"clone","core::iter","",71],[11,"clone_from","","",71],[11,"next","","",71],[11,"size_hint","","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"indexable","","",71],[11,"idx","","",71],[11,"hash","core::option","",72],[11,"fmt","","",72],[11,"cmp","","",72],[11,"assert_receiver_is_total_eq","","",72],[11,"partial_cmp","","",72],[11,"lt","","",72],[11,"le","","",72],[11,"gt","","",72],[11,"ge","","",72],[11,"lt","","",72],[11,"le","","",72],[11,"gt","","",72],[11,"ge","","",72],[11,"eq","","",72],[11,"ne","","",72],[11,"ne","","",72],[11,"clone","","",72],[11,"clone_from","","",72],[11,"is_some","","Returns `true` if the option is a `Some` value",72],[11,"is_none","","Returns `true` if the option is a `None` value",72],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",72],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",72],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",72],[11,"expect","","Unwraps an option, yielding the content of a `Some`",72],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",72],[11,"unwrap_or","","Returns the contained value or a default.",72],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",72],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",72],[11,"map_or","","Applies a function to the contained value or returns a default.",72],[11,"map_or_else","","Applies a function to the contained value or computes a default.",72],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",72],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",72],[11,"iter","","Returns an iterator over the possibly contained value.",72],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",72],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",72],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",72],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",72],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",72],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",72],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",72],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",72],[11,"unwrap_or_default","","Returns the contained value or a default",72],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",72],[11,"default","","",72],[11,"clone","","",73],[11,"clone_from","","",73],[11,"next","","",73],[11,"size_hint","","",73],[11,"size_hint","","",73],[11,"next_back","","",73],[11,"len","","",73],[11,"next","","",74],[11,"size_hint","","",74],[11,"size_hint","","",74],[11,"next_back","","",74],[11,"len","","",74],[11,"clone","","",74],[11,"clone_from","","",74],[11,"next","","",75],[11,"size_hint","","",75],[11,"size_hint","","",75],[11,"next_back","","",75],[11,"len","","",75],[11,"next","","",76],[11,"size_hint","","",76],[11,"size_hint","","",76],[11,"next_back","","",76],[11,"len","","",76],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",72],[11,"hash","core::result","",77],[11,"fmt","","",77],[11,"cmp","","",77],[11,"assert_receiver_is_total_eq","","",77],[11,"partial_cmp","","",77],[11,"lt","","",77],[11,"le","","",77],[11,"gt","","",77],[11,"ge","","",77],[11,"lt","","",77],[11,"le","","",77],[11,"gt","","",77],[11,"ge","","",77],[11,"eq","","",77],[11,"ne","","",77],[11,"ne","","",77],[11,"clone","","",77],[11,"clone_from","","",77],[11,"is_ok","","Returns true if the result is `Ok`",77],[11,"is_err","","Returns true if the result is `Err`",77],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",77],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",77],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",77],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",77],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",77],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",77],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",77],[11,"iter","","Returns an iterator over the possibly contained value.",77],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",77],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",77],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",77],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",77],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",77],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",77],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",77],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",77],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",77],[11,"next","","",78],[11,"size_hint","","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"len","","",78],[11,"clone","","",78],[11,"clone_from","","",78],[11,"next","","",79],[11,"size_hint","","",79],[11,"size_hint","","",79],[11,"next_back","","",79],[11,"len","","",79],[11,"next","","",80],[11,"size_hint","","",80],[11,"size_hint","","",80],[11,"next_back","","",80],[11,"len","","",80],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",77],[11,"fmt","core::simd","",81],[11,"fmt","","",82],[11,"fmt","","",83],[11,"fmt","","",84],[11,"fmt","","",85],[11,"fmt","","",86],[11,"fmt","","",87],[11,"fmt","","",88],[11,"fmt","","",89],[11,"fmt","","",90],[11,"index","core::slice","",91],[11,"index","","",91],[11,"index","","",91],[11,"index","","",91],[11,"as_slice","","View the underlying data as a subslice of the original data.",91],[11,"next","","",91],[11,"size_hint","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"len","","",91],[11,"clone","","",91],[11,"clone_from","","",91],[11,"indexable","","",91],[11,"idx","","",91],[11,"index","","",92],[11,"index","","",92],[11,"index","","",92],[11,"index","","",92],[11,"index_mut","","",92],[11,"index_mut","","",92],[11,"index_mut","","",92],[11,"index_mut","","",92],[11,"into_slice","","View the underlying data as a subslice of the original data.",92],[11,"next","","",92],[11,"size_hint","","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"len","","",92],[11,"clone","","",93],[11,"clone_from","","",93],[11,"next","","",93],[11,"size_hint","","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"finish","","",93],[11,"finish","","",94],[11,"next","","",94],[11,"size_hint","","",94],[11,"size_hint","","",94],[11,"next_back","","",94],[11,"next","","",95],[11,"size_hint","","",95],[11,"size_hint","","",95],[11,"next","","",96],[11,"size_hint","","",96],[11,"size_hint","","",96],[11,"next","","",97],[11,"size_hint","","",97],[11,"size_hint","","",97],[11,"next","","",98],[11,"size_hint","","",98],[11,"size_hint","","",98],[11,"next","","",99],[11,"size_hint","","",99],[11,"size_hint","","",99],[11,"clone","","",100],[11,"clone_from","","",100],[11,"next","","",100],[11,"size_hint","","",100],[11,"size_hint","","",100],[11,"clone","","",101],[11,"clone_from","","",101],[11,"next","","",101],[11,"size_hint","","",101],[11,"size_hint","","",101],[11,"next_back","","",101],[11,"len","","",101],[11,"indexable","","",101],[11,"idx","","",101],[11,"next","","",102],[11,"size_hint","","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"len","","",102],[11,"eq","core::str","",103],[11,"ne","","",103],[11,"ne","","",103],[11,"clone","","",103],[11,"clone_from","","",103],[11,"fmt","","",103],[11,"fmt","","",103],[11,"description","","",103],[11,"cause","","",103],[11,"fmt","","",104],[11,"clone","","",104],[11,"clone_from","","",104],[11,"eq","","",104],[11,"ne","","",104],[11,"ne","","",104],[11,"assert_receiver_is_total_eq","","",104],[11,"description","","",104],[11,"cause","","",104],[11,"fmt","","",104],[11,"clone","","",105],[11,"clone_from","","",105],[11,"next","","",105],[11,"size_hint","","",105],[11,"size_hint","","",105],[11,"next_back","","",105],[11,"clone","","",106],[11,"clone_from","","",106],[11,"next","","",106],[11,"size_hint","","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"clone","","",107],[11,"clone_from","","",107],[11,"next","","",107],[11,"size_hint","","",107],[11,"size_hint","","",107],[11,"next_back","","",107],[11,"len","","",107],[11,"len","","",107],[11,"clone","","",108],[11,"clone_from","","",108],[11,"call","","",108],[11,"clone","","",109],[11,"clone_from","","",109],[11,"clone","","",110],[11,"clone_from","","",110],[11,"next","","",109],[11,"size_hint","","",109],[11,"next_back","","",109],[11,"next","","",110],[11,"size_hint","","",110],[11,"clone","","",111],[11,"clone_from","","",111],[11,"clone","","",112],[11,"clone_from","","",112],[11,"clone","","",113],[11,"clone_from","","",113],[11,"clone","","",114],[11,"clone_from","","",114],[11,"clone","","",115],[11,"clone_from","","",115],[11,"next","","",114],[11,"size_hint","","",114],[11,"next","","",115],[11,"size_hint","","",115],[11,"clone","","",116],[11,"clone_from","","",116],[11,"next","","",116],[11,"size_hint","","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"clone","","",117],[11,"clone_from","","",117],[11,"next","","",117],[11,"size_hint","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[11,"clone","","",118],[11,"clone_from","","",118],[11,"next","","",118],[11,"size_hint","","",118],[11,"size_hint","","",118],[11,"clone","","",119],[11,"clone_from","","",119],[11,"next","","",119],[11,"size_hint","","",119],[11,"size_hint","","",119],[11,"next","","",120],[11,"size_hint","","",120],[11,"size_hint","","",120],[11,"next_back","","",120],[11,"next","","",121],[11,"size_hint","","",121],[11,"size_hint","","",121],[11,"next_back","","",121],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",122],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",122],[11,"result","","Returns the computed hash.",122],[11,"write","","",122],[11,"reset","","",122],[11,"finish","","",122],[11,"clone","","",122],[11,"clone_from","","",122],[11,"default","","",122],[11,"hash","core::borrow","",31],[11,"eq","core::fmt::num","",123],[11,"ne","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"clone_from","","",123],[11,"eq","","",124],[11,"ne","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"clone_from","","",124],[11,"eq","","",125],[11,"ne","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"clone_from","","",125],[11,"eq","","",126],[11,"ne","","",126],[11,"ne","","",126],[11,"clone","","",126],[11,"clone_from","","",126],[11,"eq","","",127],[11,"ne","","",127],[11,"ne","","",127],[11,"clone","","",127],[11,"clone_from","","",127],[11,"eq","","",128],[11,"ne","","",128],[11,"ne","","",128],[11,"clone","","",128],[11,"clone_from","","",128],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"fmt","","",129],[11,"eq","core::fmt::rt::v1","",130],[11,"ne","","",130],[11,"ne","","",130],[11,"fmt","core::fmt","",131],[11,"fmt","","",132],[11,"fmt","","",132],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",133],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",133],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",133],[11,"write_fmt","","Writes some formatted information into this instance",133],[11,"flags","","Flags for formatting (packed version of rt::Flag)",133],[11,"fill","","Character used as 'fill' whenever there is alignment",133],[11,"align","","Flag indicating what form of alignment was requested",133],[11,"width","","Optionally specified integer width that the output should be",133],[11,"precision","","Optionally specified precision for numeric types",133],[11,"fmt","","",131],[11,"fmt","core::cell","",32],[11,"fmt","","",34],[11,"fmt","","",36],[11,"fmt","","",38],[11,"clone","unicode::str","",134],[11,"next","","",134],[11,"size_hint","","",134],[11,"next_back","","",134],[11,"clone","","",135],[11,"size_hint","","",135],[11,"next","","",135],[11,"next_back","","",135],[11,"clone","","",136],[11,"fmt","","",1],[11,"clone","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",1],[11,"next","","",136],[11,"size_hint","","",136],[11,"clone","","",137],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",137],[11,"next","","",137],[11,"size_hint","","",137],[11,"next","","",138],[11,"next_back","","",138]],"paths":[[8,"CharExt"],[4,"Utf16Item"],[8,"UnicodeStr"],[4,"Ordering"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"CovariantType"],[3,"ContravariantType"],[3,"InvariantType"],[3,"CovariantLifetime"],[3,"ContravariantLifetime"],[3,"InvariantLifetime"],[3,"NoCopy"],[3,"Managed"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[4,"Cow"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Enumerate"],[3,"Inspect"],[3,"Rev"],[3,"Map"],[3,"Zip"],[3,"ByRef"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Filter"],[3,"FilterMap"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"NaiveSearcher"],[3,"TwoWaySearcher"],[4,"Searcher"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"Utf16Items"],[3,"Utf16Encoder"],[3,"Words"]]};

searchIndex['alloc'] = {"items":[[0,"","alloc","# The Rust core allocation library"],[5,"oom","","Common out-of-memory routine"],[0,"heap","",""],[5,"allocate","alloc::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[0,"boxed","alloc","A pointer type for heap allocation."],[3,"Box","alloc::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[7,"HEAP","","A value that represents the heap. This is the default place that the `box` keyword allocates\ninto when no place is supplied."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",0],[11,"new","","Allocates memory on the heap and then moves `x` into it.",1],[11,"from_raw","","Constructs a box from the raw pointer.",1],[11,"default","","",1],[11,"default","","",1],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",1],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",1],[11,"eq","","",1],[11,"ne","","",1],[11,"partial_cmp","","",1],[11,"lt","","",1],[11,"le","","",1],[11,"ge","","",1],[11,"gt","","",1],[11,"cmp","","",1],[11,"hash","","",1],[11,"downcast","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[6,"Target","",""],[11,"deref","","",1],[11,"deref_mut","","",1],[6,"Item","",""],[11,"next","","",1],[11,"size_hint","","",1],[11,"from_error","","",1],[0,"arc","alloc","Threadsafe reference-counted boxes (the `Arc<T>` type)."],[3,"Arc","alloc::arc","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[11,"new","","Constructs a new `Arc<T>`.",2],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",2],[11,"clone","","Makes a clone of the `Arc<T>`.",2],[6,"Target","",""],[11,"deref","","",2],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",2],[11,"drop","","Drops the `Arc<T>`.",2],[11,"upgrade","","Upgrades a weak reference to a strong reference.",3],[11,"clone","","Makes a clone of the `Weak<T>`.",3],[11,"drop","","Drops the `Weak<T>`.",3],[11,"eq","","Equality for two `Arc<T>`s.",2],[11,"ne","","Inequality for two `Arc<T>`s.",2],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",2],[11,"lt","","Less-than comparison for two `Arc<T>`s.",2],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",2],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",2],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",2],[11,"cmp","","",2],[11,"fmt","","",2],[11,"fmt","","",2],[11,"default","","",2],[11,"hash","","",2],[0,"rc","alloc","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","alloc::rc","An immutable reference-counted pointer type."],[3,"Weak","","A weak version of `Rc<T>`."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[11,"new","","Constructs a new `Rc<T>`.",4],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",4],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",4],[6,"Target","",""],[11,"deref","","",4],[11,"drop","","Drops the `Rc<T>`.",4],[11,"clone","","Makes a clone of the `Rc<T>`.",4],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",4],[11,"eq","","Equality for two `Rc<T>`s.",4],[11,"ne","","Inequality for two `Rc<T>`s.",4],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",4],[11,"lt","","Less-than comparison for two `Rc<T>`s.",4],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",4],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",4],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",4],[11,"cmp","","Comparison for two `Rc<T>`s.",4],[11,"hash","","",4],[11,"fmt","","",4],[11,"fmt","","",4],[11,"upgrade","","Upgrades a weak reference to a strong reference.",5],[11,"drop","","Drops the `Weak<T>`.",5],[11,"clone","","Makes a clone of the `Weak<T>`.",5],[11,"fmt","","",5]],"paths":[[8,"BoxAny"],[3,"Box"],[3,"Arc"],[3,"Weak"],[3,"Rc"],[3,"Weak"]]};

searchIndex['rbml'] = {"items":[[0,"","rbml","Really Bad Markup Language (rbml) is a temporary measure until we migrate\nthe rust object metadata to a better serialization format. It is not\nintended to be used by users."],[3,"Doc","","Common data structures"],[12,"data","","",0],[12,"start","","",0],[12,"end","","",0],[3,"TaggedDoc","",""],[12,"doc","","",1],[4,"EbmlEncoderTag","",""],[13,"EsUint","","",2],[13,"EsU64","","",2],[13,"EsU32","","",2],[13,"EsU16","","",2],[13,"EsU8","","",2],[13,"EsInt","","",2],[13,"EsI64","","",2],[13,"EsI32","","",2],[13,"EsI16","","",2],[13,"EsI8","","",2],[13,"EsBool","","",2],[13,"EsChar","","",2],[13,"EsStr","","",2],[13,"EsF64","","",2],[13,"EsF32","","",2],[13,"EsFloat","","",2],[13,"EsEnum","","",2],[13,"EsEnumVid","","",2],[13,"EsEnumBody","","",2],[13,"EsVec","","",2],[13,"EsVecLen","","",2],[13,"EsVecElt","","",2],[13,"EsMap","","",2],[13,"EsMapLen","","",2],[13,"EsMapKey","","",2],[13,"EsMapVal","","",2],[13,"EsOpaque","","",2],[13,"EsLabel","","",2],[4,"Error","",""],[13,"IntTooBig","","",3],[13,"Expected","","",3],[13,"IoError","","",3],[13,"ApplicationError","","",3],[0,"io","",""],[3,"SeekableMemWriter","rbml::io","Writes to an owned, growable byte vector that supports seeking."],[11,"new","","Create a new `SeekableMemWriter`.",4],[11,"with_capacity","","Create a new `SeekableMemWriter`, allocating at least `n` bytes for\nthe internal buffer.",4],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`SeekableMemWriter`.",4],[11,"unwrap","","Unwraps this `SeekableMemWriter`, returning the underlying buffer",4],[11,"write_all","","",4],[11,"tell","","",4],[11,"seek","","",4],[0,"reader","rbml",""],[3,"Res","rbml::reader",""],[12,"val","","",5],[12,"next","","",5],[3,"Decoder","",""],[5,"vuint_at","",""],[5,"doc_at","",""],[5,"maybe_get_doc","",""],[5,"get_doc","",""],[5,"docs","",""],[5,"tagged_docs","",""],[5,"with_doc_data","",""],[5,"doc_as_u8","",""],[5,"doc_as_u16","",""],[5,"doc_as_u32","",""],[5,"doc_as_u64","",""],[5,"doc_as_i8","",""],[5,"doc_as_i16","",""],[5,"doc_as_i32","",""],[5,"doc_as_i64","",""],[6,"DecodeResult","",""],[11,"new","","",6],[11,"read_opaque","","",6],[6,"Error","",""],[11,"read_nil","","",6],[11,"read_u64","","",6],[11,"read_u32","","",6],[11,"read_u16","","",6],[11,"read_u8","","",6],[11,"read_uint","","",6],[11,"read_i64","","",6],[11,"read_i32","","",6],[11,"read_i16","","",6],[11,"read_i8","","",6],[11,"read_int","","",6],[11,"read_bool","","",6],[11,"read_f64","","",6],[11,"read_f32","","",6],[11,"read_char","","",6],[11,"read_str","","",6],[11,"read_enum","","",6],[11,"read_enum_variant","","",6],[11,"read_enum_variant_arg","","",6],[11,"read_enum_struct_variant","","",6],[11,"read_enum_struct_variant_field","","",6],[11,"read_struct","","",6],[11,"read_struct_field","","",6],[11,"read_tuple","","",6],[11,"read_tuple_arg","","",6],[11,"read_tuple_struct","","",6],[11,"read_tuple_struct_arg","","",6],[11,"read_option","","",6],[11,"read_seq","","",6],[11,"read_seq_elt","","",6],[11,"read_map","","",6],[11,"read_map_elt_key","","",6],[11,"read_map_elt_val","","",6],[11,"error","","",6],[0,"writer","rbml",""],[3,"Encoder","rbml::writer",""],[12,"writer","","",7],[6,"EncodeResult","",""],[11,"new","","",7],[11,"unsafe_clone","","FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.",7],[11,"start_tag","","",7],[11,"end_tag","","",7],[11,"wr_tag","","",7],[11,"wr_tagged_bytes","","",7],[11,"wr_tagged_u64","","",7],[11,"wr_tagged_u32","","",7],[11,"wr_tagged_u16","","",7],[11,"wr_tagged_u8","","",7],[11,"wr_tagged_i64","","",7],[11,"wr_tagged_i32","","",7],[11,"wr_tagged_i16","","",7],[11,"wr_tagged_i8","","",7],[11,"wr_tagged_str","","",7],[11,"wr_bytes","","",7],[11,"wr_str","","",7],[11,"emit_opaque","","",7],[6,"Error","",""],[11,"emit_nil","","",7],[11,"emit_uint","","",7],[11,"emit_u64","","",7],[11,"emit_u32","","",7],[11,"emit_u16","","",7],[11,"emit_u8","","",7],[11,"emit_int","","",7],[11,"emit_i64","","",7],[11,"emit_i32","","",7],[11,"emit_i16","","",7],[11,"emit_i8","","",7],[11,"emit_bool","","",7],[11,"emit_f64","","",7],[11,"emit_f32","","",7],[11,"emit_char","","",7],[11,"emit_str","","",7],[11,"emit_enum","","",7],[11,"emit_enum_variant","","",7],[11,"emit_enum_variant_arg","","",7],[11,"emit_enum_struct_variant","","",7],[11,"emit_enum_struct_variant_field","","",7],[11,"emit_struct","","",7],[11,"emit_struct_field","","",7],[11,"emit_tuple","","",7],[11,"emit_tuple_arg","","",7],[11,"emit_tuple_struct","","",7],[11,"emit_tuple_struct_arg","","",7],[11,"emit_option","","",7],[11,"emit_option_none","","",7],[11,"emit_option_some","","",7],[11,"emit_seq","","",7],[11,"emit_seq_elt","","",7],[11,"emit_map","","",7],[11,"emit_map_elt_key","","",7],[11,"emit_map_elt_val","","",7],[11,"clone","rbml","",0],[11,"new","","",0],[11,"get","","",0],[11,"as_str_slice","","",0],[11,"as_str","","",0],[11,"fmt","","",2],[11,"fmt","","",3],[11,"fmt","","",3]],"paths":[[3,"Doc"],[3,"TaggedDoc"],[4,"EbmlEncoderTag"],[4,"Error"],[3,"SeekableMemWriter"],[3,"Res"],[3,"Decoder"],[3,"Encoder"]]};

searchIndex['core'] = {"items":[[0,"","core","# The Rust Core Library"],[0,"int","","Deprecated: replaced by `isize`."],[17,"BITS","core::int",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"isize","core","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","core::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","core","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","core::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","core","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","core::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","core","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","core::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","core","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","core::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"uint","core","Deprecated: replaced by `usize`."],[17,"BITS","core::uint",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","core","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","core::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","core","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","core::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","core","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","core::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","core","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","core::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","core","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","core::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","core","Operations and constants for 32-bits floats (`f32` type)"],[0,"consts","core::f32","Various useful constants."],[17,"PI","core::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"f64","core","Operations and constants for 64-bits floats (`f64` type)"],[0,"consts","core::f64","Various useful constants."],[17,"PI","core::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[17,"RADIX","core::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"num","core","Numeric traits and functions for the built-in numeric types."],[3,"ParseIntError","core::num","An error which can be returned when parsing an integer."],[3,"ParseFloatError","","An error which can be returned when parsing a float."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",0],[13,"Infinite","","Positive or negative infinity",0],[13,"Zero","","Positive or negative zero",0],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",0],[13,"Normal","","A regular floating point number",0],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[5,"cast","","Cast from one machine scalar to another."],[5,"from_str_radix","","A utility function that just calls FromStrRadix::from_str_radix."],[8,"Int","","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",1],[10,"one","","Returns the `1` value of this integer type.",1],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",1],[10,"max_value","","Returns the largest value that can be represented by this integer type.",1],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",1],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",1],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",1],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",1],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",1],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",1],[10,"swap_bytes","","Reverses the byte order of the integer.",1],[11,"from_be","","Convert an integer from big endian to the target's endianness.",1],[11,"from_le","","Convert an integer from little endian to the target's endianness.",1],[11,"to_be","","Convert `self` to big endian from the target's endianness.",1],[11,"to_le","","Convert `self` to little endian from the target's endianness.",1],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",1],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",1],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",1],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",1],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",1],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",1],[11,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",1],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",2],[10,"signum","","Returns a number representing sign of `self`.",2],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",2],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",2],[8,"UnsignedInt","","A built-in unsigned integer."],[11,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",3],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",3],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",3],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[11,"to_int","","Converts the value of `self` to an `int`.",4],[11,"to_i8","","Converts the value of `self` to an `i8`.",4],[11,"to_i16","","Converts the value of `self` to an `i16`.",4],[11,"to_i32","","Converts the value of `self` to an `i32`.",4],[10,"to_i64","","Converts the value of `self` to an `i64`.",4],[11,"to_uint","","Converts the value of `self` to an `uint`.",4],[11,"to_u8","","Converts the value of `self` to an `u8`.",4],[11,"to_u16","","Converts the value of `self` to an `u16`.",4],[11,"to_u32","","Converts the value of `self` to an `u32`.",4],[10,"to_u64","","Converts the value of `self` to an `u64`.",4],[11,"to_f32","","Converts the value of `self` to an `f32`.",4],[11,"to_f64","","Converts the value of `self` to an `f64`.",4],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[11,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",5],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",5],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",6],[8,"Float","","A built-in floating point number."],[10,"nan","","Returns the NaN value.",7],[10,"infinity","","Returns the infinite value.",7],[10,"neg_infinity","","Returns the negative infinite value.",7],[10,"zero","","Returns the `0` value.",7],[10,"neg_zero","","Returns -0.0.",7],[10,"one","","Returns the `1` value.",7],[10,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",7],[10,"digits","","Returns the number of base-10 digits of precision that this type supports.",7],[10,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",7],[10,"min_exp","","Returns the minimum binary exponent that this type can represent.",7],[10,"max_exp","","Returns the maximum binary exponent that this type can represent.",7],[10,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",7],[10,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",7],[10,"min_value","","Returns the smallest finite value that this type can represent.",7],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",7],[10,"max_value","","Returns the largest finite value that this type can represent.",7],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",7],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",7],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",7],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",7],[10,"classify","","Returns the category that this number falls into.",7],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",7],[10,"floor","","Return the largest integer less than or equal to a number.",7],[10,"ceil","","Return the smallest integer greater than or equal to a number.",7],[10,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",7],[10,"trunc","","Return the integer part of a number.",7],[10,"fract","","Return the fractional part of a number.",7],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",7],[10,"signum","","Returns a number that represents the sign of `self`.",7],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",7],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",7],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",7],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",7],[10,"powi","","Raise a number to an integer power.",7],[10,"powf","","Raise a number to a floating point power.",7],[10,"sqrt","","Take the square root of a number.",7],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",7],[10,"exp","","Returns `e^(self)`, (the exponential function).",7],[10,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",7],[10,"ln","","Returns the natural logarithm of the number.",7],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",7],[10,"log2","","Returns the base 2 logarithm of the number.",7],[10,"log10","","Returns the base 10 logarithm of the number.",7],[10,"to_degrees","","Convert radians to degrees.",7],[10,"to_radians","","Convert degrees to radians.",7],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","core::num::FromStrRadix",""],[10,"from_str_radix","core::num","",8],[11,"fmt","","",0],[11,"eq","","",0],[11,"ne","","",0],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"fmt","","",9],[11,"fmt","","",9],[11,"description","","",9],[11,"eq","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"fmt","","",10],[11,"fmt","","",10],[11,"description","","",10],[0,"prelude","core","The core prelude"],[0,"intrinsics","","rustc compiler intrinsics."],[3,"TyDesc","core::intrinsics",""],[12,"size","","",11],[12,"align","","",11],[12,"drop_glue","","",11],[12,"name","","",11],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if a type requires drop glue."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[6,"GlueFn","",""],[0,"mem","core","Basic functions for dealing with memory"],[5,"size_of","core::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[0,"nonzero","core","Exposes the NonZero lang item which provides optimization hints."],[3,"NonZero","core::nonzero","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations."],[8,"Zeroable","","Unsafe trait to indicate what types are usable with the NonZero struct"],[11,"hash","","",12],[11,"fmt","","",12],[11,"partial_cmp","","",12],[11,"lt","","",12],[11,"le","","",12],[11,"gt","","",12],[11,"ge","","",12],[11,"cmp","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",12],[6,"Target","",""],[11,"deref","","",12],[0,"ptr","core","Operations on unsafe pointers, `*const T`, and `*mut T`."],[3,"Unique","core::ptr","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a\nraw `*mut T` (which conveys no particular ownership semantics).\nUseful for building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"null","","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without dropping it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","core::ptr::PtrExt",""],[10,"is_null","core::ptr","Returns true if the pointer is null.",13],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",13],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",13],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","core::ptr::MutPtrExt",""],[10,"as_mut","core::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",14],[6,"Target","",""],[6,"Target","",""],[6,"Target","",""],[11,"null","","Returns a null Unique.",15],[11,"offset","","Return an (unsafe) pointer into the memory owned by `self`.",15],[0,"marker","core","Primitive traits and marker types representing basic 'kinds' of types."],[3,"CovariantType","core::marker","A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."],[3,"ContravariantType","","A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."],[3,"InvariantType","","A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."],[3,"CovariantLifetime","","As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."],[3,"ContravariantLifetime","","As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."],[3,"InvariantLifetime","","As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."],[3,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[8,"Send","","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[11,"cmp","","",16],[11,"partial_cmp","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"cmp","","",17],[11,"partial_cmp","","",17],[11,"lt","","",17],[11,"le","","",17],[11,"gt","","",17],[11,"ge","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"cmp","","",18],[11,"partial_cmp","","",18],[11,"lt","","",18],[11,"le","","",18],[11,"gt","","",18],[11,"ge","","",18],[11,"eq","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"cmp","","",19],[11,"partial_cmp","","",19],[11,"lt","","",19],[11,"le","","",19],[11,"gt","","",19],[11,"ge","","",19],[11,"eq","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"cmp","","",21],[11,"partial_cmp","","",21],[11,"lt","","",21],[11,"le","","",21],[11,"gt","","",21],[11,"ge","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"cmp","","",22],[11,"partial_cmp","","",22],[11,"lt","","",22],[11,"le","","",22],[11,"gt","","",22],[11,"ge","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"cmp","","",23],[11,"partial_cmp","","",23],[11,"lt","","",23],[11,"le","","",23],[11,"gt","","",23],[11,"ge","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[0,"ops","core","Overloadable operators"],[3,"RangeFull","core::ops","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",24],[12,"end","","The upper bound of the range (exclusive).",24],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",25],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",26],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",27],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","core::ops::Add",""],[10,"add","core::ops","The method for the `+` operator",28],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","core::ops::Sub",""],[10,"sub","core::ops","The method for the `-` operator",29],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","core::ops::Mul",""],[10,"mul","core::ops","The method for the `*` operator",30],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","core::ops::Div",""],[10,"div","core::ops","The method for the `/` operator",31],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","core::ops::Rem",""],[10,"rem","core::ops","The method for the `%` operator",32],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","core::ops::Neg",""],[10,"neg","core::ops","The method for the unary `-` operator",33],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","core::ops::Not",""],[10,"not","core::ops","The method for the unary `!` operator",34],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","core::ops::BitAnd",""],[10,"bitand","core::ops","The method for the `&` operator",35],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","core::ops::BitOr",""],[10,"bitor","core::ops","The method for the `|` operator",36],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","core::ops::BitXor",""],[10,"bitxor","core::ops","The method for the `^` operator",37],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","core::ops::Shl",""],[10,"shl","core::ops","The method for the `<<` operator",38],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","core::ops::Shr",""],[10,"shr","core::ops","The method for the `>>` operator",39],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","core::ops::Index",""],[10,"index","core::ops","The method for the indexing (`Foo[Bar]`) operation",40],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[16,"Output","core::ops::IndexMut",""],[10,"index_mut","core::ops","The method for the indexing (`Foo[Bar]`) operation",41],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","core::ops::Deref",""],[10,"deref","core::ops","The method called to dereference a value",42],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",43],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","core::ops::Fn",""],[10,"call","core::ops","This is called when the call operator is used.",44],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","core::ops::FnMut",""],[10,"call_mut","core::ops","This is called when the call operator is used.",45],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","core::ops::FnOnce",""],[10,"call_once","core::ops","This is called when the call operator is used.",46],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","","",47],[11,"ne","","",47],[11,"clone","","",47],[11,"fmt","","",47],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",24],[11,"eq","","",25],[11,"ne","","",25],[11,"clone","","",25],[11,"fmt","","",25],[11,"eq","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"fmt","","",26],[6,"Target","",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[0,"cmp","core","Defines the `PartialOrd` and `PartialEq` comparison traits."],[4,"Ordering","core::cmp","An ordering is, e.g, a result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",48],[13,"Equal","","An ordering where a compared value is equal [to another].",48],[13,"Greater","","An ordering where a compared value is greater [than another].",48],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",49],[11,"ne","","This method tests for `!=`.",49],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[8,"Ord","","Trait for types that form a [total order](\nhttps://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an ordering between `self` and `other` values.",50],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values\nif one exists.",51],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",51],[11,"le","","This method tests less than or equal to (`<=`).",51],[11,"gt","","This method tests greater than (`>`).",51],[11,"ge","","This method tests greater than or equal to (`>=`).",51],[11,"fmt","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",48],[11,"cmp","","",48],[11,"partial_cmp","","",48],[0,"clone","core","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","core::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",52],[11,"clone_from","","Perform copy-assignment from `source`.",52],[0,"default","core","The `Default` trait for types which may have meaningful default values."],[8,"Default","core::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",53],[0,"any","core","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[3,"TypeId","core::any","A `TypeId` represents a globally unique identifier for a type."],[8,"Any","","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",54],[11,"is","core","Returns true if the boxed type is the same as `T`",54],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",54],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",54],[11,"hash","core::any","",55],[11,"fmt","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",55],[0,"atomic","core","Atomic types"],[3,"AtomicBool","core::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",56],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",56],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",56],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",56],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",56],[5,"fence","","An atomic fence."],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[11,"new","","Creates a new `AtomicBool`.",57],[11,"load","","Loads a value from the bool.",57],[11,"store","","Stores a value into the bool.",57],[11,"swap","","Stores a value into the bool, returning the old value.",57],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",57],[11,"fetch_and","","Logical \"and\" with a boolean value.",57],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",57],[11,"fetch_or","","Logical \"or\" with a boolean value.",57],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",57],[11,"new","","Creates a new `AtomicIsize`.",58],[11,"load","","Loads a value from the isize.",58],[11,"store","","Stores a value into the isize.",58],[11,"swap","","Stores a value into the isize, returning the old value.",58],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",58],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",58],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",58],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",58],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",58],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",58],[11,"new","","Creates a new `AtomicUsize`.",59],[11,"load","","Loads a value from the usize.",59],[11,"store","","Stores a value into the usize.",59],[11,"swap","","Stores a value into the usize, returning the old value.",59],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",59],[11,"fetch_add","","Add to the current usize, returning the previous value.",59],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",59],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",59],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",59],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",59],[11,"new","","Creates a new `AtomicPtr`.",60],[11,"load","","Loads a value from the pointer.",60],[11,"store","","Stores a value into the pointer.",60],[11,"swap","","Stores a value into the pointer, returning the old value.",60],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",60],[11,"new","","",61],[11,"load","","",61],[11,"store","","",61],[11,"swap","","",61],[11,"compare_and_swap","","",61],[11,"fetch_add","","",61],[11,"fetch_sub","","",61],[11,"fetch_and","","",61],[11,"fetch_or","","",61],[11,"fetch_xor","","",61],[11,"new","","",62],[11,"load","","",62],[11,"store","","",62],[11,"swap","","",62],[11,"compare_and_swap","","",62],[11,"fetch_add","","",62],[11,"fetch_sub","","",62],[11,"fetch_and","","",62],[11,"fetch_or","","",62],[11,"fetch_xor","","",62],[0,"borrow","core","A module for working with borrowed data."],[4,"Cow","core::borrow","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",63],[13,"Owned","","Owned data.",63],[8,"BorrowFrom","","A trait for borrowing data."],[10,"borrow_from","","Immutably borrow from an owned value.",64],[8,"BorrowFromMut","","A trait for mutably borrowing data."],[10,"borrow_from_mut","","Mutably borrow from an owned value.",65],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",66],[8,"ToOwned","","A generalization of Clone to borrowed data."],[10,"to_owned","","Create owned data from borrowed data, usually by copying.",67],[11,"into_cow","","",63],[11,"clone","","",63],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",63],[11,"into_owned","","Extract the owned data.",63],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",63],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",63],[6,"Target","",""],[11,"deref","","",63],[11,"cmp","","",63],[11,"eq","","",63],[11,"partial_cmp","","",63],[11,"fmt","","",63],[11,"fmt","","",63],[0,"cell","core","Shareable mutable containers."],[3,"Cell","core::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",68],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",69],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",69],[13,"Unused","","There are no outstanding borrows on this cell.",69],[5,"clone_ref","","Copy a `Ref`."],[11,"new","","Creates a new `Cell` containing the given value.",70],[11,"get","","Returns a copy of the contained value.",70],[11,"set","","Sets the contained value.",70],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",70],[11,"clone","","",70],[11,"default","","",70],[11,"eq","","",70],[11,"fmt","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"new","","Creates a new `RefCell` containing `value`.",71],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",71],[11,"borrow_state","","Query the current state of this `RefCell`",71],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",71],[11,"borrow","","Immutably borrows the wrapped value.",71],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",71],[11,"borrow_mut","","Mutably borrows the wrapped value.",71],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",71],[11,"clone","","",71],[11,"default","","",71],[11,"eq","","",71],[6,"Target","",""],[11,"deref","","",72],[6,"Target","",""],[11,"deref","","",73],[11,"deref_mut","","",73],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",68],[11,"get","","Gets a mutable pointer to the wrapped value.",68],[11,"into_inner","","Unwraps the value",68],[0,"char","core","Character manipulation."],[3,"EscapeUnicode","core::char","An iterator over the characters that represent a `char`, as escaped by\nRust's unicode escaping rules."],[3,"EscapeDefault","","An iterator over the characters that represent a `char`, escaped\nfor maximum portability."],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"from_digit","","Converts a number to the character representing it."],[5,"encode_utf8_raw","","Encodes a raw u32 value as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written."],[5,"encode_utf16_raw","","Encodes a raw u32 value as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written."],[17,"MAX","","The highest valid code point"],[8,"CharExt","","Basic `char` manipulations."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",74],[10,"to_digit","","Converts a character to the corresponding digit.",74],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape of a character, as `char`s.",74],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",74],[10,"len_utf8","","Returns the number of bytes this character would need if encoded in UTF-8.",74],[10,"len_utf16","","Returns the number of bytes this character would need if encoded in UTF-16.",74],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer, and then returns the number\nof bytes written.",74],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer, and then returns the\nnumber of `u16`s written.",74],[11,"clone","","",75],[6,"Item","",""],[11,"next","","",75],[11,"clone","","",76],[6,"Item","",""],[11,"next","","",76],[0,"panicking","core","Panic support for libcore"],[5,"panic","core::panicking",""],[5,"panic_fmt","",""],[0,"finally","core","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[5,"try_finally","core::finally","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[8,"Finally","","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",77],[0,"iter","core","Composable external iterators"],[3,"Rev","core::iter","An double-ended iterator with the direction inverted"],[3,"ByRef","","A mutable reference to an iterator"],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",78],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",79],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[3,"Range","","An iterator over the range [start, stop)"],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"Repeat","","An iterator that repeats an element endlessly"],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",80],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",80],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",80],[5,"count","","Creates a new counter with the specified start/step"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","core::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[6,"Iterate","core::iter","An iterator that repeatedly applies a given function, starting\nfrom a given seed value."],[8,"Iterator","","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","core::iter::Iterator",""],[10,"next","core::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",81],[11,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",81],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from an external iterator.",82],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Iter","core::iter::IntoIterator",""],[10,"into_iter","core::iter","Consumes `Self` and returns an iterator over it",83],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",84],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[11,"count","","Counts the number of elements in this iterator.",85],[11,"last","","Loops through the entire iterator, returning the last element of the\niterator.",85],[11,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",85],[11,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",85],[11,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",85],[11,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",85],[11,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yieled are those that\nmake the predicate evaluate to `true`.",85],[11,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",85],[11,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",85],[11,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",85],[11,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",85],[11,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",85],[11,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",85],[11,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",85],[11,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",85],[11,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",85],[11,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",85],[11,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",85],[11,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",85],[11,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",85],[11,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",85],[11,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",85],[11,"all","","Tests whether the predicate holds true for all elements in the iterator.",85],[11,"any","","Tests whether any element of an iterator satisfies the specified predicate.",85],[11,"find","","Returns the first element satisfying the specified predicate.",85],[11,"position","","Return the index of the first element satisfying the specified predicate",85],[11,"rposition","","Return the index of the last element satisfying the specified predicate",85],[11,"max","","Consumes the entire iterator to return the maximum element.",85],[11,"min","","Consumes the entire iterator to return the minimum element.",85],[11,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",85],[11,"max_by","","Return the element that gives the maximum value from the\nspecified function.",85],[11,"min_by","","Return the element that gives the minimum value from the\nspecified function.",85],[11,"rev","","Change the direction of the iterator",85],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",85],[11,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",85],[11,"cycle","","Repeats an iterator endlessly",85],[11,"reverse_in_place","","Use an iterator to reverse a container in place.",85],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the range is empty.",86],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",87],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",87],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[11,"len","","Return the exact length of the iterator.",88],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",89],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",90],[6,"Item","",""],[6,"Iter","",""],[11,"clone","","",91],[6,"Item","",""],[11,"next","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"indexable","","",91],[11,"idx","","",91],[6,"Item","",""],[11,"next","","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"fmt","","",80],[11,"eq","","",80],[11,"ne","","",80],[11,"clone","","",80],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",80],[11,"clone","","",93],[6,"Item","",""],[11,"next","","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"clone","","",94],[6,"Item","",""],[11,"next","","",94],[11,"size_hint","","",94],[11,"indexable","","",94],[11,"idx","","",94],[11,"clone","","",95],[6,"Item","",""],[11,"next","","",95],[11,"size_hint","","",95],[11,"next_back","","",95],[11,"indexable","","",95],[11,"idx","","",95],[11,"clone","","",96],[6,"Item","",""],[11,"next","","",96],[11,"size_hint","","",96],[11,"next_back","","",96],[11,"indexable","","",96],[11,"idx","","",96],[11,"clone","","",97],[6,"Item","",""],[11,"next","","",97],[11,"size_hint","","",97],[11,"next_back","","",97],[11,"indexable","","",97],[11,"idx","","",97],[11,"clone","","",98],[6,"Item","",""],[11,"next","","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"clone","","",99],[6,"Item","",""],[11,"next","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"clone","","",100],[6,"Item","",""],[11,"next","","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"indexable","","",100],[11,"idx","","",100],[11,"clone","","",101],[6,"Item","",""],[11,"next","","",101],[11,"size_hint","","",101],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",101],[11,"is_empty","","Check whether peekable iterator is empty or not.",101],[11,"clone","","",102],[6,"Item","",""],[11,"next","","",102],[11,"size_hint","","",102],[11,"clone","","",103],[6,"Item","",""],[11,"next","","",103],[11,"size_hint","","",103],[11,"clone","","",104],[6,"Item","",""],[11,"next","","",104],[11,"size_hint","","",104],[11,"indexable","","",104],[11,"idx","","",104],[11,"clone","","",105],[6,"Item","",""],[11,"next","","",105],[11,"size_hint","","",105],[11,"indexable","","",105],[11,"idx","","",105],[11,"clone","","",78],[6,"Item","",""],[11,"next","","",78],[11,"size_hint","","",78],[11,"clone","","",106],[6,"Item","",""],[11,"next","","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[11,"clone","","",107],[6,"Item","",""],[11,"next","","",107],[11,"size_hint","","",107],[11,"next_back","","",107],[11,"indexable","","",107],[11,"idx","","",107],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",107],[11,"clone","","",108],[6,"Item","",""],[11,"next","","",108],[11,"size_hint","","",108],[11,"next_back","","",108],[11,"indexable","","",108],[11,"idx","","",108],[11,"clone","","",79],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",79],[6,"Item","",""],[11,"next","","",79],[11,"size_hint","","",79],[11,"clone","","",109],[6,"Item","",""],[11,"next","","",109],[11,"size_hint","","",109],[11,"clone","","",110],[6,"Item","",""],[11,"next","","",110],[11,"size_hint","","",110],[11,"next_back","","",110],[11,"clone","","",111],[6,"Item","",""],[11,"next","","",111],[11,"size_hint","","",111],[11,"next_back","","",111],[11,"clone","","",112],[6,"Item","",""],[11,"next","","",112],[11,"clone","","",113],[6,"Item","",""],[11,"next","","",113],[6,"Item","",""],[11,"next","core::ops","",24],[11,"size_hint","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"len","","",24],[11,"next_back","","",24],[6,"Item","core::iter",""],[11,"next","core::ops","",25],[11,"clone","core::iter","",114],[6,"Item","",""],[11,"next","","",114],[11,"size_hint","","",114],[11,"next_back","","",114],[11,"indexable","","",114],[11,"idx","","",114],[0,"option","core","Optional values"],[3,"Iter","core::option","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[4,"Option","","The `Option` type."],[13,"None","","No value",115],[13,"Some","","Some value `T`",115],[11,"hash","","",115],[11,"fmt","","",115],[11,"cmp","","",115],[11,"partial_cmp","","",115],[11,"lt","","",115],[11,"le","","",115],[11,"gt","","",115],[11,"ge","","",115],[11,"eq","","",115],[11,"ne","","",115],[11,"clone","","",115],[11,"is_some","","Returns `true` if the option is a `Some` value",115],[11,"is_none","","Returns `true` if the option is a `None` value",115],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",115],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",115],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",115],[11,"expect","","Unwraps an option, yielding the content of a `Some`",115],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",115],[11,"unwrap_or","","Returns the contained value or a default.",115],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",115],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",115],[11,"map_or","","Applies a function to the contained value or returns a default.",115],[11,"map_or_else","","Applies a function to the contained value or computes a default.",115],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",115],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",115],[11,"iter","","Returns an iterator over the possibly contained value.",115],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",115],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",115],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",115],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",115],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",115],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",115],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",115],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",115],[11,"unwrap_or_default","","Returns the contained value or a default",115],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",115],[11,"default","","",115],[6,"Item","",""],[11,"next","","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"clone","","",116],[6,"Item","",""],[11,"next","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[6,"Item","",""],[11,"next","","",118],[11,"size_hint","","",118],[11,"next_back","","",118],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",115],[0,"raw","core","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","core::raw","The representation of a Rust slice"],[12,"data","","",119],[12,"len","","",119],[3,"Closure","","The representation of a Rust closure"],[12,"code","","",120],[12,"env","","",120],[3,"TraitObject","","The representation of a Rust trait object."],[12,"data","","",121],[12,"vtable","","",121],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[11,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",122],[0,"result","core","Error handling with the `Result` type"],[3,"Iter","core::result","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",123],[13,"Err","","Contains the error value",123],[5,"fold","","Perform a fold operation over the result values from an iterator."],[11,"hash","","",123],[11,"fmt","","",123],[11,"cmp","","",123],[11,"partial_cmp","","",123],[11,"lt","","",123],[11,"le","","",123],[11,"gt","","",123],[11,"ge","","",123],[11,"eq","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"is_ok","","Returns true if the result is `Ok`",123],[11,"is_err","","Returns true if the result is `Err`",123],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",123],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",123],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",123],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",123],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",123],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",123],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",123],[11,"iter","","Returns an iterator over the possibly contained value.",123],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",123],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",123],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",123],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",123],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",123],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",123],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",123],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",123],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",123],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",123],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",123],[6,"Item","",""],[11,"next","","",124],[11,"size_hint","","",124],[11,"next_back","","",124],[11,"clone","","",124],[6,"Item","",""],[11,"next","","",125],[11,"size_hint","","",125],[11,"next_back","","",125],[6,"Item","",""],[11,"next","","",126],[11,"size_hint","","",126],[11,"next_back","","",126],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",123],[0,"simd","core","SIMD vectors."],[3,"i8x16","core::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[11,"fmt","","",127],[11,"fmt","","",128],[11,"fmt","","",129],[11,"fmt","","",130],[11,"fmt","","",131],[11,"fmt","","",132],[11,"fmt","","",133],[11,"fmt","","",134],[11,"fmt","","",135],[11,"fmt","","",136],[0,"slice","core","Slice management and manipulation"],[3,"Iter","core::slice","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[0,"bytes","","Operations on `[u8]`."],[5,"copy_memory","core::slice::bytes","Copies data from `src` to `dst`"],[8,"MutableByteVector","","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",137],[8,"SliceExt","core::slice","Extension methods for slices."],[16,"Item","core::slice::SliceExt",""],[10,"split_at","core::slice","",138],[10,"iter","","",138],[10,"split","","",138],[10,"splitn","","",138],[10,"rsplitn","","",138],[10,"windows","","",138],[10,"chunks","","",138],[10,"get","","",138],[10,"first","","",138],[10,"tail","","",138],[10,"init","","",138],[10,"last","","",138],[10,"get_unchecked","","",138],[10,"as_ptr","","",138],[10,"binary_search_by","","",138],[10,"len","","",138],[11,"is_empty","","",138],[10,"get_mut","","",138],[10,"as_mut_slice","","",138],[10,"iter_mut","","",138],[10,"first_mut","","",138],[10,"tail_mut","","",138],[10,"init_mut","","",138],[10,"last_mut","","",138],[10,"split_mut","","",138],[10,"splitn_mut","","",138],[10,"rsplitn_mut","","",138],[10,"chunks_mut","","",138],[10,"swap","","",138],[10,"split_at_mut","","",138],[10,"reverse","","",138],[10,"get_unchecked_mut","","",138],[10,"as_mut_ptr","","",138],[10,"position_elem","","",138],[10,"rposition_elem","","",138],[10,"contains","","",138],[10,"starts_with","","",138],[10,"ends_with","","",138],[10,"binary_search","","",138],[10,"next_permutation","","",138],[10,"prev_permutation","","",138],[10,"clone_from_slice","","",138],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",139],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",140],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",140],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",140],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",140],[6,"Item","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Output","",""],[11,"index","","",141],[6,"Output","",""],[11,"index","","",141],[6,"Output","",""],[11,"index","","",141],[6,"Output","",""],[11,"index","","",141],[11,"as_slice","","View the underlying data as a subslice of the original data.",141],[6,"Item","",""],[11,"next","","",141],[11,"size_hint","","",141],[11,"next_back","","",141],[11,"clone","","",141],[11,"indexable","","",141],[11,"idx","","",141],[6,"Output","",""],[11,"index","","",142],[6,"Output","",""],[11,"index","","",142],[6,"Output","",""],[11,"index","","",142],[6,"Output","",""],[11,"index","","",142],[6,"Output","",""],[11,"index_mut","","",142],[6,"Output","",""],[11,"index_mut","","",142],[6,"Output","",""],[11,"index_mut","","",142],[6,"Output","",""],[11,"index_mut","","",142],[11,"into_slice","","View the underlying data as a subslice of the original data.",142],[6,"Item","",""],[11,"next","","",142],[11,"size_hint","","",142],[11,"next_back","","",142],[11,"clone","","",143],[6,"Item","",""],[11,"next","","",143],[11,"size_hint","","",143],[11,"next_back","","",143],[6,"Item","",""],[11,"next","","",144],[11,"size_hint","","",144],[11,"next_back","","",144],[6,"Item","",""],[11,"next","","",145],[11,"size_hint","","",145],[6,"Item","",""],[11,"next","","",146],[11,"size_hint","","",146],[6,"Item","",""],[11,"next","","",147],[11,"size_hint","","",147],[6,"Item","",""],[11,"next","","",148],[11,"size_hint","","",148],[11,"clone","","",149],[6,"Item","",""],[11,"next","","",149],[11,"size_hint","","",149],[11,"clone","","",150],[6,"Item","",""],[11,"next","","",150],[11,"size_hint","","",150],[11,"next_back","","",150],[11,"indexable","","",150],[11,"idx","","",150],[6,"Item","",""],[11,"next","","",151],[11,"size_hint","","",151],[11,"next_back","","",151],[0,"str","core","String manipulation"],[3,"ParseBoolError","core::str","An error returned when parsing a `bool` from a string fails."],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",152],[12,"next","","Index of the first byte of the next `char`",152],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",153],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",153],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding)."],[5,"char_range_at_raw","","Pluck a code point out of a UTF-8-like byte slice and return the\nindex of the next code point."],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","core::str::FromStr","The associated error which can be returned from parsing."],[10,"from_str","core::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",154],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",155],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",155],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",156],[8,"StrExt","","Methods for string slices"],[10,"contains","","",157],[10,"contains_char","","",157],[10,"chars","","",157],[10,"bytes","","",157],[10,"char_indices","","",157],[10,"split","","",157],[10,"splitn","","",157],[10,"split_terminator","","",157],[10,"rsplitn","","",157],[10,"match_indices","","",157],[10,"split_str","","",157],[10,"lines","","",157],[10,"lines_any","","",157],[10,"char_len","","",157],[10,"slice_chars","","",157],[10,"slice_unchecked","","",157],[10,"starts_with","","",157],[10,"ends_with","","",157],[10,"trim_matches","","",157],[10,"trim_left_matches","","",157],[10,"trim_right_matches","","",157],[10,"is_char_boundary","","",157],[10,"char_range_at","","",157],[10,"char_range_at_reverse","","",157],[10,"char_at","","",157],[10,"char_at_reverse","","",157],[10,"as_bytes","","",157],[10,"find","","",157],[10,"rfind","","",157],[10,"find_str","","",157],[10,"slice_shift_char","","",157],[10,"subslice_offset","","",157],[10,"as_ptr","","",157],[10,"len","","",157],[10,"is_empty","","",157],[10,"parse","","",157],[6,"Err","",""],[11,"eq","","",158],[11,"ne","","",158],[11,"clone","","",158],[11,"fmt","","",158],[11,"fmt","","",158],[11,"description","","",158],[11,"fmt","","",153],[11,"clone","","",153],[11,"eq","","",153],[11,"ne","","",153],[11,"description","","",153],[11,"fmt","","",153],[11,"clone","","",159],[6,"Item","",""],[11,"next","","",159],[11,"size_hint","","",159],[11,"next_back","","",159],[11,"clone","","",160],[6,"Item","",""],[11,"next","","",160],[11,"size_hint","","",160],[11,"next_back","","",160],[11,"clone","","",161],[6,"Item","",""],[11,"next","","",161],[11,"size_hint","","",161],[11,"next_back","","",161],[11,"len","","",161],[11,"clone","","",162],[11,"clone","","",163],[6,"Item","",""],[11,"next","","",162],[6,"Item","",""],[11,"next","","",163],[11,"clone","","",164],[6,"Item","",""],[11,"next","","",164],[11,"size_hint","","",164],[11,"next_back","","",164],[11,"clone","","",165],[6,"Item","",""],[11,"next","","",165],[11,"size_hint","","",165],[11,"next_back","","",165],[11,"clone","","",166],[6,"Item","",""],[11,"next","","",166],[11,"size_hint","","",166],[11,"clone","","",167],[6,"Item","",""],[11,"next","","",167],[11,"size_hint","","",167],[6,"Item","",""],[11,"next","","",168],[11,"size_hint","","",168],[11,"next_back","","",168],[6,"Item","",""],[11,"next","","",169],[11,"size_hint","","",169],[11,"next_back","","",169],[0,"hash","core","Generic hashing support."],[3,"SipHasher","core::hash","An implementation of SipHash 2-4."],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",170],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",170],[11,"result","","Returns the computed hash.",170],[11,"write","","",170],[11,"reset","","",170],[11,"finish","","",170],[11,"clone","","",170],[11,"default","","",170],[8,"Hash","","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",171],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[16,"Output","core::hash::Hasher","Result type of one run of hashing generated by this hasher."],[10,"reset","core::hash","Resets this hasher back to its initial state (as if it were just\ncreated).",172],[10,"finish","","Completes a round of hashing, producing the output hash generated.",172],[8,"Writer","","A common bound on the `Hasher` parameter to `Hash` implementations in order\nto generically hash an aggregate."],[10,"write","","",173],[11,"hash","core::borrow","",63],[0,"fmt","core","Utilities for formatting and printing strings"],[3,"Radix","core::fmt","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[11,"eq","","",174],[11,"ne","","",174],[11,"clone","","",174],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[11,"fmt","","",175],[6,"Result","","The type returned by formatter methods."],[8,"Writer","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",176],[11,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",176],[8,"Show","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",177],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",178],[8,"String","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",179],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",180],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",181],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",182],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",183],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",184],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",185],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",186],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",187],[11,"fmt","","",188],[11,"fmt","","",189],[11,"fmt","","",189],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",190],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",190],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",190],[11,"write_fmt","","Writes some formatted information into this instance",190],[11,"flags","","Flags for formatting (packed version of rt::Flag)",190],[11,"fill","","Character used as 'fill' whenever there is alignment",190],[11,"align","","Flag indicating what form of alignment was requested",190],[11,"width","","Optionally specified integer width that the output should be",190],[11,"precision","","Optionally specified precision for numeric types",190],[11,"fmt","","",188],[11,"fmt","core::cell","",70],[11,"fmt","","",71],[11,"fmt","","",72],[11,"fmt","","",73],[0,"error","core","Traits for working with Errors."],[8,"Error","core::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",191],[11,"cause","","The lower-level cause of this error, if any.",191],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",192],[14,"panic!","core","Entry point of task panic, for details, see std::macros"],[14,"assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"try!","","Short circuiting evaluation on Err"],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"char","","Character manipulation."],[15,"slice","","Slice management and manipulation"],[15,"str","","String manipulation"]],"paths":[[4,"FpCategory"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[8,"FromStrRadix"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"TyDesc"],[3,"NonZero"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Unique"],[3,"CovariantType"],[3,"ContravariantType"],[3,"InvariantType"],[3,"CovariantLifetime"],[3,"ContravariantLifetime"],[3,"InvariantLifetime"],[3,"NoCopy"],[3,"Managed"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[3,"RangeFull"],[4,"Ordering"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Clone"],[8,"Default"],[8,"Any"],[3,"TypeId"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[4,"Cow"],[8,"BorrowFrom"],[8,"BorrowFromMut"],[8,"IntoCow"],[8,"ToOwned"],[3,"UnsafeCell"],[4,"BorrowState"],[3,"Cell"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[8,"CharExt"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[8,"Finally"],[3,"Scan"],[3,"Unfold"],[4,"MinMaxResult"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[3,"Rev"],[3,"ByRef"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"AsSlice"],[8,"IntSliceExt"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"CharRange"],[4,"Utf8Error"],[8,"FromStr"],[8,"CharEq"],[8,"Str"],[8,"StrExt"],[3,"ParseBoolError"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[8,"Hash"],[8,"Hasher"],[8,"Writer"],[3,"Radix"],[3,"RadixFmt"],[8,"Writer"],[8,"Show"],[8,"Debug"],[8,"String"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Error"],[8,"FromError"]]};

searchIndex['graphviz'] = {"items":[[0,"","graphviz","Generate files suitable for use with [Graphviz](http://www.graphviz.org/)"],[3,"Id","","`Id` is a Graphviz `ID`."],[4,"LabelText","","The text for a graphviz label on a node or edge."],[13,"LabelStr","","This kind of label preserves the text directly as is.",0],[13,"EscStr","","This kind of label uses the graphviz label escString type:\nhttp://www.graphviz.org/content/attrs#kescString",0],[4,"RenderOption","",""],[13,"NoEdgeLabels","","",1],[13,"NoNodeLabels","","",1],[5,"default_options","","Returns vec holding all the default render options."],[5,"render","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Simple wrapper around `render_opts` that passes a default set of options.)"],[5,"render_opts","","Renders directed graph `g` into the writer `w` in DOT syntax.\n(Main entry point for the library.)"],[0,"maybe_owned_vec","",""],[4,"MaybeOwnedVector","graphviz::maybe_owned_vec","MaybeOwnedVector<'a,T> abstracts over `Vec<T>`, `&'a [T]`."],[13,"Growable","","",2],[13,"Borrowed","","",2],[8,"IntoMaybeOwnedVector","","Trait for moving into a `MaybeOwnedVector`"],[10,"into_maybe_owned","","Moves self into a `MaybeOwnedVector`",3],[11,"into_maybe_owned","collections::vec","",4],[11,"iter","graphviz::maybe_owned_vec","",2],[11,"len","","",2],[11,"is_empty","","",2],[11,"eq","","",2],[11,"partial_cmp","","",2],[11,"cmp","","",2],[11,"as_slice","","",2],[11,"from_iter","","",2],[11,"fmt","","",2],[11,"clone","","",2],[11,"default","","",2],[11,"container_as_bytes","","",2],[11,"into_vec","","Convert `self` into a growable `Vec`, not making a copy if possible.",2],[6,"Nodes","graphviz",""],[6,"Edges","",""],[8,"Labeller","","Each instance of a type that implements `Label<C>` maps to a\nunique identifier with respect to `C`, which is used to identify\nit in the generated .dot file. They can also provide more\nelaborate (and non-unique) label text that is used in the graphviz\nrendered output.\nThe graph instance is responsible for providing the DOT compatible\nidentifiers for the nodes and (optionally) rendered labels for the nodes and\nedges, as well as an identifier for the graph itself."],[10,"graph_id","","Must return a DOT compatible identifier naming the graph.",5],[10,"node_id","","Maps `n` to a unique identifier with respect to `self`. The\nimplementer is responsible for ensuring that the returned name\nis a valid DOT identifier.",5],[11,"node_label","","Maps `n` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is just the output from `node_id`.",5],[11,"edge_label","","Maps `e` to a label that will be used in the rendered output.\nThe label need not be unique, and may be the empty string; the\ndefault is in fact the empty string.",5],[8,"GraphWalk","","GraphWalk is an abstraction over a directed graph = (nodes,edges)\nmade up of node handles `N` and edge handles `E`, where each `E`\ncan be mapped to its source and target nodes."],[10,"nodes","","Returns all the nodes in this graph.",6],[10,"edges","","Returns all of the edges in this graph.",6],[10,"source","","The source node for `edge`.",6],[10,"target","","The target node for `edge`.",6],[11,"new","","Creates an `Id` named `name`.",7],[11,"as_slice","","",7],[11,"name","","",7],[11,"label","","",0],[11,"escaped","","",0],[11,"escape","","Renders text as string suitable for a label in a .dot file.",0],[11,"prefix_line","","Puts `prefix` on a line above this label, with a blank line separator.",0],[11,"suffix_line","","Puts `suffix` on a line below this label, with a blank line separator.",0],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1]],"paths":[[4,"LabelText"],[4,"RenderOption"],[4,"MaybeOwnedVector"],[8,"IntoMaybeOwnedVector"],[3,"Vec"],[8,"Labeller"],[8,"GraphWalk"],[3,"Id"]]};

searchIndex['rand'] = {"items":[[0,"","rand","Interface to random number generators in Rust."],[3,"Generator","","Iterator which will generate a stream of random items."],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[0,"distributions","","Sampling from random distributions."],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",0],[12,"item","","The actual item which is being weighted",0],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[0,"range","","Generating numbers between two others."],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2],[11,"sample","","",2],[11,"ind_sample","","",2],[0,"gamma","rand::distributions","The Gamma and derived distributions."],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3],[11,"sample","","",3],[11,"ind_sample","","",3],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4],[11,"sample","","",4],[11,"ind_sample","","",4],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5],[11,"sample","","",5],[11,"ind_sample","","",5],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6],[11,"sample","","",6],[11,"ind_sample","","",6],[0,"normal","rand::distributions","The normal and derived distributions."],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[11,"rand","","",7],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8],[11,"sample","","",8],[11,"ind_sample","","",8],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9],[11,"sample","","",9],[11,"ind_sample","","",9],[0,"exponential","rand::distributions","The exponential distribution."],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[11,"rand","","",10],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11],[11,"sample","","",11],[11,"ind_sample","","",11],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",13],[11,"sample","","",14],[11,"ind_sample","","",14],[11,"new","","Create a new `WeightedChoice`.",15],[11,"sample","","",15],[11,"ind_sample","","",15],[0,"isaac","rand","The ISAAC random number generator."],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16],[11,"clone","","",16],[11,"next_u32","","",16],[11,"reseed","","",16],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16],[11,"rand","","",16],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17],[11,"clone","","",17],[11,"next_u32","","",17],[11,"next_u64","","",17],[11,"reseed","","",17],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17],[11,"rand","","",17],[0,"chacha","rand","The ChaCha random number generator."],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1]."],[11,"clone","","",18],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18],[11,"next_u32","","",18],[11,"reseed","","",18],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18],[11,"rand","","",18],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",20],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19],[11,"next_u32","","",19],[11,"next_u64","","",19],[11,"fill_bytes","","",19],[11,"reseed","","",19],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19],[11,"reseed","","",21],[11,"default","","",21],[11,"rand","rand","",22],[11,"rand","","",23],[11,"rand","","",22],[11,"rand","","",23],[11,"rand","core::option","",24],[11,"is_some","","Returns `true` if the option is a `Some` value",24],[11,"is_none","","Returns `true` if the option is a `None` value",24],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",24],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",24],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",24],[11,"expect","","Unwraps an option, yielding the content of a `Some`",24],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",24],[11,"unwrap_or","","Returns the contained value or a default.",24],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",24],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",24],[11,"map_or","","Applies a function to the contained value or returns a default.",24],[11,"map_or_else","","Applies a function to the contained value or computes a default.",24],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",24],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",24],[11,"iter","","Returns an iterator over the possibly contained value.",24],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",24],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",24],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",24],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",24],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",24],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",24],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",24],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",24],[11,"unwrap_or_default","","Returns the contained value or a default",24],[11,"fmt","core::num","",25],[11,"eq","","",25],[11,"ne","","",25],[11,"ne","","",25],[11,"eq","","",26],[11,"ne","","",26],[11,"ne","","",26],[11,"clone","","",26],[11,"clone_from","","",26],[11,"fmt","","",26],[11,"eq","","",27],[11,"ne","","",27],[11,"ne","","",27],[11,"clone","","",27],[11,"clone_from","","",27],[11,"fmt","","",27],[11,"fmt","","",26],[11,"description","","",26],[11,"cause","","",26],[11,"eq","","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"clone_from","","",28],[11,"fmt","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"clone_from","","",29],[11,"fmt","","",29],[11,"fmt","","",28],[11,"description","","",28],[11,"cause","","",28],[11,"hash","core::nonzero","",30],[11,"fmt","","",30],[11,"partial_cmp","","",30],[11,"lt","","",30],[11,"le","","",30],[11,"gt","","",30],[11,"ge","","",30],[11,"lt","","",30],[11,"le","","",30],[11,"gt","","",30],[11,"ge","","",30],[11,"cmp","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"ne","","",30],[11,"assert_receiver_is_total_eq","","",30],[11,"clone","","",30],[11,"clone_from","","",30],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",30],[11,"deref","","",30],[11,"null","core::ptr","Returns a null Unique.",31],[11,"offset","","Return an (unsafe) pointer into the memory owned by `self`.",31],[11,"cmp","core::marker","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"assert_receiver_is_total_eq","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"ne","","",32],[11,"clone","","",32],[11,"clone_from","","",32],[11,"cmp","","",33],[11,"partial_cmp","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"lt","","",33],[11,"le","","",33],[11,"gt","","",33],[11,"ge","","",33],[11,"assert_receiver_is_total_eq","","",33],[11,"eq","","",33],[11,"ne","","",33],[11,"ne","","",33],[11,"clone","","",33],[11,"clone_from","","",33],[11,"cmp","","",34],[11,"partial_cmp","","",34],[11,"lt","","",34],[11,"le","","",34],[11,"gt","","",34],[11,"ge","","",34],[11,"lt","","",34],[11,"le","","",34],[11,"gt","","",34],[11,"ge","","",34],[11,"assert_receiver_is_total_eq","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"clone_from","","",34],[11,"cmp","","",35],[11,"partial_cmp","","",35],[11,"lt","","",35],[11,"le","","",35],[11,"gt","","",35],[11,"ge","","",35],[11,"lt","","",35],[11,"le","","",35],[11,"gt","","",35],[11,"ge","","",35],[11,"assert_receiver_is_total_eq","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"clone_from","","",35],[11,"cmp","","",36],[11,"partial_cmp","","",36],[11,"lt","","",36],[11,"le","","",36],[11,"gt","","",36],[11,"ge","","",36],[11,"lt","","",36],[11,"le","","",36],[11,"gt","","",36],[11,"ge","","",36],[11,"assert_receiver_is_total_eq","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"clone_from","","",36],[11,"cmp","","",37],[11,"partial_cmp","","",37],[11,"lt","","",37],[11,"le","","",37],[11,"gt","","",37],[11,"ge","","",37],[11,"lt","","",37],[11,"le","","",37],[11,"gt","","",37],[11,"ge","","",37],[11,"assert_receiver_is_total_eq","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"clone_from","","",37],[11,"cmp","","",38],[11,"partial_cmp","","",38],[11,"lt","","",38],[11,"le","","",38],[11,"gt","","",38],[11,"ge","","",38],[11,"lt","","",38],[11,"le","","",38],[11,"gt","","",38],[11,"ge","","",38],[11,"assert_receiver_is_total_eq","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"clone_from","","",38],[11,"cmp","","",39],[11,"partial_cmp","","",39],[11,"lt","","",39],[11,"le","","",39],[11,"gt","","",39],[11,"ge","","",39],[11,"lt","","",39],[11,"le","","",39],[11,"gt","","",39],[11,"ge","","",39],[11,"assert_receiver_is_total_eq","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"clone_from","","",39],[11,"assert_receiver_is_total_eq","core::ops","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"clone_from","","",40],[11,"fmt","","",40],[11,"assert_receiver_is_total_eq","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"clone_from","","",41],[11,"fmt","","",41],[11,"assert_receiver_is_total_eq","","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"clone_from","","",42],[11,"fmt","","",42],[11,"assert_receiver_is_total_eq","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"clone_from","","",43],[11,"fmt","","",43],[11,"fmt","core::cmp","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"clone_from","","",44],[11,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",44],[11,"assert_receiver_is_total_eq","","",44],[11,"cmp","","",44],[11,"partial_cmp","","",44],[11,"lt","","",44],[11,"le","","",44],[11,"gt","","",44],[11,"ge","","",44],[11,"is","rand::std","Returns true if the boxed type is the same as `T`",45],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",45],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",45],[11,"hash","core::any","",46],[11,"fmt","","",46],[11,"assert_receiver_is_total_eq","","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"clone_from","","",46],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",46],[11,"new","core::atomic","Creates a new `AtomicBool`.",47],[11,"load","","Loads a value from the bool.",47],[11,"store","","Stores a value into the bool.",47],[11,"swap","","Stores a value into the bool, returning the old value.",47],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",47],[11,"fetch_and","","Logical \"and\" with a boolean value.",47],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",47],[11,"fetch_or","","Logical \"or\" with a boolean value.",47],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",47],[11,"new","","Creates a new `AtomicIsize`.",48],[11,"load","","Loads a value from the isize.",48],[11,"store","","Stores a value into the isize.",48],[11,"swap","","Stores a value into the isize, returning the old value.",48],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",48],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",48],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",48],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",48],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",48],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",48],[11,"new","","Creates a new `AtomicUsize`.",49],[11,"load","","Loads a value from the usize.",49],[11,"store","","Stores a value into the usize.",49],[11,"swap","","Stores a value into the usize, returning the old value.",49],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",49],[11,"fetch_add","","Add to the current usize, returning the previous value.",49],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",49],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",49],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",49],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",49],[11,"new","","Creates a new `AtomicPtr`.",50],[11,"load","","Loads a value from the pointer.",50],[11,"store","","Stores a value into the pointer.",50],[11,"swap","","Stores a value into the pointer, returning the old value.",50],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",50],[11,"new","","",51],[11,"load","","",51],[11,"store","","",51],[11,"swap","","",51],[11,"compare_and_swap","","",51],[11,"fetch_add","","",51],[11,"fetch_sub","","",51],[11,"fetch_and","","",51],[11,"fetch_or","","",51],[11,"fetch_xor","","",51],[11,"new","","",52],[11,"load","","",52],[11,"store","","",52],[11,"swap","","",52],[11,"compare_and_swap","","",52],[11,"fetch_add","","",52],[11,"fetch_sub","","",52],[11,"fetch_and","","",52],[11,"fetch_or","","",52],[11,"fetch_xor","","",52],[11,"into_cow","core::borrow","",53],[11,"clone","","",53],[11,"clone_from","","",53],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",53],[11,"into_owned","","Extract the owned data.",53],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",53],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",53],[11,"deref","","",53],[11,"assert_receiver_is_total_eq","","",53],[11,"cmp","","",53],[11,"eq","","",53],[11,"ne","","",53],[11,"partial_cmp","","",53],[11,"lt","","",53],[11,"le","","",53],[11,"gt","","",53],[11,"ge","","",53],[11,"fmt","","",53],[11,"fmt","","",53],[11,"new","core::cell","Creates a new `Cell` containing the given value.",54],[11,"get","","Returns a copy of the contained value.",54],[11,"set","","Sets the contained value.",54],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",54],[11,"clone","","",54],[11,"clone_from","","",54],[11,"default","","",54],[11,"eq","","",54],[11,"ne","","",54],[11,"fmt","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"ne","","",55],[11,"clone","","",55],[11,"clone_from","","",55],[11,"new","","Creates a new `RefCell` containing `value`.",56],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",56],[11,"borrow_state","","Query the current state of this `RefCell`",56],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",56],[11,"borrow","","Immutably borrows the wrapped value.",56],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",56],[11,"borrow_mut","","Mutably borrows the wrapped value.",56],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",56],[11,"clone","","",56],[11,"clone_from","","",56],[11,"default","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"drop","","",57],[11,"clone","","",57],[11,"clone_from","","",57],[11,"deref","","",58],[11,"drop","","",59],[11,"deref","","",60],[11,"deref_mut","","",60],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",61],[11,"get","","Gets a mutable pointer to the wrapped value.",61],[11,"into_inner","","Unwraps the value",61],[11,"clone","core::char","",62],[11,"clone_from","","",62],[11,"clone","","",63],[11,"clone_from","","",63],[11,"next","","",62],[11,"size_hint","","",62],[11,"clone","","",64],[11,"clone_from","","",64],[11,"clone","","",65],[11,"clone_from","","",65],[11,"next","","",64],[11,"size_hint","","",64],[11,"drop","core::finally","",66],[11,"len","core::iter","",67],[11,"len","","",68],[11,"len","","",69],[11,"len","","",70],[11,"len","","",71],[11,"clone","","",69],[11,"clone_from","","",69],[11,"next","","",69],[11,"size_hint","","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"indexable","","",69],[11,"idx","","",69],[11,"next","","",72],[11,"size_hint","","",72],[11,"size_hint","","",72],[11,"next_back","","",72],[11,"len","","",72],[11,"fmt","","",73],[11,"eq","","",73],[11,"ne","","",73],[11,"ne","","",73],[11,"clone","","",73],[11,"clone_from","","",73],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",73],[11,"clone","","",74],[11,"clone_from","","",74],[11,"next","","",74],[11,"size_hint","","",74],[11,"size_hint","","",74],[11,"next_back","","",74],[11,"len","","",74],[11,"clone","","",75],[11,"clone_from","","",75],[11,"next","","",75],[11,"size_hint","","",75],[11,"size_hint","","",75],[11,"indexable","","",75],[11,"idx","","",75],[11,"clone","","",76],[11,"clone_from","","",76],[11,"next","","",76],[11,"size_hint","","",76],[11,"size_hint","","",76],[11,"next_back","","",76],[11,"indexable","","",76],[11,"idx","","",76],[11,"clone","","",71],[11,"clone_from","","",71],[11,"next","","",71],[11,"size_hint","","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"indexable","","",71],[11,"idx","","",71],[11,"clone","","",70],[11,"clone_from","","",70],[11,"next","","",70],[11,"size_hint","","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"indexable","","",70],[11,"idx","","",70],[11,"clone","","",77],[11,"clone_from","","",77],[11,"next","","",77],[11,"size_hint","","",77],[11,"size_hint","","",77],[11,"next_back","","",77],[11,"clone","","",78],[11,"clone_from","","",78],[11,"next","","",78],[11,"size_hint","","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"clone","","",67],[11,"clone_from","","",67],[11,"next","","",67],[11,"size_hint","","",67],[11,"size_hint","","",67],[11,"next_back","","",67],[11,"indexable","","",67],[11,"idx","","",67],[11,"clone","","",79],[11,"clone_from","","",79],[11,"next","","",79],[11,"size_hint","","",79],[11,"size_hint","","",79],[11,"len","","",79],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",79],[11,"is_empty","","Check whether peekable iterator is empty or not.",79],[11,"clone","","",80],[11,"clone_from","","",80],[11,"next","","",80],[11,"size_hint","","",80],[11,"size_hint","","",80],[11,"clone","","",81],[11,"clone_from","","",81],[11,"next","","",81],[11,"size_hint","","",81],[11,"size_hint","","",81],[11,"clone","","",82],[11,"clone_from","","",82],[11,"next","","",82],[11,"size_hint","","",82],[11,"size_hint","","",82],[11,"indexable","","",82],[11,"idx","","",82],[11,"len","","",82],[11,"clone","","",83],[11,"clone_from","","",83],[11,"next","","",83],[11,"size_hint","","",83],[11,"size_hint","","",83],[11,"indexable","","",83],[11,"idx","","",83],[11,"len","","",83],[11,"clone","","",84],[11,"clone_from","","",84],[11,"next","","",84],[11,"size_hint","","",84],[11,"size_hint","","",84],[11,"clone","","",85],[11,"clone_from","","",85],[11,"next","","",85],[11,"size_hint","","",85],[11,"size_hint","","",85],[11,"next_back","","",85],[11,"clone","","",86],[11,"clone_from","","",86],[11,"next","","",86],[11,"size_hint","","",86],[11,"size_hint","","",86],[11,"next_back","","",86],[11,"indexable","","",86],[11,"idx","","",86],[11,"len","","",86],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",86],[11,"clone","","",68],[11,"clone_from","","",68],[11,"next","","",68],[11,"size_hint","","",68],[11,"size_hint","","",68],[11,"next_back","","",68],[11,"indexable","","",68],[11,"idx","","",68],[11,"clone","","",87],[11,"clone_from","","",87],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",87],[11,"next","","",87],[11,"size_hint","","",87],[11,"size_hint","","",87],[11,"clone","","",88],[11,"clone_from","","",88],[11,"next","","",88],[11,"size_hint","","",88],[11,"size_hint","","",88],[11,"clone","","",89],[11,"clone_from","","",89],[11,"next","","",89],[11,"size_hint","","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"clone","","",90],[11,"clone_from","","",90],[11,"next","","",90],[11,"size_hint","","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[11,"clone","","",91],[11,"clone_from","","",91],[11,"next","","",91],[11,"size_hint","","",91],[11,"clone","","",92],[11,"clone_from","","",92],[11,"next","","",92],[11,"size_hint","","",92],[11,"next","core::ops","",41],[11,"size_hint","","",41],[11,"size_hint","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"len","","",41],[11,"next_back","","",41],[11,"next","","",42],[11,"size_hint","","",42],[11,"clone","core::iter","",93],[11,"clone_from","","",93],[11,"next","","",93],[11,"size_hint","","",93],[11,"size_hint","","",93],[11,"next_back","","",93],[11,"indexable","","",93],[11,"idx","","",93],[11,"hash","core::option","",24],[11,"fmt","","",24],[11,"cmp","","",24],[11,"assert_receiver_is_total_eq","","",24],[11,"partial_cmp","","",24],[11,"lt","","",24],[11,"le","","",24],[11,"gt","","",24],[11,"ge","","",24],[11,"lt","","",24],[11,"le","","",24],[11,"gt","","",24],[11,"ge","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"clone_from","","",24],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",24],[11,"default","","",24],[11,"clone","","",94],[11,"clone_from","","",94],[11,"next","","",94],[11,"size_hint","","",94],[11,"size_hint","","",94],[11,"next_back","","",94],[11,"len","","",94],[11,"next","","",95],[11,"size_hint","","",95],[11,"size_hint","","",95],[11,"next_back","","",95],[11,"len","","",95],[11,"clone","","",95],[11,"clone_from","","",95],[11,"next","","",96],[11,"size_hint","","",96],[11,"size_hint","","",96],[11,"next_back","","",96],[11,"len","","",96],[11,"next","","",97],[11,"size_hint","","",97],[11,"size_hint","","",97],[11,"next_back","","",97],[11,"len","","",97],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",24],[11,"hash","core::result","",98],[11,"fmt","","",98],[11,"cmp","","",98],[11,"assert_receiver_is_total_eq","","",98],[11,"partial_cmp","","",98],[11,"lt","","",98],[11,"le","","",98],[11,"gt","","",98],[11,"ge","","",98],[11,"lt","","",98],[11,"le","","",98],[11,"gt","","",98],[11,"ge","","",98],[11,"eq","","",98],[11,"ne","","",98],[11,"ne","","",98],[11,"clone","","",98],[11,"clone_from","","",98],[11,"is_ok","","Returns true if the result is `Ok`",98],[11,"is_err","","Returns true if the result is `Err`",98],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",98],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",98],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",98],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",98],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",98],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",98],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",98],[11,"iter","","Returns an iterator over the possibly contained value.",98],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",98],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",98],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",98],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",98],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",98],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",98],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",98],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",98],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",98],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",98],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",98],[11,"next","","",99],[11,"size_hint","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"len","","",99],[11,"clone","","",99],[11,"clone_from","","",99],[11,"next","","",100],[11,"size_hint","","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"len","","",100],[11,"next","","",101],[11,"size_hint","","",101],[11,"size_hint","","",101],[11,"next_back","","",101],[11,"len","","",101],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",98],[11,"fmt","core::simd","",102],[11,"fmt","","",103],[11,"fmt","","",104],[11,"fmt","","",105],[11,"fmt","","",106],[11,"fmt","","",107],[11,"fmt","","",108],[11,"fmt","","",109],[11,"fmt","","",110],[11,"fmt","","",111],[11,"index","core::slice","",112],[11,"index","","",112],[11,"index","","",112],[11,"index","","",112],[11,"as_slice","","View the underlying data as a subslice of the original data.",112],[11,"next","","",112],[11,"size_hint","","",112],[11,"size_hint","","",112],[11,"next_back","","",112],[11,"len","","",112],[11,"clone","","",112],[11,"clone_from","","",112],[11,"indexable","","",112],[11,"idx","","",112],[11,"index","","",113],[11,"index","","",113],[11,"index","","",113],[11,"index","","",113],[11,"index_mut","","",113],[11,"index_mut","","",113],[11,"index_mut","","",113],[11,"index_mut","","",113],[11,"into_slice","","View the underlying data as a subslice of the original data.",113],[11,"next","","",113],[11,"size_hint","","",113],[11,"size_hint","","",113],[11,"next_back","","",113],[11,"len","","",113],[11,"clone","","",114],[11,"clone_from","","",114],[11,"next","","",114],[11,"size_hint","","",114],[11,"size_hint","","",114],[11,"next_back","","",114],[11,"finish","","",114],[11,"finish","","",115],[11,"next","","",115],[11,"size_hint","","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[11,"next","","",116],[11,"size_hint","","",116],[11,"size_hint","","",116],[11,"next","","",117],[11,"size_hint","","",117],[11,"size_hint","","",117],[11,"next","","",118],[11,"size_hint","","",118],[11,"size_hint","","",118],[11,"next","","",119],[11,"size_hint","","",119],[11,"size_hint","","",119],[11,"next","","",120],[11,"size_hint","","",120],[11,"size_hint","","",120],[11,"clone","","",121],[11,"clone_from","","",121],[11,"next","","",121],[11,"size_hint","","",121],[11,"size_hint","","",121],[11,"clone","","",122],[11,"clone_from","","",122],[11,"next","","",122],[11,"size_hint","","",122],[11,"size_hint","","",122],[11,"next_back","","",122],[11,"len","","",122],[11,"indexable","","",122],[11,"idx","","",122],[11,"next","","",123],[11,"size_hint","","",123],[11,"size_hint","","",123],[11,"next_back","","",123],[11,"len","","",123],[11,"eq","core::str","",124],[11,"ne","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"clone_from","","",124],[11,"fmt","","",124],[11,"fmt","","",124],[11,"description","","",124],[11,"cause","","",124],[11,"fmt","","",125],[11,"clone","","",125],[11,"clone_from","","",125],[11,"eq","","",125],[11,"ne","","",125],[11,"ne","","",125],[11,"assert_receiver_is_total_eq","","",125],[11,"description","","",125],[11,"cause","","",125],[11,"fmt","","",125],[11,"clone","","",126],[11,"clone_from","","",126],[11,"next","","",126],[11,"size_hint","","",126],[11,"size_hint","","",126],[11,"next_back","","",126],[11,"clone","","",127],[11,"clone_from","","",127],[11,"next","","",127],[11,"size_hint","","",127],[11,"size_hint","","",127],[11,"next_back","","",127],[11,"clone","","",128],[11,"clone_from","","",128],[11,"next","","",128],[11,"size_hint","","",128],[11,"size_hint","","",128],[11,"next_back","","",128],[11,"len","","",128],[11,"len","","",128],[11,"clone","","",129],[11,"clone_from","","",129],[11,"call","","",129],[11,"clone","","",130],[11,"clone_from","","",130],[11,"clone","","",131],[11,"clone_from","","",131],[11,"next","","",130],[11,"size_hint","","",130],[11,"next_back","","",130],[11,"next","","",131],[11,"size_hint","","",131],[11,"clone","","",132],[11,"clone_from","","",132],[11,"clone","","",133],[11,"clone_from","","",133],[11,"clone","","",134],[11,"clone_from","","",134],[11,"clone","","",135],[11,"clone_from","","",135],[11,"clone","","",136],[11,"clone_from","","",136],[11,"next","","",135],[11,"size_hint","","",135],[11,"next","","",136],[11,"size_hint","","",136],[11,"clone","","",137],[11,"clone_from","","",137],[11,"next","","",137],[11,"size_hint","","",137],[11,"size_hint","","",137],[11,"next_back","","",137],[11,"clone","","",138],[11,"clone_from","","",138],[11,"next","","",138],[11,"size_hint","","",138],[11,"size_hint","","",138],[11,"next_back","","",138],[11,"clone","","",139],[11,"clone_from","","",139],[11,"next","","",139],[11,"size_hint","","",139],[11,"size_hint","","",139],[11,"clone","","",140],[11,"clone_from","","",140],[11,"next","","",140],[11,"size_hint","","",140],[11,"size_hint","","",140],[11,"next","","",141],[11,"size_hint","","",141],[11,"size_hint","","",141],[11,"next_back","","",141],[11,"next","","",142],[11,"size_hint","","",142],[11,"size_hint","","",142],[11,"next_back","","",142],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",143],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",143],[11,"result","","Returns the computed hash.",143],[11,"write","","",143],[11,"reset","","",143],[11,"finish","","",143],[11,"clone","","",143],[11,"clone_from","","",143],[11,"default","","",143],[11,"hash","core::borrow","",53],[11,"eq","core::fmt::num","",144],[11,"ne","","",144],[11,"ne","","",144],[11,"clone","","",144],[11,"clone_from","","",144],[11,"eq","","",145],[11,"ne","","",145],[11,"ne","","",145],[11,"clone","","",145],[11,"clone_from","","",145],[11,"eq","","",146],[11,"ne","","",146],[11,"ne","","",146],[11,"clone","","",146],[11,"clone_from","","",146],[11,"eq","","",147],[11,"ne","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"clone_from","","",147],[11,"eq","","",148],[11,"ne","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"clone_from","","",148],[11,"eq","","",149],[11,"ne","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"clone_from","","",149],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"fmt","","",150],[11,"eq","core::fmt::rt::v1","",151],[11,"ne","","",151],[11,"ne","","",151],[11,"fmt","core::fmt","",152],[11,"fmt","","",153],[11,"fmt","","",153],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",154],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",154],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",154],[11,"write_fmt","","Writes some formatted information into this instance",154],[11,"flags","","Flags for formatting (packed version of rt::Flag)",154],[11,"fill","","Character used as 'fill' whenever there is alignment",154],[11,"align","","Flag indicating what form of alignment was requested",154],[11,"width","","Optionally specified integer width that the output should be",154],[11,"precision","","Optionally specified precision for numeric types",154],[11,"fmt","","",152],[11,"fmt","core::cell","",54],[11,"fmt","","",56],[11,"fmt","","",58],[11,"fmt","","",60],[8,"Rand","rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",155],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",156],[11,"next_u64","","Return the next random u64.",156],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",156],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",156],[11,"fill_bytes","","Fill `dest` with random data.",156],[11,"gen","","Return a random value of a `Rand` type.",156],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",156],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",156],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",156],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",156],[11,"choose","","Return a random element from `values`.",156],[11,"shuffle","","Shuffle a mutable slice in place.",156],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",157],[10,"from_seed","","Create a new RNG with the given seed.",157],[6,"Item","",""],[11,"next","","",158],[6,"Item","",""],[11,"next","","",159],[11,"clone","","",160],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",160],[11,"next_u32","","",160],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",160],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",160],[11,"rand","","",160]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"CovariantType"],[3,"ContravariantType"],[3,"InvariantType"],[3,"CovariantLifetime"],[3,"ContravariantLifetime"],[3,"InvariantLifetime"],[3,"NoCopy"],[3,"Managed"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[4,"Cow"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Enumerate"],[3,"Inspect"],[3,"Rev"],[3,"Map"],[3,"Zip"],[3,"ByRef"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Filter"],[3,"FilterMap"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"NaiveSearcher"],[3,"TwoWaySearcher"],[4,"Searcher"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"]]};

searchIndex['test'] = {"items":[[0,"","test","Support code for rustc's built in unit-test and micro-benchmarking\nframework."],[3,"Bencher","","Manager of the benchmarking runs."],[12,"bytes","","",0],[3,"TestDesc","",""],[12,"name","","",1],[12,"ignore","","",1],[12,"should_fail","","",1],[3,"TestDescAndFn","",""],[12,"desc","","",2],[12,"testfn","","",2],[3,"Metric","",""],[3,"MetricMap","",""],[3,"TestOpts","",""],[12,"filter","","",3],[12,"run_ignored","","",3],[12,"run_tests","","",3],[12,"run_benchmarks","","",3],[12,"logfile","","",3],[12,"nocapture","","",3],[12,"color","","",3],[3,"BenchSamples","",""],[4,"TestName","",""],[13,"StaticTestName","","",4],[13,"DynTestName","","",4],[4,"TestFn","",""],[13,"StaticTestFn","","",5],[13,"StaticBenchFn","","",5],[13,"StaticMetricFn","","",5],[13,"DynTestFn","","",5],[13,"DynMetricFn","","",5],[13,"DynBenchFn","","",5],[4,"ShouldFail","",""],[13,"No","","",6],[13,"Yes","","",6],[4,"ColorConfig","",""],[13,"AutoColor","","",7],[13,"AlwaysColor","","",7],[13,"NeverColor","","",7],[4,"TestResult","",""],[13,"TrOk","","",8],[13,"TrFailed","","",8],[13,"TrIgnored","","",8],[13,"TrMetrics","","",8],[13,"TrBench","","",8],[5,"test_main","",""],[5,"test_main_static","",""],[5,"parse_opts","",""],[5,"fmt_bench_samples","",""],[5,"run_tests_console","",""],[5,"filter_tests","",""],[5,"run_test","",""],[5,"black_box","","A function that is opaque to the optimizer, to allow benchmarks to\npretend to use outputs to assist in avoiding dead-code\nelimination."],[0,"test","",""],[0,"stats","",""],[3,"Summary","test::stats","Extracted collection of all the summary statistics of a sample set."],[12,"sum","","",9],[12,"min","","",9],[12,"max","","",9],[12,"mean","","",9],[12,"median","","",9],[12,"var","","",9],[12,"std_dev","","",9],[12,"std_dev_pct","","",9],[12,"median_abs_dev","","",9],[12,"median_abs_dev_pct","","",9],[12,"quartiles","","",9],[12,"iqr","","",9],[5,"winsorize","","Winsorize a set of samples, replacing values above the `100-pct` percentile and below the `pct`\npercentile with those percentiles themselves. This is a way of minimizing the effect of\noutliers, at the cost of biasing the sample. It differs from trimming in that it does not\nchange the number of samples, just changes the values of those that are outliers."],[5,"freq_count","","Returns a HashMap with the number of occurrences of every element in the\nsequence that the iterator exposes."],[8,"Stats","","Trait that provides simple descriptive statistics on a univariate set of numeric samples."],[10,"sum","","Sum of the samples.",10],[10,"min","","Minimum value of the samples.",10],[10,"max","","Maximum value of the samples.",10],[10,"mean","","Arithmetic mean (average) of the samples: sum divided by sample-count.",10],[10,"median","","Median of the samples: value separating the lower half of the samples from the higher half.\nEqual to `self.percentile(50.0)`.",10],[10,"var","","Variance of the samples: bias-corrected mean of the squares of the differences of each\nsample from the sample mean. Note that this calculates the _sample variance_ rather than the\npopulation variance, which is assumed to be unknown. It therefore corrects the `(n-1)/n`\nbias that would appear if we calculated a population variance, by dividing by `(n-1)` rather\nthan `n`.",10],[10,"std_dev","","Standard deviation: the square root of the sample variance.",10],[10,"std_dev_pct","","Standard deviation as a percent of the mean value. See `std_dev` and `mean`.",10],[10,"median_abs_dev","","Scaled median of the absolute deviations of each sample from the sample median. This is a\nrobust (distribution-agnostic) estimator of sample variability. Use this in preference to\n`std_dev` if you cannot assume your sample is normally distributed. Note that this is scaled\nby the constant `1.4826` to allow its use as a consistent estimator for the standard\ndeviation.",10],[10,"median_abs_dev_pct","","Median absolute deviation as a percent of the median. See `median_abs_dev` and `median`.",10],[10,"percentile","","Percentile: the value below which `pct` percent of the values in `self` fall. For example,\npercentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\nsatisfy `s <= v`.",10],[10,"quartiles","","Quartiles of the sample: three values that divide the sample into four equal groups, each\nwith 1/4 of the data. The middle value is the median. See `median` and `percentile`. This\nfunction may calculate the 3 quartiles more efficiently than 3 calls to `percentile`, but\nis otherwise equivalent.",10],[10,"iqr","","Inter-quartile range: the difference between the 25th percentile (1st quartile) and the 75th\npercentile (3rd quartile). See `quartiles`.",10],[11,"eq","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"new","","Construct a new summary of a sample set.",9],[0,"bench","test",""],[5,"benchmark","test::bench",""],[6,"OptRes","test","Result of parsing the options."],[6,"MonitorMsg","",""],[8,"TDynBenchFn","","Represents a benchmark function."],[10,"run","","",11],[11,"fmt","","",4],[11,"hash","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"fmt","","",4],[11,"fmt","","",5],[11,"hash","","",6],[11,"eq","","",6],[11,"ne","","",6],[11,"fmt","","",6],[11,"clone","","",6],[11,"hash","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"fmt","","",1],[11,"clone","","",1],[11,"fmt","","",2],[11,"fmt","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"decode","","",12],[11,"encode","","",12],[11,"clone","","",12],[11,"new","","",12],[11,"eq","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"eq","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"eq","","",8],[11,"ne","","",8],[11,"clone","","",8],[11,"new","","",13],[11,"insert_metric","","Insert a named `value` (+/- `noise`) metric into the map. The value\nmust be non-negative. The `noise` indicates the uncertainty of the\nmetric, which doubles as the \"noise range\" of acceptable\npairwise-regressions on this named value, when comparing from one\nmetric to the next using `compare_to_old`.",13],[11,"fmt_metrics","","",13],[11,"iter","","Callback for benchmark functions to run in their body.",0],[11,"ns_elapsed","","",0],[11,"ns_per_iter","","",0],[11,"bench_n","","",0],[11,"auto_bench","","",0]],"paths":[[3,"Bencher"],[3,"TestDesc"],[3,"TestDescAndFn"],[3,"TestOpts"],[4,"TestName"],[4,"TestFn"],[4,"ShouldFail"],[4,"ColorConfig"],[4,"TestResult"],[3,"Summary"],[8,"Stats"],[8,"TDynBenchFn"],[3,"Metric"],[3,"MetricMap"],[3,"BenchSamples"]]};

searchIndex['collections'] = {"items":[[0,"","collections","Collection types."],[0,"boxed","","A pointer type for heap allocation."],[7,"HEAP","collections::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates\ninto when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",0],[11,"from_raw","","Constructs a box from the raw pointer.",0],[11,"default","","",0],[11,"default","","",0],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",0],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",0],[11,"clone_from","","",0],[11,"eq","","",0],[11,"ne","","",0],[11,"ne","","",0],[11,"partial_cmp","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"ge","","",0],[11,"gt","","",0],[11,"lt","","",0],[11,"le","","",0],[11,"gt","","",0],[11,"ge","","",0],[11,"cmp","","",0],[11,"assert_receiver_is_total_eq","","",0],[11,"hash","","",0],[11,"downcast","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[11,"fmt","","",0],[6,"Target","collections::boxed",""],[11,"deref","alloc::boxed","",0],[11,"deref_mut","","",0],[6,"Item","collections::boxed",""],[11,"next","alloc::boxed","",0],[11,"size_hint","","",0],[11,"size_hint","","",0],[11,"from_error","","",0],[11,"new","alloc::arc","Constructs a new `Arc<T>`.",1],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",1],[11,"clone","","Makes a clone of the `Arc<T>`.",1],[11,"clone_from","","",1],[6,"Target","collections::boxed",""],[11,"deref","alloc::arc","",1],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",1],[11,"drop","","Drops the `Arc<T>`.",1],[11,"upgrade","","Upgrades a weak reference to a strong reference.",2],[11,"clone","","Makes a clone of the `Weak<T>`.",2],[11,"clone_from","","",2],[11,"drop","","Drops the `Weak<T>`.",2],[11,"eq","","Equality for two `Arc<T>`s.",1],[11,"ne","","Inequality for two `Arc<T>`s.",1],[11,"ne","","",1],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",1],[11,"lt","","Less-than comparison for two `Arc<T>`s.",1],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",1],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",1],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",1],[11,"lt","","",1],[11,"le","","",1],[11,"gt","","",1],[11,"ge","","",1],[11,"cmp","","",1],[11,"assert_receiver_is_total_eq","","",1],[11,"fmt","","",1],[11,"fmt","","",1],[11,"default","","",1],[11,"hash","","",1],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",3],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",3],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",3],[6,"Target","collections::boxed",""],[11,"deref","alloc::rc","",3],[11,"drop","","Drops the `Rc<T>`.",3],[11,"clone","","Makes a clone of the `Rc<T>`.",3],[11,"clone_from","","",3],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",3],[11,"eq","","Equality for two `Rc<T>`s.",3],[11,"ne","","Inequality for two `Rc<T>`s.",3],[11,"ne","","",3],[11,"assert_receiver_is_total_eq","","",3],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",3],[11,"lt","","Less-than comparison for two `Rc<T>`s.",3],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",3],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",3],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"cmp","","Comparison for two `Rc<T>`s.",3],[11,"hash","","",3],[11,"fmt","","",3],[11,"fmt","","",3],[11,"upgrade","","Upgrades a weak reference to a strong reference.",4],[11,"drop","","Drops the `Weak<T>`.",4],[11,"clone","","Makes a clone of the `Weak<T>`.",4],[11,"clone_from","","",4],[11,"fmt","","",4],[3,"Box","collections::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",5],[3,"Bitv","collections","The bitvector type."],[3,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[4,"Bound","","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",6],[13,"Excluded","","An exclusive bound.",6],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",6],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[11,"clone","","",7],[11,"default","","",7],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",7],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",7],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",7],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",7],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",7],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",7],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",7],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",7],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",7],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",7],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",7],[11,"push","","Pushes an item onto the binary heap.",7],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",7],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",7],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",7],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",7],[11,"len","","Returns the length of the binary heap.",7],[11,"is_empty","","Checks if the binary heap is empty.",7],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",7],[11,"clear","","Drops all items from the binary heap.",7],[11,"clone","","",8],[6,"Item","",""],[11,"next","","",8],[11,"size_hint","","",8],[11,"next_back","","",8],[6,"Item","",""],[11,"next","","",9],[11,"size_hint","","",9],[11,"next_back","","",9],[6,"Item","",""],[11,"next","","",10],[11,"size_hint","","",10],[11,"next_back","","",10],[11,"from_iter","","",7],[6,"Iter","",""],[11,"into_iter","","",7],[6,"Iter","",""],[11,"extend","","",7],[11,"index","collections","",11],[11,"new","","Creates an empty `Bitv`.",11],[11,"from_elem","","Creates a `Bitv` that holds `nbits` elements, setting each element\nto `bit`.",11],[11,"with_capacity","","Constructs a new, empty `Bitv` with the specified capacity.",11],[11,"from_bytes","","Transforms a byte-vector into a `Bitv`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",11],[11,"from_fn","","Creates a `Bitv` of the specified length where the value at each index\nis `f(index)`.",11],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",11],[11,"set","","Sets the value of a bit at an index `i`.",11],[11,"set_all","","Sets all bits to 1.",11],[11,"negate","","Flips all bits.",11],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",11],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",11],[11,"difference","","Calculates the difference between two bitvectors.",11],[11,"all","","Returns `true` if all bits are 1.",11],[11,"iter","","Returns an iterator over the elements of the vector in order.",11],[11,"none","","Returns `true` if all bits are 0.",11],[11,"any","","Returns `true` if any bit is 1.",11],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",11],[11,"eq_vec","","Compares a `Bitv` to a slice of `bool`s.\nBoth the `Bitv` and slice must have the same length.",11],[11,"truncate","","Shortens a `Bitv`, dropping excess elements.",11],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`Bitv`. The collection may reserve more space to avoid frequent reallocations.",11],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `Bitv`. Does nothing if the capacity is already sufficient.",11],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",11],[11,"grow","","Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.",11],[11,"pop","","Removes the last bit from the Bitv, and returns it. Returns None if the Bitv is empty.",11],[11,"push","","Pushes a `bool` onto the end.",11],[11,"len","","Return the total number of bits in this vector",11],[11,"is_empty","","Returns true if there are no bits in this vector",11],[11,"clear","","Clears all bits in this vector.",11],[11,"default","","",11],[11,"from_iter","","",11],[11,"extend","","",11],[11,"clone","","",11],[11,"clone_from","","",11],[11,"partial_cmp","","",11],[11,"cmp","","",11],[11,"fmt","","",11],[11,"hash","","",11],[11,"eq","","",11],[11,"clone","","",12],[11,"default","","",12],[11,"from_iter","","",12],[11,"extend","","",12],[11,"partial_cmp","","",12],[11,"cmp","","",12],[11,"eq","","",12],[11,"new","","Creates a new empty `BitvSet`.",12],[11,"with_capacity","","Creates a new `BitvSet` with initially no contents, able to\nhold `nbits` elements without resizing.",12],[11,"from_bitv","","Creates a new `BitvSet` from the given bit vector.",12],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",12],[11,"reserve_len","","Reserves capacity for the given `BitvSet` to contain `len` distinct elements. In the case\nof `BitvSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",12],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitvSet` to contain `len` distinct elements.\nIn the case of `BitvSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",12],[11,"into_bitv","","Consumes this set to return the underlying bit vector.",12],[11,"get_ref","","Returns a reference to the underlying bit vector.",12],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",12],[11,"iter","","Iterator over each u32 stored in the `BitvSet`.",12],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",12],[11,"intersection","","Iterator over each uint stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",12],[11,"difference","","Iterator over each uint stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",12],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",12],[11,"union_with","","Unions in-place with the specified other bit vector.",12],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",12],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",12],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",12],[11,"len","","Return the number of set bits in this set.",12],[11,"is_empty","","Returns whether there are no bits set in this set",12],[11,"clear","","Clears all bits in this set",12],[11,"contains","","Returns `true` if this set contains the specified integer.",12],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",12],[11,"is_subset","","Returns `true` if the set is a subset of another.",12],[11,"is_superset","","Returns `true` if the set is a superset of another.",12],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",12],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",12],[11,"fmt","","",12],[11,"hash","","",12],[11,"clone","","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[11,"into_iter","","",13],[11,"from_iter","","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[11,"index","","",13],[11,"index_mut","","",13],[11,"iter","","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[11,"partial_cmp","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[11,"into_iter","","",14],[11,"extend","","",14],[11,"default","","",14],[11,"fmt","","",14],[0,"dlist","","A doubly-linked list with owned nodes."],[3,"DList","collections::dlist","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `DList`."],[3,"IterMut","","An iterator over mutable references to the items of a `DList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `DList`."],[11,"clone","","",15],[11,"clone","","",16],[11,"default","","",17],[11,"new","","Creates an empty `DList`.",17],[11,"append","","Moves all elements from `other` to the end of the list.",17],[11,"iter","","Provides a forward iterator.",17],[11,"iter_mut","","Provides a forward iterator with mutable references.",17],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",17],[11,"is_empty","","Returns `true` if the `DList` is empty.",17],[11,"len","","Returns the length of the `DList`.",17],[11,"clear","","Removes all elements from the `DList`.",17],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",17],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",17],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",17],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",17],[11,"push_front","","Adds an element first in the list.",17],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",17],[11,"push_back","","Appends an element to the back of a list",17],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",17],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",17],[11,"drop","","",17],[6,"Item","",""],[11,"next","","",15],[11,"size_hint","","",15],[11,"next_back","","",15],[6,"Item","",""],[11,"next","","",18],[11,"size_hint","","",18],[11,"next_back","","",18],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",18],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",18],[6,"Item","",""],[11,"next","","",16],[11,"size_hint","","",16],[11,"next_back","","",16],[11,"from_iter","","",17],[6,"Iter","",""],[11,"into_iter","","",17],[6,"Iter","",""],[6,"Iter","",""],[11,"extend","","",17],[11,"eq","","",17],[11,"ne","","",17],[11,"partial_cmp","","",17],[11,"cmp","","",17],[11,"clone","","",17],[11,"fmt","","",17],[11,"hash","","",17],[0,"enum_set","collections","A structure for holding a set of enum variants."],[3,"EnumSet","collections::enum_set","A specialized set implementation to use enum types."],[3,"Iter","","An iterator over an EnumSet"],[8,"CLike","","An interface for casting C-like enum to uint and back.\nA typically implementation is as below."],[10,"to_uint","","Converts a C-like enum to a `uint`.",19],[10,"from_uint","","Converts a `uint` to a C-like enum.",19],[11,"hash","","",20],[11,"cmp","","",20],[11,"partial_cmp","","",20],[11,"lt","","",20],[11,"le","","",20],[11,"gt","","",20],[11,"ge","","",20],[11,"eq","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"fmt","","",20],[11,"new","","Returns an empty `EnumSet`.",20],[11,"len","","Returns the number of elements in the given `EnumSet`.",20],[11,"is_empty","","Returns true if the `EnumSet` is empty.",20],[11,"clear","","",20],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",20],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",20],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",20],[11,"union","","Returns the union of both `EnumSets`.",20],[11,"intersection","","Returns the intersection of both `EnumSets`.",20],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",20],[11,"remove","","Removes an enum from the EnumSet",20],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",20],[11,"iter","","Returns an iterator over an `EnumSet`.",20],[6,"Output","",""],[11,"sub","","",20],[6,"Output","",""],[11,"bitor","","",20],[6,"Output","",""],[11,"bitand","","",20],[6,"Output","",""],[11,"bitxor","","",20],[11,"clone","","",21],[6,"Item","",""],[11,"next","","",21],[11,"size_hint","","",21],[11,"from_iter","","",20],[6,"Iter","",""],[11,"extend","","",20],[0,"ring_buf","collections","This crate implements a double-ended queue with `O(1)` amortized inserts and removals from both\nends of the container. It also has `O(1)` indexing like a vector. The contained elements are\nnot required to be copyable, and the queue will be sendable if the contained type is sendable."],[3,"RingBuf","collections::ring_buf","`RingBuf` is a circular buffer, which can be used as a double-ended queue efficiently."],[3,"Iter","","`RingBuf` iterator."],[3,"IterMut","","`RingBuf` mutable iterator."],[3,"IntoIter","","A by-value RingBuf iterator"],[3,"Drain","","A draining RingBuf iterator"],[11,"clone","","",22],[11,"drop","","",22],[11,"default","","",22],[11,"new","","Creates an empty `RingBuf`.",22],[11,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",22],[11,"get","","Retrieves an element in the `RingBuf` by index.",22],[11,"get_mut","","Retrieves an element in the `RingBuf` mutably by index.",22],[11,"swap","","Swaps elements at indices `i` and `j`.",22],[11,"capacity","","Returns the number of elements the `RingBuf` can hold without\nreallocating.",22],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `RingBuf`. Does nothing if the capacity is already sufficient.",22],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",22],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",22],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",22],[11,"iter","","Returns a front-to-back iterator.",22],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",22],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",22],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`RingBuf`.",22],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`RingBuf`.",22],[11,"len","","Returns the number of elements in the `RingBuf`.",22],[11,"is_empty","","Returns true if the buffer contains no elements",22],[11,"drain","","Creates a draining iterator that clears the `RingBuf` and iterates over\nthe removed items from start to end.",22],[11,"clear","","Clears the buffer, removing all values.",22],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",22],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",22],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",22],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",22],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",22],[11,"push_front","","Inserts an element first in the sequence.",22],[11,"push_back","","Appends an element to the back of a buffer",22],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",22],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",22],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",22],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",22],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",22],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",22],[11,"clone","","",23],[6,"Item","",""],[11,"next","","",23],[11,"size_hint","","",23],[11,"next_back","","",23],[11,"indexable","","",23],[11,"idx","","",23],[6,"Item","",""],[11,"next","","",24],[11,"size_hint","","",24],[11,"next_back","","",24],[6,"Item","",""],[11,"next","","",25],[11,"size_hint","","",25],[11,"next_back","","",25],[11,"drop","","",26],[6,"Item","",""],[11,"next","","",26],[11,"size_hint","","",26],[11,"next_back","","",26],[11,"eq","","",22],[11,"partial_cmp","","",22],[11,"cmp","","",22],[11,"hash","","",22],[6,"Output","",""],[11,"index","","",22],[6,"Output","",""],[11,"index_mut","","",22],[11,"from_iter","","",22],[6,"Iter","",""],[11,"into_iter","","",22],[6,"Iter","",""],[6,"Iter","",""],[11,"extend","","",22],[11,"fmt","","",22],[0,"slice","collections","Utilities for slice manipulation"],[11,"fmt","core::num","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"ne","","",27],[6,"Err","collections::slice",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"clone","","",28],[11,"clone_from","","",28],[11,"fmt","","",28],[11,"eq","","",29],[11,"ne","","",29],[11,"ne","","",29],[11,"clone","","",29],[11,"clone_from","","",29],[11,"fmt","","",29],[11,"fmt","","",28],[11,"description","","",28],[11,"cause","","",28],[11,"eq","","",30],[11,"ne","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"clone_from","","",30],[11,"fmt","","",30],[11,"eq","","",31],[11,"ne","","",31],[11,"ne","","",31],[11,"clone","","",31],[11,"clone_from","","",31],[11,"fmt","","",31],[11,"fmt","","",30],[11,"description","","",30],[11,"cause","","",30],[11,"hash","core::nonzero","",32],[11,"fmt","","",32],[11,"partial_cmp","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"lt","","",32],[11,"le","","",32],[11,"gt","","",32],[11,"ge","","",32],[11,"cmp","","",32],[11,"eq","","",32],[11,"ne","","",32],[11,"ne","","",32],[11,"assert_receiver_is_total_eq","","",32],[11,"clone","","",32],[11,"clone_from","","",32],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",32],[6,"Target","collections::slice",""],[11,"deref","core::nonzero","",32],[6,"Target","collections::slice",""],[6,"Target","",""],[6,"Target","",""],[11,"null","core::ptr","Returns a null Unique.",33],[11,"offset","","Return an (unsafe) pointer into the memory owned by `self`.",33],[11,"cmp","core::marker","",34],[11,"partial_cmp","","",34],[11,"lt","","",34],[11,"le","","",34],[11,"gt","","",34],[11,"ge","","",34],[11,"lt","","",34],[11,"le","","",34],[11,"gt","","",34],[11,"ge","","",34],[11,"assert_receiver_is_total_eq","","",34],[11,"eq","","",34],[11,"ne","","",34],[11,"ne","","",34],[11,"clone","","",34],[11,"clone_from","","",34],[11,"cmp","","",35],[11,"partial_cmp","","",35],[11,"lt","","",35],[11,"le","","",35],[11,"gt","","",35],[11,"ge","","",35],[11,"lt","","",35],[11,"le","","",35],[11,"gt","","",35],[11,"ge","","",35],[11,"assert_receiver_is_total_eq","","",35],[11,"eq","","",35],[11,"ne","","",35],[11,"ne","","",35],[11,"clone","","",35],[11,"clone_from","","",35],[11,"cmp","","",36],[11,"partial_cmp","","",36],[11,"lt","","",36],[11,"le","","",36],[11,"gt","","",36],[11,"ge","","",36],[11,"lt","","",36],[11,"le","","",36],[11,"gt","","",36],[11,"ge","","",36],[11,"assert_receiver_is_total_eq","","",36],[11,"eq","","",36],[11,"ne","","",36],[11,"ne","","",36],[11,"clone","","",36],[11,"clone_from","","",36],[11,"cmp","","",37],[11,"partial_cmp","","",37],[11,"lt","","",37],[11,"le","","",37],[11,"gt","","",37],[11,"ge","","",37],[11,"lt","","",37],[11,"le","","",37],[11,"gt","","",37],[11,"ge","","",37],[11,"assert_receiver_is_total_eq","","",37],[11,"eq","","",37],[11,"ne","","",37],[11,"ne","","",37],[11,"clone","","",37],[11,"clone_from","","",37],[11,"cmp","","",38],[11,"partial_cmp","","",38],[11,"lt","","",38],[11,"le","","",38],[11,"gt","","",38],[11,"ge","","",38],[11,"lt","","",38],[11,"le","","",38],[11,"gt","","",38],[11,"ge","","",38],[11,"assert_receiver_is_total_eq","","",38],[11,"eq","","",38],[11,"ne","","",38],[11,"ne","","",38],[11,"clone","","",38],[11,"clone_from","","",38],[11,"cmp","","",39],[11,"partial_cmp","","",39],[11,"lt","","",39],[11,"le","","",39],[11,"gt","","",39],[11,"ge","","",39],[11,"lt","","",39],[11,"le","","",39],[11,"gt","","",39],[11,"ge","","",39],[11,"assert_receiver_is_total_eq","","",39],[11,"eq","","",39],[11,"ne","","",39],[11,"ne","","",39],[11,"clone","","",39],[11,"clone_from","","",39],[11,"cmp","","",40],[11,"partial_cmp","","",40],[11,"lt","","",40],[11,"le","","",40],[11,"gt","","",40],[11,"ge","","",40],[11,"lt","","",40],[11,"le","","",40],[11,"gt","","",40],[11,"ge","","",40],[11,"assert_receiver_is_total_eq","","",40],[11,"eq","","",40],[11,"ne","","",40],[11,"ne","","",40],[11,"clone","","",40],[11,"clone_from","","",40],[11,"cmp","","",41],[11,"partial_cmp","","",41],[11,"lt","","",41],[11,"le","","",41],[11,"gt","","",41],[11,"ge","","",41],[11,"lt","","",41],[11,"le","","",41],[11,"gt","","",41],[11,"ge","","",41],[11,"assert_receiver_is_total_eq","","",41],[11,"eq","","",41],[11,"ne","","",41],[11,"ne","","",41],[11,"clone","","",41],[11,"clone_from","","",41],[6,"Output","collections::slice",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"assert_receiver_is_total_eq","core::ops","",42],[11,"eq","","",42],[11,"ne","","",42],[11,"ne","","",42],[11,"clone","","",42],[11,"clone_from","","",42],[11,"fmt","","",42],[11,"assert_receiver_is_total_eq","","",43],[11,"eq","","",43],[11,"ne","","",43],[11,"ne","","",43],[11,"clone","","",43],[11,"clone_from","","",43],[11,"fmt","","",43],[11,"assert_receiver_is_total_eq","","",44],[11,"eq","","",44],[11,"ne","","",44],[11,"ne","","",44],[11,"clone","","",44],[11,"clone_from","","",44],[11,"fmt","","",44],[11,"assert_receiver_is_total_eq","","",45],[11,"eq","","",45],[11,"ne","","",45],[11,"ne","","",45],[11,"clone","","",45],[11,"clone_from","","",45],[11,"fmt","","",45],[6,"Target","collections::slice",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",46],[11,"eq","","",46],[11,"ne","","",46],[11,"ne","","",46],[11,"clone","","",46],[11,"clone_from","","",46],[11,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",46],[11,"assert_receiver_is_total_eq","","",46],[11,"cmp","","",46],[11,"partial_cmp","","",46],[11,"lt","","",46],[11,"le","","",46],[11,"gt","","",46],[11,"ge","","",46],[11,"is","collections","Returns true if the boxed type is the same as `T`",47],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",47],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",47],[11,"hash","core::any","",48],[11,"fmt","","",48],[11,"assert_receiver_is_total_eq","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"clone_from","","",48],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",48],[11,"new","core::atomic","Creates a new `AtomicBool`.",49],[11,"load","","Loads a value from the bool.",49],[11,"store","","Stores a value into the bool.",49],[11,"swap","","Stores a value into the bool, returning the old value.",49],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",49],[11,"fetch_and","","Logical \"and\" with a boolean value.",49],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",49],[11,"fetch_or","","Logical \"or\" with a boolean value.",49],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",49],[11,"new","","Creates a new `AtomicIsize`.",50],[11,"load","","Loads a value from the isize.",50],[11,"store","","Stores a value into the isize.",50],[11,"swap","","Stores a value into the isize, returning the old value.",50],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",50],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",50],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",50],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",50],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",50],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",50],[11,"new","","Creates a new `AtomicUsize`.",51],[11,"load","","Loads a value from the usize.",51],[11,"store","","Stores a value into the usize.",51],[11,"swap","","Stores a value into the usize, returning the old value.",51],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",51],[11,"fetch_add","","Add to the current usize, returning the previous value.",51],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",51],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",51],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",51],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",51],[11,"new","","Creates a new `AtomicPtr`.",52],[11,"load","","Loads a value from the pointer.",52],[11,"store","","Stores a value into the pointer.",52],[11,"swap","","Stores a value into the pointer, returning the old value.",52],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",52],[11,"new","","",53],[11,"load","","",53],[11,"store","","",53],[11,"swap","","",53],[11,"compare_and_swap","","",53],[11,"fetch_add","","",53],[11,"fetch_sub","","",53],[11,"fetch_and","","",53],[11,"fetch_or","","",53],[11,"fetch_xor","","",53],[11,"new","","",54],[11,"load","","",54],[11,"store","","",54],[11,"swap","","",54],[11,"compare_and_swap","","",54],[11,"fetch_add","","",54],[11,"fetch_sub","","",54],[11,"fetch_and","","",54],[11,"fetch_or","","",54],[11,"fetch_xor","","",54],[11,"into_cow","core::borrow","",55],[11,"clone","","",55],[11,"clone_from","","",55],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",55],[11,"into_owned","","Extract the owned data.",55],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",55],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",55],[6,"Target","collections::slice",""],[11,"deref","core::borrow","",55],[11,"assert_receiver_is_total_eq","","",55],[11,"cmp","","",55],[11,"eq","","",55],[11,"ne","","",55],[11,"partial_cmp","","",55],[11,"lt","","",55],[11,"le","","",55],[11,"gt","","",55],[11,"ge","","",55],[11,"fmt","","",55],[11,"fmt","","",55],[11,"new","core::cell","Creates a new `Cell` containing the given value.",56],[11,"get","","Returns a copy of the contained value.",56],[11,"set","","Sets the contained value.",56],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",56],[11,"clone","","",56],[11,"clone_from","","",56],[11,"default","","",56],[11,"eq","","",56],[11,"ne","","",56],[11,"fmt","","",57],[11,"eq","","",57],[11,"ne","","",57],[11,"ne","","",57],[11,"clone","","",57],[11,"clone_from","","",57],[11,"new","","Creates a new `RefCell` containing `value`.",58],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",58],[11,"borrow_state","","Query the current state of this `RefCell`",58],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",58],[11,"borrow","","Immutably borrows the wrapped value.",58],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",58],[11,"borrow_mut","","Mutably borrows the wrapped value.",58],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",58],[11,"clone","","",58],[11,"clone_from","","",58],[11,"default","","",58],[11,"eq","","",58],[11,"ne","","",58],[11,"drop","","",59],[11,"clone","","",59],[11,"clone_from","","",59],[6,"Target","collections::slice",""],[11,"deref","core::cell","",60],[11,"drop","","",61],[6,"Target","collections::slice",""],[11,"deref","core::cell","",62],[11,"deref_mut","","",62],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",63],[11,"get","","Gets a mutable pointer to the wrapped value.",63],[11,"into_inner","","Unwraps the value",63],[11,"clone","core::char","",64],[11,"clone_from","","",64],[11,"clone","","",65],[11,"clone_from","","",65],[6,"Item","collections::slice",""],[11,"next","core::char","",64],[11,"size_hint","","",64],[11,"clone","","",66],[11,"clone_from","","",66],[11,"clone","","",67],[11,"clone_from","","",67],[6,"Item","collections::slice",""],[11,"next","core::char","",66],[11,"size_hint","","",66],[11,"drop","core::finally","",68],[6,"Item","collections::slice",""],[6,"Iter","",""],[11,"len","core::iter","",69],[11,"len","","",70],[11,"len","","",71],[11,"len","","",72],[11,"len","","",73],[11,"clone","","",71],[11,"clone_from","","",71],[6,"Item","collections::slice",""],[11,"next","core::iter","",71],[11,"size_hint","","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"indexable","","",71],[11,"idx","","",71],[6,"Item","collections::slice",""],[11,"next","core::iter","",74],[11,"size_hint","","",74],[11,"size_hint","","",74],[11,"next_back","","",74],[11,"len","","",74],[11,"fmt","","",75],[11,"eq","","",75],[11,"ne","","",75],[11,"ne","","",75],[11,"clone","","",75],[11,"clone_from","","",75],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",75],[11,"clone","","",76],[11,"clone_from","","",76],[6,"Item","collections::slice",""],[11,"next","core::iter","",76],[11,"size_hint","","",76],[11,"size_hint","","",76],[11,"next_back","","",76],[11,"len","","",76],[11,"clone","","",77],[11,"clone_from","","",77],[6,"Item","collections::slice",""],[11,"next","core::iter","",77],[11,"size_hint","","",77],[11,"size_hint","","",77],[11,"indexable","","",77],[11,"idx","","",77],[11,"clone","","",78],[11,"clone_from","","",78],[6,"Item","collections::slice",""],[11,"next","core::iter","",78],[11,"size_hint","","",78],[11,"size_hint","","",78],[11,"next_back","","",78],[11,"indexable","","",78],[11,"idx","","",78],[11,"clone","","",73],[11,"clone_from","","",73],[6,"Item","collections::slice",""],[11,"next","core::iter","",73],[11,"size_hint","","",73],[11,"size_hint","","",73],[11,"next_back","","",73],[11,"indexable","","",73],[11,"idx","","",73],[11,"clone","","",72],[11,"clone_from","","",72],[6,"Item","collections::slice",""],[11,"next","core::iter","",72],[11,"size_hint","","",72],[11,"size_hint","","",72],[11,"next_back","","",72],[11,"indexable","","",72],[11,"idx","","",72],[11,"clone","","",79],[11,"clone_from","","",79],[6,"Item","collections::slice",""],[11,"next","core::iter","",79],[11,"size_hint","","",79],[11,"size_hint","","",79],[11,"next_back","","",79],[11,"clone","","",80],[11,"clone_from","","",80],[6,"Item","collections::slice",""],[11,"next","core::iter","",80],[11,"size_hint","","",80],[11,"size_hint","","",80],[11,"next_back","","",80],[11,"clone","","",69],[11,"clone_from","","",69],[6,"Item","collections::slice",""],[11,"next","core::iter","",69],[11,"size_hint","","",69],[11,"size_hint","","",69],[11,"next_back","","",69],[11,"indexable","","",69],[11,"idx","","",69],[11,"clone","","",81],[11,"clone_from","","",81],[6,"Item","collections::slice",""],[11,"next","core::iter","",81],[11,"size_hint","","",81],[11,"size_hint","","",81],[11,"len","","",81],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",81],[11,"is_empty","","Check whether peekable iterator is empty or not.",81],[11,"clone","","",82],[11,"clone_from","","",82],[6,"Item","collections::slice",""],[11,"next","core::iter","",82],[11,"size_hint","","",82],[11,"size_hint","","",82],[11,"clone","","",83],[11,"clone_from","","",83],[6,"Item","collections::slice",""],[11,"next","core::iter","",83],[11,"size_hint","","",83],[11,"size_hint","","",83],[11,"clone","","",84],[11,"clone_from","","",84],[6,"Item","collections::slice",""],[11,"next","core::iter","",84],[11,"size_hint","","",84],[11,"size_hint","","",84],[11,"indexable","","",84],[11,"idx","","",84],[11,"len","","",84],[11,"clone","","",85],[11,"clone_from","","",85],[6,"Item","collections::slice",""],[11,"next","core::iter","",85],[11,"size_hint","","",85],[11,"size_hint","","",85],[11,"indexable","","",85],[11,"idx","","",85],[11,"len","","",85],[11,"clone","","",86],[11,"clone_from","","",86],[6,"Item","collections::slice",""],[11,"next","core::iter","",86],[11,"size_hint","","",86],[11,"size_hint","","",86],[11,"clone","","",87],[11,"clone_from","","",87],[6,"Item","collections::slice",""],[11,"next","core::iter","",87],[11,"size_hint","","",87],[11,"size_hint","","",87],[11,"next_back","","",87],[11,"clone","","",88],[11,"clone_from","","",88],[6,"Item","collections::slice",""],[11,"next","core::iter","",88],[11,"size_hint","","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[11,"indexable","","",88],[11,"idx","","",88],[11,"len","","",88],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",88],[11,"clone","","",70],[11,"clone_from","","",70],[6,"Item","collections::slice",""],[11,"next","core::iter","",70],[11,"size_hint","","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"indexable","","",70],[11,"idx","","",70],[11,"clone","","",89],[11,"clone_from","","",89],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",89],[6,"Item","collections::slice",""],[11,"next","core::iter","",89],[11,"size_hint","","",89],[11,"size_hint","","",89],[11,"clone","","",90],[11,"clone_from","","",90],[6,"Item","collections::slice",""],[11,"next","core::iter","",90],[11,"size_hint","","",90],[11,"size_hint","","",90],[11,"clone","","",91],[11,"clone_from","","",91],[6,"Item","collections::slice",""],[11,"next","core::iter","",91],[11,"size_hint","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[11,"clone","","",92],[11,"clone_from","","",92],[6,"Item","collections::slice",""],[11,"next","core::iter","",92],[11,"size_hint","","",92],[11,"size_hint","","",92],[11,"next_back","","",92],[11,"clone","","",93],[11,"clone_from","","",93],[6,"Item","collections::slice",""],[11,"next","core::iter","",93],[11,"size_hint","","",93],[11,"clone","","",94],[11,"clone_from","","",94],[6,"Item","collections::slice",""],[11,"next","core::iter","",94],[11,"size_hint","","",94],[6,"Item","collections::slice",""],[11,"next","core::ops","",43],[11,"size_hint","","",43],[11,"size_hint","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"len","","",43],[11,"next_back","","",43],[6,"Item","collections::slice",""],[11,"next","core::ops","",44],[11,"size_hint","","",44],[11,"clone","core::iter","",95],[11,"clone_from","","",95],[6,"Item","collections::slice",""],[11,"next","core::iter","",95],[11,"size_hint","","",95],[11,"size_hint","","",95],[11,"next_back","","",95],[11,"indexable","","",95],[11,"idx","","",95],[11,"hash","core::option","",96],[11,"fmt","","",96],[11,"cmp","","",96],[11,"assert_receiver_is_total_eq","","",96],[11,"partial_cmp","","",96],[11,"lt","","",96],[11,"le","","",96],[11,"gt","","",96],[11,"ge","","",96],[11,"lt","","",96],[11,"le","","",96],[11,"gt","","",96],[11,"ge","","",96],[11,"eq","","",96],[11,"ne","","",96],[11,"ne","","",96],[11,"clone","","",96],[11,"clone_from","","",96],[11,"is_some","","Returns `true` if the option is a `Some` value",96],[11,"is_none","","Returns `true` if the option is a `None` value",96],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",96],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",96],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",96],[11,"expect","","Unwraps an option, yielding the content of a `Some`",96],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",96],[11,"unwrap_or","","Returns the contained value or a default.",96],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",96],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",96],[11,"map_or","","Applies a function to the contained value or returns a default.",96],[11,"map_or_else","","Applies a function to the contained value or computes a default.",96],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",96],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",96],[11,"iter","","Returns an iterator over the possibly contained value.",96],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",96],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",96],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",96],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",96],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",96],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",96],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",96],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",96],[11,"unwrap_or_default","","Returns the contained value or a default",96],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",96],[11,"default","","",96],[11,"clone","","",97],[11,"clone_from","","",97],[6,"Item","collections::slice",""],[11,"next","core::option","",97],[11,"size_hint","","",97],[11,"size_hint","","",97],[11,"next_back","","",97],[11,"len","","",97],[6,"Item","collections::slice",""],[11,"next","core::option","",98],[11,"size_hint","","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"len","","",98],[11,"clone","","",98],[11,"clone_from","","",98],[6,"Item","collections::slice",""],[11,"next","core::option","",99],[11,"size_hint","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"len","","",99],[6,"Item","collections::slice",""],[11,"next","core::option","",100],[11,"size_hint","","",100],[11,"size_hint","","",100],[11,"next_back","","",100],[11,"len","","",100],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",96],[11,"hash","core::result","",101],[11,"fmt","","",101],[11,"cmp","","",101],[11,"assert_receiver_is_total_eq","","",101],[11,"partial_cmp","","",101],[11,"lt","","",101],[11,"le","","",101],[11,"gt","","",101],[11,"ge","","",101],[11,"lt","","",101],[11,"le","","",101],[11,"gt","","",101],[11,"ge","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"ne","","",101],[11,"clone","","",101],[11,"clone_from","","",101],[11,"is_ok","","Returns true if the result is `Ok`",101],[11,"is_err","","Returns true if the result is `Err`",101],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",101],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",101],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",101],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",101],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",101],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",101],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",101],[11,"iter","","Returns an iterator over the possibly contained value.",101],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",101],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",101],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",101],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",101],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",101],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",101],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",101],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",101],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",101],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",101],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",101],[6,"Item","collections::slice",""],[11,"next","core::result","",102],[11,"size_hint","","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"len","","",102],[11,"clone","","",102],[11,"clone_from","","",102],[6,"Item","collections::slice",""],[11,"next","core::result","",103],[11,"size_hint","","",103],[11,"size_hint","","",103],[11,"next_back","","",103],[11,"len","","",103],[6,"Item","collections::slice",""],[11,"next","core::result","",104],[11,"size_hint","","",104],[11,"size_hint","","",104],[11,"next_back","","",104],[11,"len","","",104],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",101],[11,"fmt","core::simd","",105],[11,"fmt","","",106],[11,"fmt","","",107],[11,"fmt","","",108],[11,"fmt","","",109],[11,"fmt","","",110],[11,"fmt","","",111],[11,"fmt","","",112],[11,"fmt","","",113],[11,"fmt","","",114],[6,"Item","collections::slice",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Output","",""],[11,"index","core::slice","",115],[6,"Output","collections::slice",""],[11,"index","core::slice","",115],[6,"Output","collections::slice",""],[11,"index","core::slice","",115],[6,"Output","collections::slice",""],[11,"index","core::slice","",115],[11,"as_slice","","View the underlying data as a subslice of the original data.",115],[6,"Item","collections::slice",""],[11,"next","core::slice","",115],[11,"size_hint","","",115],[11,"size_hint","","",115],[11,"next_back","","",115],[11,"len","","",115],[11,"clone","","",115],[11,"clone_from","","",115],[11,"indexable","","",115],[11,"idx","","",115],[6,"Output","collections::slice",""],[11,"index","core::slice","",116],[6,"Output","collections::slice",""],[11,"index","core::slice","",116],[6,"Output","collections::slice",""],[11,"index","core::slice","",116],[6,"Output","collections::slice",""],[11,"index","core::slice","",116],[6,"Output","collections::slice",""],[11,"index_mut","core::slice","",116],[6,"Output","collections::slice",""],[11,"index_mut","core::slice","",116],[6,"Output","collections::slice",""],[11,"index_mut","core::slice","",116],[6,"Output","collections::slice",""],[11,"index_mut","core::slice","",116],[11,"into_slice","","View the underlying data as a subslice of the original data.",116],[6,"Item","collections::slice",""],[11,"next","core::slice","",116],[11,"size_hint","","",116],[11,"size_hint","","",116],[11,"next_back","","",116],[11,"len","","",116],[11,"clone","","",117],[11,"clone_from","","",117],[6,"Item","collections::slice",""],[11,"next","core::slice","",117],[11,"size_hint","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[11,"finish","","",117],[11,"finish","","",118],[6,"Item","collections::slice",""],[11,"next","core::slice","",118],[11,"size_hint","","",118],[11,"size_hint","","",118],[11,"next_back","","",118],[6,"Item","collections::slice",""],[11,"next","core::slice","",119],[11,"size_hint","","",119],[11,"size_hint","","",119],[6,"Item","collections::slice",""],[11,"next","core::slice","",120],[11,"size_hint","","",120],[11,"size_hint","","",120],[6,"Item","collections::slice",""],[11,"next","core::slice","",121],[11,"size_hint","","",121],[11,"size_hint","","",121],[6,"Item","collections::slice",""],[11,"next","core::slice","",122],[11,"size_hint","","",122],[11,"size_hint","","",122],[6,"Item","collections::slice",""],[11,"next","core::slice","",123],[11,"size_hint","","",123],[11,"size_hint","","",123],[11,"clone","","",124],[11,"clone_from","","",124],[6,"Item","collections::slice",""],[11,"next","core::slice","",124],[11,"size_hint","","",124],[11,"size_hint","","",124],[11,"clone","","",125],[11,"clone_from","","",125],[6,"Item","collections::slice",""],[11,"next","core::slice","",125],[11,"size_hint","","",125],[11,"size_hint","","",125],[11,"next_back","","",125],[11,"len","","",125],[11,"indexable","","",125],[11,"idx","","",125],[6,"Item","collections::slice",""],[11,"next","core::slice","",126],[11,"size_hint","","",126],[11,"size_hint","","",126],[11,"next_back","","",126],[11,"len","","",126],[6,"Err","collections::slice",""],[11,"eq","core::str","",127],[11,"ne","","",127],[11,"ne","","",127],[11,"clone","","",127],[11,"clone_from","","",127],[11,"fmt","","",127],[11,"fmt","","",127],[11,"description","","",127],[11,"cause","","",127],[11,"fmt","","",128],[11,"clone","","",128],[11,"clone_from","","",128],[11,"eq","","",128],[11,"ne","","",128],[11,"ne","","",128],[11,"assert_receiver_is_total_eq","","",128],[11,"description","","",128],[11,"cause","","",128],[11,"fmt","","",128],[11,"clone","","",129],[11,"clone_from","","",129],[6,"Item","collections::slice",""],[11,"next","core::str","",129],[11,"size_hint","","",129],[11,"size_hint","","",129],[11,"next_back","","",129],[11,"clone","","",130],[11,"clone_from","","",130],[6,"Item","collections::slice",""],[11,"next","core::str","",130],[11,"size_hint","","",130],[11,"size_hint","","",130],[11,"next_back","","",130],[11,"clone","","",131],[11,"clone_from","","",131],[6,"Item","collections::slice",""],[11,"next","core::str","",131],[11,"size_hint","","",131],[11,"size_hint","","",131],[11,"next_back","","",131],[11,"len","","",131],[11,"len","","",131],[11,"clone","","",132],[11,"clone_from","","",132],[6,"Output","collections::slice",""],[11,"call","core::str","",132],[11,"clone","","",133],[11,"clone_from","","",133],[11,"clone","","",134],[11,"clone_from","","",134],[6,"Item","collections::slice",""],[11,"next","core::str","",133],[11,"size_hint","","",133],[11,"next_back","","",133],[6,"Item","collections::slice",""],[11,"next","core::str","",134],[11,"size_hint","","",134],[11,"clone","","",135],[11,"clone_from","","",135],[11,"clone","","",136],[11,"clone_from","","",136],[11,"clone","","",137],[11,"clone_from","","",137],[11,"clone","","",138],[11,"clone_from","","",138],[11,"clone","","",139],[11,"clone_from","","",139],[6,"Item","collections::slice",""],[11,"next","core::str","",138],[11,"size_hint","","",138],[6,"Item","collections::slice",""],[11,"next","core::str","",139],[11,"size_hint","","",139],[6,"Output","collections::slice",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"clone","core::str","",140],[11,"clone_from","","",140],[6,"Item","collections::slice",""],[11,"next","core::str","",140],[11,"size_hint","","",140],[11,"size_hint","","",140],[11,"next_back","","",140],[11,"clone","","",141],[11,"clone_from","","",141],[6,"Item","collections::slice",""],[11,"next","core::str","",141],[11,"size_hint","","",141],[11,"size_hint","","",141],[11,"next_back","","",141],[11,"clone","","",142],[11,"clone_from","","",142],[6,"Item","collections::slice",""],[11,"next","core::str","",142],[11,"size_hint","","",142],[11,"size_hint","","",142],[11,"clone","","",143],[11,"clone_from","","",143],[6,"Item","collections::slice",""],[11,"next","core::str","",143],[11,"size_hint","","",143],[11,"size_hint","","",143],[6,"Item","collections::slice",""],[11,"next","core::str","",144],[11,"size_hint","","",144],[11,"size_hint","","",144],[11,"next_back","","",144],[6,"Item","collections::slice",""],[11,"next","core::str","",145],[11,"size_hint","","",145],[11,"size_hint","","",145],[11,"next_back","","",145],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",146],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",146],[11,"result","","Returns the computed hash.",146],[11,"write","","",146],[6,"Output","collections::slice",""],[11,"reset","core::hash::sip","",146],[11,"finish","","",146],[11,"clone","","",146],[11,"clone_from","","",146],[11,"default","","",146],[11,"hash","core::borrow","",55],[11,"eq","core::fmt::num","",147],[11,"ne","","",147],[11,"ne","","",147],[11,"clone","","",147],[11,"clone_from","","",147],[11,"eq","","",148],[11,"ne","","",148],[11,"ne","","",148],[11,"clone","","",148],[11,"clone_from","","",148],[11,"eq","","",149],[11,"ne","","",149],[11,"ne","","",149],[11,"clone","","",149],[11,"clone_from","","",149],[11,"eq","","",150],[11,"ne","","",150],[11,"ne","","",150],[11,"clone","","",150],[11,"clone_from","","",150],[11,"eq","","",151],[11,"ne","","",151],[11,"ne","","",151],[11,"clone","","",151],[11,"clone_from","","",151],[11,"eq","","",152],[11,"ne","","",152],[11,"ne","","",152],[11,"clone","","",152],[11,"clone_from","","",152],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"fmt","","",153],[11,"eq","core::fmt::rt::v1","",154],[11,"ne","","",154],[11,"ne","","",154],[11,"fmt","core::fmt","",155],[11,"fmt","","",156],[11,"fmt","","",156],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",157],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",157],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",157],[11,"write_fmt","","Writes some formatted information into this instance",157],[11,"flags","","Flags for formatting (packed version of rt::Flag)",157],[11,"fill","","Character used as 'fill' whenever there is alignment",157],[11,"align","","Flag indicating what form of alignment was requested",157],[11,"width","","Optionally specified integer width that the output should be",157],[11,"precision","","Optionally specified precision for numeric types",157],[11,"fmt","","",155],[11,"fmt","core::cell","",56],[11,"fmt","","",58],[11,"fmt","","",60],[11,"fmt","","",62],[6,"Iter","collections::slice",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",158],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[3,"Iter","","Immutable slice iterator"],[3,"IterMut","","Mutable slice iterator."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",159],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",159],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",159],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",159],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","collections::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",160],[5,"copy_memory","","Copies data from `src` to `dst`"],[5,"mut_ref_slice","collections::slice","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"from_raw_buf","","Forms a slice from a pointer and a length."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[3,"ElementSwaps","","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[8,"SliceExt","","Allocating extension methods for slices."],[16,"Item","collections::slice::SliceExt",""],[10,"sort_by","collections::slice","Sorts the slice, in place, using `compare` to compare\nelements.",161],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",161],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",161],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",161],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",161],[10,"split_at","","Divides one slice into two at an index.",161],[10,"iter","","Returns an iterator over the slice.",161],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",161],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",161],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",161],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",161],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",161],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",161],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",161],[10,"tail","","Returns all but the first element of a slice.",161],[10,"init","","Returns all but the last element of a slice.",161],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",161],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",161],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",161],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",161],[10,"len","","Return the number of elements in the slice",161],[11,"is_empty","","Returns true if the slice has a length of 0",161],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",161],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",161],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",161],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",161],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",161],[10,"iter_mut","","Returns an iterator that allows modifying each value",161],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",161],[10,"tail_mut","","Returns all but the first element of a mutable slice",161],[10,"init_mut","","Returns all but the last element of a mutable slice",161],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",161],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",161],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",161],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",161],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",161],[10,"swap","","Swaps two elements in a slice.",161],[10,"split_at_mut","","Divides one `&mut` into two at an index.",161],[10,"reverse","","Reverse the order of elements in a slice, in place.",161],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",161],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",161],[10,"to_vec","","Copies `self` into a new `Vec`.",161],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",161],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",161],[10,"sort","","Sorts the slice, in place.",161],[10,"binary_search","","Binary search a sorted slice for a given element.",161],[11,"binary_search_elem","","Deprecated: use `binary_search` instead.",161],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",161],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",161],[10,"position_elem","","Find the first index containing a matching value.",161],[10,"rposition_elem","","Find the last index containing a matching value.",161],[10,"contains","","Returns true if the slice contains an element with the given value.",161],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",161],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",161],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",161],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",162],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",162],[6,"Item","",""],[11,"clone","","",163],[11,"new","","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",163],[6,"Item","",""],[11,"next","","",163],[11,"size_hint","","",163],[6,"Item","",""],[11,"next","","",164],[11,"size_hint","","",164],[0,"str","collections","Unicode string manipulation (`str` type)"],[8,"FromStr","collections::str","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","collections::str::FromStr",""],[10,"from_str","collections::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",165],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",128],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",128],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",166],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",167],[12,"next","","Index of the first byte of the next `char`",167],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",168],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",168],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[11,"clone","unicode::tables::grapheme","",169],[11,"clone_from","","",169],[11,"clone","unicode::u_str","",170],[11,"clone_from","","",170],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",170],[11,"size_hint","","",170],[11,"size_hint","","",170],[11,"next_back","","",170],[11,"clone","","",171],[11,"clone_from","","",171],[11,"assert_receiver_is_total_eq","","",172],[11,"eq","","",172],[11,"ne","","",172],[11,"ne","","",172],[6,"Item","collections::str",""],[11,"size_hint","unicode::u_str","",171],[11,"next","","",171],[11,"size_hint","","",171],[11,"next_back","","",171],[11,"clone","","",173],[11,"clone_from","","",173],[11,"fmt","","",174],[11,"clone","","",174],[11,"clone_from","","",174],[11,"assert_receiver_is_total_eq","","",174],[11,"eq","","",174],[11,"ne","","",174],[11,"ne","","",174],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",174],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",173],[11,"size_hint","","",173],[11,"size_hint","","",173],[11,"clone","","",175],[11,"clone_from","","",175],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",175],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",175],[11,"size_hint","","",175],[11,"size_hint","","",175],[6,"Item","collections::str",""],[11,"next","unicode::u_str","",176],[11,"size_hint","","",176],[11,"next_back","","",176],[3,"Words","collections::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[3,"Decompositions","","External iterator for a string's decomposition's characters.\nUse with the `std::iter` module."],[3,"Recompositions","","External iterator for a string's recomposition's characters.\nUse with the `std::iter` module."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits.\nUse with the `std::iter` module."],[8,"StrExt","","Any string that can be represented as a slice."],[11,"escape_default","","Escapes each char in `s` with `char::escape_default`.",177],[11,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",177],[11,"replace","","Replaces all occurrences of one string with another.",177],[11,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",177],[11,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",177],[11,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",177],[11,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",177],[11,"contains","","Returns true if a string contains a string pattern.",177],[11,"contains_char","","Returns true if a string contains a char pattern.",177],[11,"chars","","An iterator over the characters of `self`. Note, this iterates\nover Unicode code-points, not Unicode graphemes.",177],[11,"bytes","","An iterator over the bytes of `self`",177],[11,"char_indices","","An iterator over the characters of `self` and their byte offsets.",177],[11,"split","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`.",177],[11,"splitn","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`, restricted to splitting at most `count`\ntimes.",177],[11,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`.",177],[11,"rsplitn","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`, starting from the end of the string.\nRestricted to splitting at most `count` times.",177],[11,"match_indices","","An iterator over the start and end indices of the disjoint\nmatches of the pattern `pat` within `self`.",177],[11,"split_str","","An iterator over the substrings of `self` separated by the pattern `sep`.",177],[11,"lines","","An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",177],[11,"lines_any","","An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",177],[10,"slice","","Deprecated: use `s[a .. b]` instead.",177],[10,"slice_from","","Deprecated: use `s[a..]` instead.",177],[10,"slice_to","","Deprecated: use `s[..a]` instead.",177],[11,"slice_chars","","Returns a slice of the string from the character range\n[`begin`..`end`).",177],[11,"slice_unchecked","","Takes a bytewise (not UTF-8) slice from a string.",177],[11,"starts_with","","Returns true if the pattern `pat` is a prefix of the string.",177],[11,"ends_with","","Returns true if the pattern `pat` is a suffix of the string.",177],[11,"trim_matches","","Returns a string with all pre- and suffixes that match\nthe pattern `pat` repeatedly removed.",177],[11,"trim_left_matches","","Returns a string with all prefixes that match\nthe pattern `pat` repeatedly removed.",177],[11,"trim_right_matches","","Returns a string with all suffixes that match\nthe pattern `pat` repeatedly removed.",177],[11,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",177],[11,"char_range_at","","Pluck a character out of a string and return the index of the next\ncharacter.",177],[11,"char_range_at_reverse","","Given a byte position and a str, return the previous char and its position.",177],[11,"char_at","","Plucks the character starting at the `i`th byte of a string.",177],[11,"char_at_reverse","","Plucks the character ending at the `i`th byte of a string.",177],[11,"as_bytes","","Work with the byte buffer of a string as a byte slice.",177],[11,"find","","Returns the byte index of the first character of `self` that\nmatches the pattern `pat`.",177],[11,"rfind","","Returns the byte index of the last character of `self` that\nmatches the pattern `pat`.",177],[11,"find_str","","Returns the byte index of the first matching substring",177],[11,"slice_shift_char","","Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\nNone is returned instead.",177],[11,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",177],[11,"as_ptr","","Return an unsafe pointer to the strings buffer.",177],[11,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",177],[11,"len","","Return the number of bytes in this string",177],[11,"is_empty","","Returns true if this slice contains no bytes",177],[11,"parse","","Parse this string into the specified type.",177],[11,"graphemes","","Returns an iterator over the\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\nof the string.",177],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters of self and their byte offsets.\nSee `graphemes()` method for more information.",177],[11,"words","","An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",177],[11,"width","","Returns a string's displayed width in columns, treating control\ncharacters as zero-width.",177],[11,"trim","","Returns a string with leading and trailing whitespace removed.",177],[11,"trim_left","","Returns a string with leading whitespace removed.",177],[11,"trim_right","","Returns a string with trailing whitespace removed.",177],[11,"clone","","",178],[6,"Item","",""],[11,"next","","",178],[11,"size_hint","","",178],[11,"clone","","",179],[6,"Item","",""],[11,"next","","",179],[11,"clone","","",180],[6,"Item","",""],[11,"next","","",180],[11,"size_hint","","",180],[0,"string","collections","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","collections::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[6,"CowString","","A clone-on-write string"],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",181],[11,"cmp","","",182],[11,"partial_cmp","","",182],[11,"lt","","",182],[11,"le","","",182],[11,"gt","","",182],[11,"ge","","",182],[11,"clone","","",182],[11,"fmt","","",183],[11,"fmt","","",184],[11,"new","","Creates a new string buffer initialized with the empty string.",182],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",182],[11,"from_str","","Creates a new string buffer from the given string.",182],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",182],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",182],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",182],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",182],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",182],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",182],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",182],[11,"push_str","","Pushes the given string onto this string buffer.",182],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",182],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",182],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",182],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",182],[11,"push","","Adds the given character to the end of the string.",182],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",182],[11,"truncate","","Shortens a string to the specified length.",182],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",182],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",182],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",182],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",182],[11,"len","","Return the number of bytes in this string.",182],[11,"is_empty","","Returns true if the string contains no bytes",182],[11,"clear","","Truncates the string, returning it to 0 length.",182],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",183],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",183],[11,"fmt","","",183],[11,"description","","",183],[11,"fmt","","",184],[11,"description","","",184],[11,"from_iter","","",182],[11,"from_iter","","",182],[11,"extend","","",182],[11,"extend","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"eq","","",182],[11,"ne","","",182],[11,"eq","","",185],[11,"ne","","",185],[11,"eq","","",182],[11,"ne","","",182],[11,"eq","","",185],[11,"ne","","",185],[11,"as_slice","","",182],[11,"default","","",182],[11,"fmt","","",182],[11,"fmt","","",182],[11,"hash","","",182],[6,"Output","",""],[11,"add","","",182],[6,"Output","",""],[11,"index","","",182],[6,"Output","",""],[11,"index","","",182],[6,"Output","",""],[11,"index","","",182],[6,"Output","",""],[11,"index","","",182],[6,"Target","",""],[11,"deref","","",182],[6,"Target","",""],[11,"deref","","",186],[6,"Err","",""],[11,"from_str","","",182],[11,"into_cow","","",182],[11,"as_slice","","",185],[11,"write_str","","",182],[0,"vec","collections","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","collections::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[6,"CowVec","","A clone-on-write vector"],[11,"new","","Constructs a new, empty `Vec<T>`.",187],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",187],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",187],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",187],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",187],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",187],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",187],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",187],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",187],[11,"truncate","","Shorten a vector, dropping excess elements.",187],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",187],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",187],[11,"set_len","","Sets the length of a vector.",187],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",187],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",187],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",187],[11,"retain","","Retains only the elements specified by the predicate.",187],[11,"push","","Appends an element to the back of a collection.",187],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",187],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",187],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",187],[11,"clear","","Clears the vector, removing all values.",187],[11,"len","","Returns the number of elements in the vector.",187],[11,"is_empty","","Returns `true` if the vector contains no elements.",187],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",187],[11,"split_off","","Splits the collection into two at the given index.",187],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",187],[11,"push_all","","Appends all elements in a slice to the `Vec`.",187],[11,"dedup","","Removes consecutive repeated elements in the vector.",187],[11,"clone","","",187],[11,"clone_from","","",187],[11,"hash","","",187],[6,"Output","",""],[11,"index","","",187],[6,"Output","",""],[11,"index_mut","","",187],[6,"Output","",""],[11,"index","","",187],[6,"Output","",""],[11,"index","","",187],[6,"Output","",""],[11,"index","","",187],[6,"Output","",""],[11,"index","","",187],[6,"Output","",""],[11,"index_mut","","",187],[6,"Output","",""],[11,"index_mut","","",187],[6,"Output","",""],[11,"index_mut","","",187],[6,"Output","",""],[11,"index_mut","","",187],[6,"Target","",""],[11,"deref","","",187],[11,"deref_mut","","",187],[11,"from_iter","","",187],[6,"Iter","",""],[11,"into_iter","","",187],[6,"Iter","",""],[6,"Iter","",""],[11,"extend","","",187],[11,"eq","","",187],[11,"ne","","",187],[11,"eq","","",187],[11,"ne","","",187],[11,"eq","","",187],[11,"ne","","",187],[11,"eq","","",188],[11,"ne","","",188],[11,"eq","","",187],[11,"ne","","",187],[11,"eq","","",188],[11,"ne","","",188],[11,"eq","","",188],[11,"ne","","",188],[11,"partial_cmp","","",187],[11,"cmp","","",187],[11,"as_slice","","Returns a slice into `self`.",187],[6,"Output","",""],[11,"add","","",187],[11,"drop","","",187],[11,"default","","",187],[11,"fmt","","",187],[11,"from_iter","","",188],[11,"into_cow","","",187],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",189],[6,"Item","",""],[11,"next","","",189],[11,"size_hint","","",189],[11,"next_back","","",189],[11,"drop","","",189],[6,"Item","",""],[11,"next","","",190],[11,"size_hint","","",190],[11,"next_back","","",190],[11,"drop","","",190],[6,"Target","",""],[11,"deref","","",191],[11,"drop","","",191],[0,"vec_map","collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","collections::vec_map","A map optimized for small integer keys."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[11,"default","","",192],[11,"clone","","",192],[11,"clone_from","","",192],[11,"hash","","",192],[11,"new","","Creates an empty `VecMap`.",192],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",192],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",192],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",192],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",192],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `uint`.",192],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",192],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(uint, &'r V)`.",192],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",192],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(uint, &'r V)`.",192],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(uint, &'r V)`. Keeps the allocated memory for reuse.",192],[11,"len","","Return the number of elements in the map.",192],[11,"is_empty","","Return true if the map contains no elements.",192],[11,"clear","","Clears the map, removing all key-value pairs.",192],[11,"get","","Returns a reference to the value corresponding to the key.",192],[11,"contains_key","","Returns true if the map contains a value for the specified key.",192],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",192],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",192],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",192],[11,"eq","","",192],[11,"partial_cmp","","",192],[11,"cmp","","",192],[11,"fmt","","",192],[11,"from_iter","","",192],[6,"Iter","",""],[11,"into_iter","","",192],[6,"Iter","",""],[6,"Iter","",""],[11,"extend","","",192],[6,"Output","",""],[11,"index","","",192],[6,"Output","",""],[11,"index_mut","","",192],[11,"clone","","",193],[6,"Item","",""],[11,"next","","",193],[11,"size_hint","","",193],[11,"next_back","","",193],[6,"Item","",""],[11,"next","","",194],[11,"size_hint","","",194],[11,"next_back","","",194],[11,"clone","","",195],[11,"clone","","",196],[6,"Item","",""],[11,"next","","",197],[11,"size_hint","","",197],[11,"next_back","","",197],[6,"Item","",""],[11,"next","","",195],[11,"size_hint","","",195],[11,"next_back","","",195],[6,"Item","",""],[11,"next","","",196],[11,"size_hint","","",196],[11,"next_back","","",196],[6,"Item","",""],[11,"next","","",198],[11,"size_hint","","",198],[11,"next_back","","",198],[0,"bitv","collections",""],[3,"Iter","collections::bitv","An iterator for `Bitv`."],[0,"bitv_set","collections",""],[3,"Union","collections::bitv_set",""],[3,"Intersection","",""],[3,"Difference","",""],[3,"SymmetricDifference","",""],[3,"Iter","","An iterator for `BitvSet`."],[0,"btree_map","collections",""],[3,"BTreeMap","collections::btree_map","A map based on a B-Tree."],[3,"Iter","","An iterator over a BTreeMap's entries."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[3,"Keys","","An iterator over a BTreeMap's keys."],[3,"Values","","An iterator over a BTreeMap's values."],[3,"Range","","An iterator over a sub-range of BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[3,"VacantEntry","","A vacant Entry."],[3,"OccupiedEntry","","An occupied Entry."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",199],[13,"Occupied","","An occupied Entry",199],[11,"clone","collections","",13],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",13],[11,"with_b","","Makes a new empty BTreeMap with the given B.",13],[11,"clear","","Clears the map, removing all values.",13],[11,"get","","Returns a reference to the value corresponding to the key.",13],[11,"contains_key","","Returns true if the map contains a value for the specified key.",13],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",13],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",13],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",13],[6,"Iter","collections::btree_map",""],[11,"into_iter","collections","",13],[6,"Iter","collections::btree_map",""],[6,"Iter","",""],[11,"from_iter","collections","",13],[11,"extend","","",13],[11,"hash","","",13],[11,"default","","",13],[11,"eq","","",13],[11,"partial_cmp","","",13],[11,"cmp","","",13],[11,"fmt","","",13],[6,"Output","collections::btree_map",""],[11,"index","collections","",13],[6,"Output","collections::btree_map",""],[11,"index_mut","collections","",13],[6,"Item","collections::btree_map",""],[11,"next","","",200],[11,"size_hint","","",200],[11,"next_back","","",200],[6,"Item","",""],[11,"next","","",201],[11,"size_hint","","",201],[11,"next_back","","",201],[6,"Item","",""],[11,"next","","",202],[11,"size_hint","","",202],[11,"next_back","","",202],[6,"Item","",""],[11,"next","","",203],[11,"size_hint","","",203],[11,"next_back","","",203],[6,"Item","",""],[11,"next","","",204],[11,"size_hint","","",204],[11,"next_back","","",204],[6,"Item","",""],[11,"next","","",205],[11,"next_back","","",205],[6,"Item","",""],[11,"next","","",206],[11,"next_back","","",206],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",199],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",207],[11,"get","","Gets a reference to the value in the entry.",208],[11,"get_mut","","Gets a mutable reference to the value in the entry.",208],[11,"into_mut","","Converts the entry into a mutable reference to its value.",208],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",208],[11,"remove","","Takes the value of the entry out of the map, and returns it.",208],[11,"iter","collections","Gets an iterator over the entries of the map.",13],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",13],[11,"into_iter","","Gets an owning iterator over the entries of the map.",13],[11,"keys","","Gets an iterator over the keys of the map.",13],[11,"values","","Gets an iterator over the values of the map.",13],[11,"len","","Return the number of elements in the map.",13],[11,"is_empty","","Return true if the map contains no elements.",13],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",13],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",13],[0,"btree_set","",""],[3,"BTreeSet","collections::btree_set","A set based on a B-Tree."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[3,"Union","","A lazy iterator producing elements in the set union (in-order)."],[11,"partial_cmp","collections","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"cmp","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"hash","","",14],[11,"clone","","",14],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",14],[11,"with_b","","Makes a new BTreeSet with the given B.",14],[11,"iter","","Gets an iterator over the BTreeSet's contents.",14],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",14],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",14],[11,"difference","","Visits the values representing the difference, in ascending order.",14],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",14],[11,"intersection","","Visits the values representing the intersection, in ascending order.",14],[11,"union","","Visits the values representing the union, in ascending order.",14],[11,"len","","Return the number of elements in the set",14],[11,"is_empty","","Returns true if the set contains no elements",14],[11,"clear","","Clears the set, removing all values.",14],[11,"contains","","Returns `true` if the set contains a value.",14],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",14],[11,"is_subset","","Returns `true` if the set is a subset of another.",14],[11,"is_superset","","Returns `true` if the set is a superset of another.",14],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",14],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",14],[11,"from_iter","","",14],[6,"Iter","collections::btree_set",""],[11,"into_iter","collections","",14],[6,"Iter","collections::btree_set",""],[11,"extend","collections","",14],[11,"default","","",14],[6,"Output","collections::btree_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections","",14],[6,"Item","collections::btree_set",""],[11,"next","","",209],[11,"size_hint","","",209],[11,"next_back","","",209],[6,"Item","",""],[11,"next","","",210],[11,"size_hint","","",210],[11,"next_back","","",210],[6,"Item","",""],[11,"next","","",211],[11,"next_back","","",211],[6,"Item","",""],[11,"next","","",212],[6,"Item","",""],[11,"next","","",213],[6,"Item","",""],[11,"next","","",214],[6,"Item","",""],[11,"next","","",215],[14,"vec!","collections","Creates a `Vec` containing the arguments."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (`str` type)"],[11,"clone","collections::bitv","",216],[11,"next","","",216],[11,"size_hint","","",216],[11,"next_back","","",216],[11,"indexable","","",216],[11,"idx","","",216],[11,"clone","collections::bitv_set","",217],[11,"next","","",217],[11,"size_hint","","",217],[11,"next","","",218],[11,"size_hint","","",218],[11,"next","","",219],[11,"size_hint","","",219],[11,"next","","",220],[11,"size_hint","","",220],[11,"next","","",221],[11,"size_hint","","",221],[11,"next","collections::btree_map","",200],[11,"size_hint","","",200],[11,"next_back","","",200],[11,"next","","",201],[11,"size_hint","","",201],[11,"next_back","","",201],[11,"next","","",202],[11,"size_hint","","",202],[11,"next_back","","",202],[11,"next","","",203],[11,"size_hint","","",203],[11,"next_back","","",203],[11,"next","","",204],[11,"size_hint","","",204],[11,"next_back","","",204],[11,"next","","",205],[11,"next_back","","",205],[11,"next","","",206],[11,"next_back","","",206],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",199],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",207],[11,"get","","Gets a reference to the value in the entry.",208],[11,"get_mut","","Gets a mutable reference to the value in the entry.",208],[11,"into_mut","","Converts the entry into a mutable reference to its value.",208],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",208],[11,"remove","","Takes the value of the entry out of the map, and returns it.",208],[11,"next","collections::btree_set","",209],[11,"size_hint","","",209],[11,"next_back","","",209],[11,"next","","",210],[11,"size_hint","","",210],[11,"next_back","","",210],[11,"next","","",211],[11,"next_back","","",211],[11,"next","","",212],[11,"next","","",213],[11,"next","","",214],[11,"next","","",215]],"paths":[[3,"Box"],[3,"Arc"],[3,"Weak"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[4,"Bound"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Bitv"],[3,"BitvSet"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"DList"],[3,"IterMut"],[8,"CLike"],[3,"EnumSet"],[3,"Iter"],[3,"RingBuf"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"CovariantType"],[3,"ContravariantType"],[3,"InvariantType"],[3,"CovariantLifetime"],[3,"ContravariantLifetime"],[3,"InvariantLifetime"],[3,"NoCopy"],[3,"Managed"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[4,"Cow"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Enumerate"],[3,"Inspect"],[3,"Rev"],[3,"Map"],[3,"Zip"],[3,"ByRef"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Filter"],[3,"FilterMap"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"NaiveSearcher"],[3,"TwoWaySearcher"],[4,"Searcher"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"AsSlice"],[8,"IntSliceExt"],[8,"MutableByteVector"],[8,"SliceExt"],[8,"SliceConcatExt"],[3,"ElementSwaps"],[3,"Permutations"],[8,"FromStr"],[8,"Str"],[3,"CharRange"],[8,"CharEq"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[8,"StrExt"],[3,"Decompositions"],[3,"Recompositions"],[3,"Utf16Units"],[8,"ToString"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[6,"CowString"],[3,"DerefString"],[3,"Vec"],[6,"CowVec"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"VecMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[4,"Entry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};

searchIndex['serialize'] = {"items":[[0,"","serialize","Support code for encoding and decoding types."],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[11,"encode","collections::dlist","",10],[11,"decode","","",10],[11,"encode","collections::ring_buf","",11],[11,"decode","","",11],[11,"encode","collections::btree::map","",12],[11,"decode","","",12],[11,"encode","collections::btree::set","",13],[11,"decode","","",13],[11,"encode","collections::enum_set","",14],[11,"decode","","",14],[11,"encode","std::collections::hash::map","",15],[11,"decode","","",15],[11,"encode","std::collections::hash::set","",16],[11,"decode","","",16],[11,"encode","collections::vec_map","",17],[11,"decode","","",17],[0,"hex","serialize","Hex binary-to-text encoding"],[4,"FromHexError","serialize::hex","Errors that can occur when decoding a hex encoded string"],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",18],[13,"InvalidHexLength","","The input had an invalid length",18],[8,"ToHex","","A trait for converting a value to hexadecimal encoding"],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",19],[8,"FromHex","","A trait for converting hexadecimal encoded values"],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",20],[11,"fmt","","",18],[11,"fmt","","",18],[11,"description","","",18],[0,"json","serialize","JSON parsing and serialization"],[3,"PrettyJson","serialize::json",""],[3,"AsJson","",""],[3,"AsPrettyJson","",""],[3,"Encoder","","A structure for implementing serialization to JSON."],[3,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[3,"Decoder","","A structure to decode JSON to values in rust."],[4,"Json","","Represents a json value"],[13,"I64","","",21],[13,"U64","","",21],[13,"F64","","",21],[13,"String","","",21],[13,"Boolean","","",21],[13,"Array","","",21],[13,"Object","","",21],[13,"Null","","",21],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[13,"InvalidSyntax","","",22],[13,"InvalidNumber","","",22],[13,"EOFWhileParsingObject","","",22],[13,"EOFWhileParsingArray","","",22],[13,"EOFWhileParsingValue","","",22],[13,"EOFWhileParsingString","","",22],[13,"KeyMustBeAString","","",22],[13,"ExpectedColon","","",22],[13,"TrailingCharacters","","",22],[13,"TrailingComma","","",22],[13,"InvalidEscape","","",22],[13,"InvalidUnicodeCodePoint","","",22],[13,"LoneLeadingSurrogateInHexEscape","","",22],[13,"UnexpectedEndOfHexEscape","","",22],[13,"UnrecognizedHex","","",22],[13,"NotFourDigit","","",22],[13,"NotUtf8","","",22],[4,"ParserError","",""],[13,"SyntaxError","","msg, line, col",23],[13,"IoError","","",23],[4,"DecoderError","",""],[13,"ParseError","","",24],[13,"ExpectedError","","",24],[13,"MissingFieldError","","",24],[13,"UnknownVariantError","","",24],[13,"ApplicationError","","",24],[4,"EncoderError","",""],[13,"FmtError","","",25],[13,"BadHashmapKey","","",25],[4,"JsonEvent","","The output of the streaming parser."],[13,"ObjectStart","","",26],[13,"ObjectEnd","","",26],[13,"ArrayStart","","",26],[13,"ArrayEnd","","",26],[13,"BooleanValue","","",26],[13,"I64Value","","",26],[13,"U64Value","","",26],[13,"F64Value","","",26],[13,"StringValue","","",26],[13,"NullValue","","",26],[13,"Error","","",26],[4,"StackElement","","StackElements compose a Stack.\nFor example, StackElement::Key(\"foo\"), StackElement::Key(\"bar\"),\nStackElement::Index(3) and StackElement::Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[13,"Index","","",27],[13,"Key","","",27],[5,"error_str","","Returns a readable error string for a given error code."],[5,"decode","","Shortcut function to decode a JSON `&str` into an object"],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[5,"from_reader","","Decodes a json value from an `&mut old_io::Reader`"],[5,"from_str","","Decodes a json value from a string"],[6,"Array","",""],[6,"Object","",""],[6,"BuilderError","",""],[6,"EncodeResult","",""],[6,"DecodeResult","",""],[8,"ToJson","","A trait for converting values to JSON"],[10,"to_json","","Converts the value of `self` to an instance of JSON",28],[11,"fmt","","",21],[11,"partial_cmp","","",21],[11,"lt","","",21],[11,"le","","",21],[11,"gt","","",21],[11,"ge","","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"fmt","","",22],[11,"eq","","",22],[11,"ne","","",22],[11,"clone","","",22],[11,"fmt","","",23],[11,"eq","","",23],[11,"ne","","",23],[11,"clone","","",23],[11,"fmt","","",24],[11,"eq","","",24],[11,"ne","","",24],[11,"clone","","",24],[11,"fmt","","",25],[11,"fmt","","",22],[11,"fmt","","",23],[11,"fmt","","",24],[11,"description","","",24],[11,"fmt","","",25],[11,"description","","",25],[11,"from_error","","",25],[11,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",29],[6,"Error","",""],[11,"emit_nil","","",29],[11,"emit_uint","","",29],[11,"emit_u64","","",29],[11,"emit_u32","","",29],[11,"emit_u16","","",29],[11,"emit_u8","","",29],[11,"emit_int","","",29],[11,"emit_i64","","",29],[11,"emit_i32","","",29],[11,"emit_i16","","",29],[11,"emit_i8","","",29],[11,"emit_bool","","",29],[11,"emit_f64","","",29],[11,"emit_f32","","",29],[11,"emit_char","","",29],[11,"emit_str","","",29],[11,"emit_enum","","",29],[11,"emit_enum_variant","","",29],[11,"emit_enum_variant_arg","","",29],[11,"emit_enum_struct_variant","","",29],[11,"emit_enum_struct_variant_field","","",29],[11,"emit_struct","","",29],[11,"emit_struct_field","","",29],[11,"emit_tuple","","",29],[11,"emit_tuple_arg","","",29],[11,"emit_tuple_struct","","",29],[11,"emit_tuple_struct_arg","","",29],[11,"emit_option","","",29],[11,"emit_option_none","","",29],[11,"emit_option_some","","",29],[11,"emit_seq","","",29],[11,"emit_seq_elt","","",29],[11,"emit_map","","",29],[11,"emit_map_elt_key","","",29],[11,"emit_map_elt_val","","",29],[11,"new","","Creates a new encoder whose output will be written to the specified writer",30],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",30],[6,"Error","",""],[11,"emit_nil","","",30],[11,"emit_uint","","",30],[11,"emit_u64","","",30],[11,"emit_u32","","",30],[11,"emit_u16","","",30],[11,"emit_u8","","",30],[11,"emit_int","","",30],[11,"emit_i64","","",30],[11,"emit_i32","","",30],[11,"emit_i16","","",30],[11,"emit_i8","","",30],[11,"emit_bool","","",30],[11,"emit_f64","","",30],[11,"emit_f32","","",30],[11,"emit_char","","",30],[11,"emit_str","","",30],[11,"emit_enum","","",30],[11,"emit_enum_variant","","",30],[11,"emit_enum_variant_arg","","",30],[11,"emit_enum_struct_variant","","",30],[11,"emit_enum_struct_variant_field","","",30],[11,"emit_struct","","",30],[11,"emit_struct_field","","",30],[11,"emit_tuple","","",30],[11,"emit_tuple_arg","","",30],[11,"emit_tuple_struct","","",30],[11,"emit_tuple_struct_arg","","",30],[11,"emit_option","","",30],[11,"emit_option_none","","",30],[11,"emit_option_some","","",30],[11,"emit_seq","","",30],[11,"emit_seq_elt","","",30],[11,"emit_map","","",30],[11,"emit_map_elt_key","","",30],[11,"emit_map_elt_val","","",30],[11,"encode","","",21],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",21],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",21],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",21],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",21],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",21],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",21],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",21],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",21],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",21],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",21],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",21],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",21],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",21],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",21],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",21],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",21],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",21],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",21],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",21],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",21],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",21],[6,"Output","",""],[11,"index","","",21],[6,"Output","",""],[11,"index","","",21],[11,"fmt","","",26],[11,"clone","","",26],[11,"eq","","",26],[11,"ne","","",26],[11,"fmt","","",27],[11,"clone","","",27],[11,"eq","","",27],[11,"ne","","",27],[11,"new","","",31],[11,"len","","Returns The number of elements in the Stack.",31],[11,"is_empty","","Returns true if the stack is empty.",31],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",31],[11,"is_equal_to","","Compares this stack with an array of StackElements.",31],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",31],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",31],[11,"top","","Returns the top-most element (if any).",31],[6,"Item","",""],[11,"next","","",32],[11,"new","","Creates the JSON parser.",32],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",32],[11,"new","","Create a JSON Builder.",33],[11,"build","","",33],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",34],[6,"Error","",""],[11,"read_nil","","",34],[11,"read_uint","","",34],[11,"read_u8","","",34],[11,"read_u16","","",34],[11,"read_u32","","",34],[11,"read_u64","","",34],[11,"read_int","","",34],[11,"read_i8","","",34],[11,"read_i16","","",34],[11,"read_i32","","",34],[11,"read_i64","","",34],[11,"read_f32","","",34],[11,"read_f64","","",34],[11,"read_bool","","",34],[11,"read_char","","",34],[11,"read_str","","",34],[11,"read_enum","","",34],[11,"read_enum_variant","","",34],[11,"read_enum_variant_arg","","",34],[11,"read_enum_struct_variant","","",34],[11,"read_enum_struct_variant_field","","",34],[11,"read_struct","","",34],[11,"read_struct_field","","",34],[11,"read_tuple","","",34],[11,"read_tuple_arg","","",34],[11,"read_tuple_struct","","",34],[11,"read_tuple_struct_arg","","",34],[11,"read_option","","",34],[11,"read_seq","","",34],[11,"read_seq_elt","","",34],[11,"read_map","","",34],[11,"read_map_elt_key","","",34],[11,"read_map_elt_val","","",34],[11,"error","","",34],[11,"to_json","","",21],[11,"to_json","collections::string","",0],[11,"to_json","collections::vec","",3],[11,"to_json","collections::btree::map","",12],[11,"to_json","std::collections::hash::map","",15],[11,"to_json","core::option","",4],[11,"fmt","serialize::json","Encodes a json value into a string",21],[11,"fmt","","Encodes a json value into a string",35],[11,"fmt","","Encodes a json value into a string",36],[11,"indent","","Set the indentation level for the emitted JSON",37],[11,"fmt","","Encodes a json value into a string",37],[6,"Err","",""],[11,"from_str","","",21],[11,"encode","collections::string","",0],[11,"decode","","",0],[11,"encode","alloc::boxed","",1],[11,"decode","","",1],[11,"decode","","",1],[11,"encode","alloc::rc","",2],[11,"decode","","",2],[11,"encode","collections::vec","",3],[11,"decode","","",3],[11,"encode","core::option","",4],[11,"decode","","",4],[11,"encode","std::path::posix","",5],[11,"decode","","",5],[11,"encode","std::path::windows","",6],[11,"decode","","",6],[11,"encode","core::cell","",7],[11,"decode","","",7],[11,"encode","","",8],[11,"decode","","",8],[11,"encode","alloc::arc","",9],[11,"decode","","",9],[8,"Decoder","serialize",""],[16,"Error","serialize::Decoder",""],[10,"read_nil","serialize","",38],[10,"read_uint","","",38],[10,"read_u64","","",38],[10,"read_u32","","",38],[10,"read_u16","","",38],[10,"read_u8","","",38],[10,"read_int","","",38],[10,"read_i64","","",38],[10,"read_i32","","",38],[10,"read_i16","","",38],[10,"read_i8","","",38],[10,"read_bool","","",38],[10,"read_f64","","",38],[10,"read_f32","","",38],[10,"read_char","","",38],[10,"read_str","","",38],[10,"read_enum","","",38],[10,"read_enum_variant","","",38],[10,"read_enum_variant_arg","","",38],[10,"read_enum_struct_variant","","",38],[10,"read_enum_struct_variant_field","","",38],[10,"read_struct","","",38],[10,"read_struct_field","","",38],[10,"read_tuple","","",38],[10,"read_tuple_arg","","",38],[10,"read_tuple_struct","","",38],[10,"read_tuple_struct_arg","","",38],[10,"read_option","","",38],[10,"read_seq","","",38],[10,"read_seq_elt","","",38],[10,"read_map","","",38],[10,"read_map_elt_key","","",38],[10,"read_map_elt_val","","",38],[10,"error","","",38],[8,"Encoder","",""],[16,"Error","serialize::Encoder",""],[10,"emit_nil","serialize","",39],[10,"emit_uint","","",39],[10,"emit_u64","","",39],[10,"emit_u32","","",39],[10,"emit_u16","","",39],[10,"emit_u8","","",39],[10,"emit_int","","",39],[10,"emit_i64","","",39],[10,"emit_i32","","",39],[10,"emit_i16","","",39],[10,"emit_i8","","",39],[10,"emit_bool","","",39],[10,"emit_f64","","",39],[10,"emit_f32","","",39],[10,"emit_char","","",39],[10,"emit_str","","",39],[10,"emit_enum","","",39],[10,"emit_enum_variant","","",39],[10,"emit_enum_variant_arg","","",39],[10,"emit_enum_struct_variant","","",39],[10,"emit_enum_struct_variant_field","","",39],[10,"emit_struct","","",39],[10,"emit_struct_field","","",39],[10,"emit_tuple","","",39],[10,"emit_tuple_arg","","",39],[10,"emit_tuple_struct","","",39],[10,"emit_tuple_struct_arg","","",39],[10,"emit_option","","",39],[10,"emit_option_none","","",39],[10,"emit_option_some","","",39],[10,"emit_seq","","",39],[10,"emit_seq_elt","","",39],[10,"emit_map","","",39],[10,"emit_map_elt_key","","",39],[10,"emit_map_elt_val","","",39],[8,"Decodable","",""],[10,"decode","","",40],[8,"Encodable","",""],[10,"encode","","",41],[8,"DecoderHelpers","",""],[10,"read_to_vec","","",42],[8,"EncoderHelpers","",""],[10,"emit_from_vec","","",43]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[3,"Vec"],[4,"Option"],[3,"Path"],[3,"Path"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"DList"],[3,"RingBuf"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"EnumSet"],[3,"HashMap"],[3,"HashSet"],[3,"VecMap"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"PrettyEncoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};

searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library."],[3,"WriterWrapper","","A hack to work around the fact that `Box<Writer + Send>` does not\ncurrently implement `Writer`."],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened."],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened."],[0,"terminfo","","Terminfo database interface."],[3,"TermInfo","term::terminfo","A parsed terminfo database entry."],[12,"names","","Names for the terminal",0],[12,"bools","","Map of capability name to boolean value",0],[12,"numbers","","Map of capability name to numeric value",0],[12,"strings","","Map of capability name to raw (unexpanded) string",0],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record."],[0,"searcher","","ncurses-compatible database discovery"],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`"],[5,"open","","Return open file for `term`"],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))"],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))"],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames` is true"],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals"],[7,"boolfnames","",""],[7,"boolnames","",""],[7,"numfnames","",""],[7,"numnames","",""],[7,"stringfnames","",""],[7,"stringnames","",""],[0,"parm","term::terminfo","Parameterized string expansion"],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays"],[4,"Param","","Types of parameters a capability can use"],[13,"Words","","",1],[13,"Number","","",1],[5,"expand","","Expand a parameterized capability"],[11,"clone","","",1],[11,"new","","Return a new zero-initialized Variables",2],[11,"fmt","term::terminfo","",0],[11,"fg","","",3],[11,"bg","","",3],[11,"attr","","",3],[11,"supports_attr","","",3],[11,"reset","","",3],[11,"get_ref","","",3],[11,"get_mut","","",3],[11,"unwrap","","",3],[11,"new","","Returns `None` whenever the terminal cannot be created for some\nreason.",3],[11,"write_all","","",3],[11,"flush","","",3],[0,"color","term","Terminal color definitions"],[6,"Color","term::color","Number for a terminal color"],[17,"BLACK","",""],[17,"RED","",""],[17,"GREEN","",""],[17,"YELLOW","",""],[17,"BLUE","",""],[17,"MAGENTA","",""],[17,"CYAN","",""],[17,"WHITE","",""],[17,"BRIGHT_BLACK","",""],[17,"BRIGHT_RED","",""],[17,"BRIGHT_GREEN","",""],[17,"BRIGHT_YELLOW","",""],[17,"BRIGHT_BLUE","",""],[17,"BRIGHT_MAGENTA","",""],[17,"BRIGHT_CYAN","",""],[17,"BRIGHT_WHITE","",""],[0,"attr","term","Terminal attributes"],[4,"Attr","term::attr","Terminal attributes for use with term.attr()."],[13,"Bold","","Bold (or possibly bright) mode",4],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",4],[13,"Italic","","Italics mode. Often not supported",4],[13,"Underline","","Underline mode",4],[13,"Blink","","Blink mode",4],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",4],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",4],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",4],[13,"ForegroundColor","","Convenience attribute to set the foreground color",4],[13,"BackgroundColor","","Convenience attribute to set the background color",4],[8,"Terminal","term","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc)."],[10,"fg","","Sets the foreground color to the given color.",5],[10,"bg","","Sets the background color to the given color.",5],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(true)`\nif the attribute was supported, `Ok(false)` otherwise, and `Err(e)` if\nthere was an I/O error.",5],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",5],[10,"reset","","Resets all terminal attributes and color to the default.\nReturns `Ok()`.",5],[10,"get_ref","","Gets an immutable reference to the stream inside",5],[10,"get_mut","","Gets a mutable reference to the stream inside",5],[8,"UnwrappableTerminal","","A terminal which can be unwrapped."],[10,"unwrap","","Returns the contained stream, destroying the `Terminal`",6],[11,"write_all","","",7],[11,"flush","","",7]],"paths":[[3,"TermInfo"],[4,"Param"],[3,"Variables"],[3,"TerminfoTerminal"],[4,"Attr"],[8,"Terminal"],[8,"UnwrappableTerminal"],[3,"WriterWrapper"]]};

searchIndex['arena'] = {"items":[[0,"","arena","The arena, a fast but limited type of allocator."],[3,"Arena","","A slower reflection-based arena that can allocate objects of any type."],[3,"TypedArena","","A faster arena that can hold objects of only one type."],[11,"new","","Allocates a new Arena with 32 bytes preallocated.",0],[11,"new_with_size","","Allocates a new Arena with `initial_size` bytes preallocated.",0],[11,"drop","","",0],[11,"alloc","","Allocates a new item in the arena, using `op` to initialize the value,\nand returns a reference to it.",0],[11,"new","","Creates a new `TypedArena` with preallocated space for eight objects.",1],[11,"with_capacity","","Creates a new `TypedArena` with preallocated space for the given number of\nobjects.",1],[11,"alloc","","Allocates an object in the `TypedArena`, returning a reference to it.",1],[11,"drop","","",1]],"paths":[[3,"Arena"],[3,"TypedArena"]]};

searchIndex['flate'] = {"items":[[0,"","flate","Simple [DEFLATE][def]-based compression. This is a wrapper around the\n[`miniz`][mz] library, which is a one-file pure-C implementation of zlib."],[3,"Bytes","",""],[5,"deflate_bytes","","Compress a buffer, without writing any sort of header on the output."],[5,"deflate_bytes_zlib","","Compress a buffer, using a header that zlib can understand."],[5,"inflate_bytes","","Decompress a buffer, without parsing any sort of header on the input."],[5,"inflate_bytes_zlib","","Decompress a buffer that starts with a zlib header."],[6,"Target","",""],[11,"deref","","",0],[11,"drop","","",0]],"paths":[[3,"Bytes"]]};

searchIndex['std'] = {"items":[[0,"","std","# The Rust Standard Library"],[0,"any","","Traits for dynamic typing of any `'static` type (through runtime reflection)"],[8,"Any","std::any","The `Any` trait is implemented by all `'static` types, and can be used for\ndynamic typing"],[10,"get_type_id","","Get the `TypeId` of `self`",0],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",1],[11,"fmt","core::num","",2],[11,"eq","","",2],[11,"ne","","",2],[11,"ne","","",2],[6,"Err","std::any",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[6,"Err","",""],[11,"eq","core::num","",3],[11,"ne","","",3],[11,"ne","","",3],[11,"clone","","",3],[11,"clone_from","","",3],[11,"fmt","","",3],[11,"eq","","",4],[11,"ne","","",4],[11,"ne","","",4],[11,"clone","","",4],[11,"clone_from","","",4],[11,"fmt","","",4],[11,"fmt","","",3],[11,"description","","",3],[11,"cause","","",3],[11,"eq","","",5],[11,"ne","","",5],[11,"ne","","",5],[11,"clone","","",5],[11,"clone_from","","",5],[11,"fmt","","",5],[11,"eq","","",6],[11,"ne","","",6],[11,"ne","","",6],[11,"clone","","",6],[11,"clone_from","","",6],[11,"fmt","","",6],[11,"fmt","","",5],[11,"description","","",5],[11,"cause","","",5],[11,"hash","core::nonzero","",7],[11,"fmt","","",7],[11,"partial_cmp","","",7],[11,"lt","","",7],[11,"le","","",7],[11,"gt","","",7],[11,"ge","","",7],[11,"lt","","",7],[11,"le","","",7],[11,"gt","","",7],[11,"ge","","",7],[11,"cmp","","",7],[11,"eq","","",7],[11,"ne","","",7],[11,"ne","","",7],[11,"clone","","",7],[11,"clone_from","","",7],[11,"new","","Create an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",7],[6,"Target","std::any",""],[11,"deref","core::nonzero","",7],[6,"Target","std::any",""],[6,"Target","",""],[6,"Target","",""],[11,"null","core::ptr","Returns a null Unique.",8],[11,"offset","","Return an (unsafe) pointer into the memory owned by `self`.",8],[11,"cmp","core::marker","",9],[11,"partial_cmp","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"lt","","",9],[11,"le","","",9],[11,"gt","","",9],[11,"ge","","",9],[11,"eq","","",9],[11,"ne","","",9],[11,"ne","","",9],[11,"clone","","",9],[11,"clone_from","","",9],[11,"cmp","","",10],[11,"partial_cmp","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"lt","","",10],[11,"le","","",10],[11,"gt","","",10],[11,"ge","","",10],[11,"eq","","",10],[11,"ne","","",10],[11,"ne","","",10],[11,"clone","","",10],[11,"clone_from","","",10],[11,"cmp","","",11],[11,"partial_cmp","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"lt","","",11],[11,"le","","",11],[11,"gt","","",11],[11,"ge","","",11],[11,"eq","","",11],[11,"ne","","",11],[11,"ne","","",11],[11,"clone","","",11],[11,"clone_from","","",11],[11,"cmp","","",12],[11,"partial_cmp","","",12],[11,"lt","","",12],[11,"le","","",12],[11,"gt","","",12],[11,"ge","","",12],[11,"lt","","",12],[11,"le","","",12],[11,"gt","","",12],[11,"ge","","",12],[11,"eq","","",12],[11,"ne","","",12],[11,"ne","","",12],[11,"clone","","",12],[11,"clone_from","","",12],[11,"cmp","","",13],[11,"partial_cmp","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"lt","","",13],[11,"le","","",13],[11,"gt","","",13],[11,"ge","","",13],[11,"eq","","",13],[11,"ne","","",13],[11,"ne","","",13],[11,"clone","","",13],[11,"clone_from","","",13],[11,"cmp","","",14],[11,"partial_cmp","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"lt","","",14],[11,"le","","",14],[11,"gt","","",14],[11,"ge","","",14],[11,"eq","","",14],[11,"ne","","",14],[11,"ne","","",14],[11,"clone","","",14],[11,"clone_from","","",14],[11,"cmp","","",15],[11,"partial_cmp","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"lt","","",15],[11,"le","","",15],[11,"gt","","",15],[11,"ge","","",15],[11,"eq","","",15],[11,"ne","","",15],[11,"ne","","",15],[11,"clone","","",15],[11,"clone_from","","",15],[11,"cmp","","",16],[11,"partial_cmp","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"lt","","",16],[11,"le","","",16],[11,"gt","","",16],[11,"ge","","",16],[11,"eq","","",16],[11,"ne","","",16],[11,"ne","","",16],[11,"clone","","",16],[11,"clone_from","","",16],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"eq","core::ops","",17],[11,"ne","","",17],[11,"ne","","",17],[11,"clone","","",17],[11,"clone_from","","",17],[11,"fmt","","",17],[11,"eq","","",18],[11,"ne","","",18],[11,"ne","","",18],[11,"clone","","",18],[11,"clone_from","","",18],[11,"fmt","","",18],[11,"eq","","",19],[11,"ne","","",19],[11,"ne","","",19],[11,"clone","","",19],[11,"clone_from","","",19],[11,"fmt","","",19],[11,"eq","","",20],[11,"ne","","",20],[11,"ne","","",20],[11,"clone","","",20],[11,"clone_from","","",20],[11,"fmt","","",20],[6,"Target","std::any",""],[6,"Target","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","core::cmp","",21],[11,"eq","","",21],[11,"ne","","",21],[11,"ne","","",21],[11,"clone","","",21],[11,"clone_from","","",21],[11,"reverse","","Reverse the `Ordering`, so that `Less` becomes `Greater` and\nvice versa.",21],[11,"cmp","","",21],[11,"partial_cmp","","",21],[11,"lt","","",21],[11,"le","","",21],[11,"gt","","",21],[11,"ge","","",21],[11,"is","std","Returns true if the boxed type is the same as `T`",0],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",0],[11,"hash","core::any","",1],[11,"fmt","","",1],[11,"eq","","",1],[11,"ne","","",1],[11,"ne","","",1],[11,"clone","","",1],[11,"clone_from","","",1],[11,"new","core::atomic","Creates a new `AtomicBool`.",22],[11,"load","","Loads a value from the bool.",22],[11,"store","","Stores a value into the bool.",22],[11,"swap","","Stores a value into the bool, returning the old value.",22],[11,"compare_and_swap","","Stores a value into the bool if the current value is the same as the expected value.",22],[11,"fetch_and","","Logical \"and\" with a boolean value.",22],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",22],[11,"fetch_or","","Logical \"or\" with a boolean value.",22],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",22],[11,"new","","Creates a new `AtomicIsize`.",23],[11,"load","","Loads a value from the isize.",23],[11,"store","","Stores a value into the isize.",23],[11,"swap","","Stores a value into the isize, returning the old value.",23],[11,"compare_and_swap","","Stores a value into the isize if the current value is the same as the expected value.",23],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",23],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",23],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",23],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",23],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",23],[11,"new","","Creates a new `AtomicUsize`.",24],[11,"load","","Loads a value from the usize.",24],[11,"store","","Stores a value into the usize.",24],[11,"swap","","Stores a value into the usize, returning the old value.",24],[11,"compare_and_swap","","Stores a value into the usize if the current value is the same as the expected value.",24],[11,"fetch_add","","Add to the current usize, returning the previous value.",24],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",24],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",24],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",24],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",24],[11,"new","","Creates a new `AtomicPtr`.",25],[11,"load","","Loads a value from the pointer.",25],[11,"store","","Stores a value into the pointer.",25],[11,"swap","","Stores a value into the pointer, returning the old value.",25],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the expected value.",25],[11,"new","","",26],[11,"load","","",26],[11,"store","","",26],[11,"swap","","",26],[11,"compare_and_swap","","",26],[11,"fetch_add","","",26],[11,"fetch_sub","","",26],[11,"fetch_and","","",26],[11,"fetch_or","","",26],[11,"fetch_xor","","",26],[11,"new","","",27],[11,"load","","",27],[11,"store","","",27],[11,"swap","","",27],[11,"compare_and_swap","","",27],[11,"fetch_add","","",27],[11,"fetch_sub","","",27],[11,"fetch_and","","",27],[11,"fetch_or","","",27],[11,"fetch_xor","","",27],[11,"into_cow","core::borrow","",28],[11,"clone","","",28],[11,"clone_from","","",28],[11,"to_mut","","Acquire a mutable reference to the owned form of the data.",28],[11,"into_owned","","Extract the owned data.",28],[11,"is_borrowed","","Returns true if this `Cow` wraps a borrowed value",28],[11,"is_owned","","Returns true if this `Cow` wraps an owned value",28],[6,"Target","std::any",""],[11,"deref","core::borrow","",28],[11,"cmp","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"partial_cmp","","",28],[11,"lt","","",28],[11,"le","","",28],[11,"gt","","",28],[11,"ge","","",28],[11,"fmt","","",28],[11,"fmt","","",28],[11,"new","core::cell","Creates a new `Cell` containing the given value.",29],[11,"get","","Returns a copy of the contained value.",29],[11,"set","","Sets the contained value.",29],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",29],[11,"clone","","",29],[11,"clone_from","","",29],[11,"default","","",29],[11,"eq","","",29],[11,"ne","","",29],[11,"fmt","","",30],[11,"eq","","",30],[11,"ne","","",30],[11,"ne","","",30],[11,"clone","","",30],[11,"clone_from","","",30],[11,"new","","Creates a new `RefCell` containing `value`.",31],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",31],[11,"borrow_state","","Query the current state of this `RefCell`",31],[11,"try_borrow","","Attempts to immutably borrow the wrapped value.",31],[11,"borrow","","Immutably borrows the wrapped value.",31],[11,"try_borrow_mut","","Mutably borrows the wrapped value.",31],[11,"borrow_mut","","Mutably borrows the wrapped value.",31],[11,"as_unsafe_cell","","Get a reference to the underlying `UnsafeCell`.",31],[11,"clone","","",31],[11,"clone_from","","",31],[11,"default","","",31],[11,"eq","","",31],[11,"ne","","",31],[11,"drop","","",32],[11,"clone","","",32],[11,"clone_from","","",32],[6,"Target","std::any",""],[11,"deref","core::cell","",33],[11,"drop","","",34],[6,"Target","std::any",""],[11,"deref","core::cell","",35],[11,"deref_mut","","",35],[11,"new","","Construct a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36],[11,"get","","Gets a mutable pointer to the wrapped value.",36],[11,"into_inner","","Unwraps the value",36],[11,"clone","core::char","",37],[11,"clone_from","","",37],[11,"clone","","",38],[11,"clone_from","","",38],[6,"Item","std::any",""],[11,"next","core::char","",37],[11,"size_hint","","",37],[11,"clone","","",39],[11,"clone_from","","",39],[11,"clone","","",40],[11,"clone_from","","",40],[6,"Item","std::any",""],[11,"next","core::char","",39],[11,"size_hint","","",39],[11,"drop","core::finally","",41],[6,"Item","std::any",""],[6,"Iter","",""],[11,"len","core::iter","",42],[11,"len","","",43],[11,"len","","",44],[11,"len","","",45],[11,"len","","",46],[11,"clone","","",44],[11,"clone_from","","",44],[6,"Item","std::any",""],[11,"next","core::iter","",44],[11,"size_hint","","",44],[11,"size_hint","","",44],[11,"next_back","","",44],[11,"indexable","","",44],[11,"idx","","",44],[6,"Item","std::any",""],[11,"next","core::iter","",47],[11,"size_hint","","",47],[11,"size_hint","","",47],[11,"next_back","","",47],[11,"len","","",47],[11,"fmt","","",48],[11,"eq","","",48],[11,"ne","","",48],[11,"ne","","",48],[11,"clone","","",48],[11,"clone_from","","",48],[11,"into_option","","`into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n`None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n`Some(x,y)` is returned where `x <= y`. If `MinMaxResult` has variant `OneElement(x)`,\nperforming this operation will make one clone of `x`.",48],[11,"clone","","",49],[11,"clone_from","","",49],[6,"Item","std::any",""],[11,"next","core::iter","",49],[11,"size_hint","","",49],[11,"size_hint","","",49],[11,"next_back","","",49],[11,"len","","",49],[11,"clone","","",50],[11,"clone_from","","",50],[6,"Item","std::any",""],[11,"next","core::iter","",50],[11,"size_hint","","",50],[11,"size_hint","","",50],[11,"indexable","","",50],[11,"idx","","",50],[11,"clone","","",51],[11,"clone_from","","",51],[6,"Item","std::any",""],[11,"next","core::iter","",51],[11,"size_hint","","",51],[11,"size_hint","","",51],[11,"next_back","","",51],[11,"indexable","","",51],[11,"idx","","",51],[11,"clone","","",46],[11,"clone_from","","",46],[6,"Item","std::any",""],[11,"next","core::iter","",46],[11,"size_hint","","",46],[11,"size_hint","","",46],[11,"next_back","","",46],[11,"indexable","","",46],[11,"idx","","",46],[11,"clone","","",45],[11,"clone_from","","",45],[6,"Item","std::any",""],[11,"next","core::iter","",45],[11,"size_hint","","",45],[11,"size_hint","","",45],[11,"next_back","","",45],[11,"indexable","","",45],[11,"idx","","",45],[11,"clone","","",52],[11,"clone_from","","",52],[6,"Item","std::any",""],[11,"next","core::iter","",52],[11,"size_hint","","",52],[11,"size_hint","","",52],[11,"next_back","","",52],[11,"clone","","",53],[11,"clone_from","","",53],[6,"Item","std::any",""],[11,"next","core::iter","",53],[11,"size_hint","","",53],[11,"size_hint","","",53],[11,"next_back","","",53],[11,"clone","","",42],[11,"clone_from","","",42],[6,"Item","std::any",""],[11,"next","core::iter","",42],[11,"size_hint","","",42],[11,"size_hint","","",42],[11,"next_back","","",42],[11,"indexable","","",42],[11,"idx","","",42],[11,"clone","","",54],[11,"clone_from","","",54],[6,"Item","std::any",""],[11,"next","core::iter","",54],[11,"size_hint","","",54],[11,"size_hint","","",54],[11,"len","","",54],[11,"peek","","Return a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",54],[11,"is_empty","","Check whether peekable iterator is empty or not.",54],[11,"clone","","",55],[11,"clone_from","","",55],[6,"Item","std::any",""],[11,"next","core::iter","",55],[11,"size_hint","","",55],[11,"size_hint","","",55],[11,"clone","","",56],[11,"clone_from","","",56],[6,"Item","std::any",""],[11,"next","core::iter","",56],[11,"size_hint","","",56],[11,"size_hint","","",56],[11,"clone","","",57],[11,"clone_from","","",57],[6,"Item","std::any",""],[11,"next","core::iter","",57],[11,"size_hint","","",57],[11,"size_hint","","",57],[11,"indexable","","",57],[11,"idx","","",57],[11,"len","","",57],[11,"clone","","",58],[11,"clone_from","","",58],[6,"Item","std::any",""],[11,"next","core::iter","",58],[11,"size_hint","","",58],[11,"size_hint","","",58],[11,"indexable","","",58],[11,"idx","","",58],[11,"len","","",58],[11,"clone","","",59],[11,"clone_from","","",59],[6,"Item","std::any",""],[11,"next","core::iter","",59],[11,"size_hint","","",59],[11,"size_hint","","",59],[11,"clone","","",60],[11,"clone_from","","",60],[6,"Item","std::any",""],[11,"next","core::iter","",60],[11,"size_hint","","",60],[11,"size_hint","","",60],[11,"next_back","","",60],[11,"clone","","",61],[11,"clone_from","","",61],[6,"Item","std::any",""],[11,"next","core::iter","",61],[11,"size_hint","","",61],[11,"size_hint","","",61],[11,"next_back","","",61],[11,"indexable","","",61],[11,"idx","","",61],[11,"len","","",61],[11,"reset_fuse","","Resets the fuse such that the next call to .next() or .next_back() will\ncall the underlying iterator again even if it previously returned None.",61],[11,"clone","","",43],[11,"clone_from","","",43],[6,"Item","std::any",""],[11,"next","core::iter","",43],[11,"size_hint","","",43],[11,"size_hint","","",43],[11,"next_back","","",43],[11,"indexable","","",43],[11,"idx","","",43],[11,"clone","","",62],[11,"clone_from","","",62],[11,"new","","Creates a new iterator with the specified closure as the \"iterator\nfunction\" and an initial state to eventually pass to the closure",62],[6,"Item","std::any",""],[11,"next","core::iter","",62],[11,"size_hint","","",62],[11,"size_hint","","",62],[11,"clone","","",63],[11,"clone_from","","",63],[6,"Item","std::any",""],[11,"next","core::iter","",63],[11,"size_hint","","",63],[11,"size_hint","","",63],[11,"clone","","",64],[11,"clone_from","","",64],[6,"Item","std::any",""],[11,"next","core::iter","",64],[11,"size_hint","","",64],[11,"size_hint","","",64],[11,"next_back","","",64],[11,"clone","","",65],[11,"clone_from","","",65],[6,"Item","std::any",""],[11,"next","core::iter","",65],[11,"size_hint","","",65],[11,"size_hint","","",65],[11,"next_back","","",65],[11,"clone","","",66],[11,"clone_from","","",66],[6,"Item","std::any",""],[11,"next","core::iter","",66],[11,"size_hint","","",66],[11,"clone","","",67],[11,"clone_from","","",67],[6,"Item","std::any",""],[11,"next","core::iter","",67],[11,"size_hint","","",67],[6,"Item","std::any",""],[11,"next","core::ops","",18],[11,"size_hint","","",18],[11,"size_hint","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"len","","",18],[11,"next_back","","",18],[6,"Item","std::any",""],[11,"next","core::ops","",19],[11,"size_hint","","",19],[11,"clone","core::iter","",68],[11,"clone_from","","",68],[6,"Item","std::any",""],[11,"next","core::iter","",68],[11,"size_hint","","",68],[11,"size_hint","","",68],[11,"next_back","","",68],[11,"indexable","","",68],[11,"idx","","",68],[11,"hash","core::option","",69],[11,"fmt","","",69],[11,"cmp","","",69],[11,"partial_cmp","","",69],[11,"lt","","",69],[11,"le","","",69],[11,"gt","","",69],[11,"ge","","",69],[11,"lt","","",69],[11,"le","","",69],[11,"gt","","",69],[11,"ge","","",69],[11,"eq","","",69],[11,"ne","","",69],[11,"ne","","",69],[11,"clone","","",69],[11,"clone_from","","",69],[11,"is_some","","Returns `true` if the option is a `Some` value",69],[11,"is_none","","Returns `true` if the option is a `None` value",69],[11,"as_ref","","Convert from `Option<T>` to `Option<&T>`",69],[11,"as_mut","","Convert from `Option<T>` to `Option<&mut T>`",69],[11,"as_mut_slice","","Convert from `Option<T>` to `&mut [T]` (without copying)",69],[11,"expect","","Unwraps an option, yielding the content of a `Some`",69],[11,"unwrap","","Returns the inner `T` of a `Some(T)`.",69],[11,"unwrap_or","","Returns the contained value or a default.",69],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",69],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",69],[11,"map_or","","Applies a function to the contained value or returns a default.",69],[11,"map_or_else","","Applies a function to the contained value or computes a default.",69],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",69],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",69],[11,"iter","","Returns an iterator over the possibly contained value.",69],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",69],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",69],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",69],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",69],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",69],[11,"cloned","","Maps an Option<D> to an Option<T> by dereffing and cloning the contents of the Option.\nUseful for converting an Option<&T> to an Option<T>.",69],[11,"unwrap_or_default","","Returns the contained value or a default",69],[11,"as_slice","","Convert from `Option<T>` to `&[T]` (without copying)",69],[11,"default","","",69],[11,"clone","","",70],[11,"clone_from","","",70],[6,"Item","std::any",""],[11,"next","core::option","",70],[11,"size_hint","","",70],[11,"size_hint","","",70],[11,"next_back","","",70],[11,"len","","",70],[6,"Item","std::any",""],[11,"next","core::option","",71],[11,"size_hint","","",71],[11,"size_hint","","",71],[11,"next_back","","",71],[11,"len","","",71],[11,"clone","","",71],[11,"clone_from","","",71],[6,"Item","std::any",""],[11,"next","core::option","",72],[11,"size_hint","","",72],[11,"size_hint","","",72],[11,"next_back","","",72],[11,"len","","",72],[6,"Item","std::any",""],[11,"next","core::option","",73],[11,"size_hint","","",73],[11,"size_hint","","",73],[11,"next_back","","",73],[11,"len","","",73],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",69],[11,"hash","core::result","",74],[11,"fmt","","",74],[11,"cmp","","",74],[11,"partial_cmp","","",74],[11,"lt","","",74],[11,"le","","",74],[11,"gt","","",74],[11,"ge","","",74],[11,"lt","","",74],[11,"le","","",74],[11,"gt","","",74],[11,"ge","","",74],[11,"eq","","",74],[11,"ne","","",74],[11,"ne","","",74],[11,"clone","","",74],[11,"clone_from","","",74],[11,"is_ok","","Returns true if the result is `Ok`",74],[11,"is_err","","Returns true if the result is `Err`",74],[11,"ok","","Convert from `Result<T, E>` to `Option<T>`",74],[11,"err","","Convert from `Result<T, E>` to `Option<E>`",74],[11,"as_ref","","Convert from `Result<T, E>` to `Result<&T, &E>`",74],[11,"as_mut","","Convert from `Result<T, E>` to `Result<&mut T, &mut E>`",74],[11,"as_mut_slice","","Convert from `Result<T, E>` to `&mut [T]` (without copying)",74],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",74],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",74],[11,"iter","","Returns an iterator over the possibly contained value.",74],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",74],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",74],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",74],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",74],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",74],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",74],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",74],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",74],[11,"as_slice","","Convert from `Result<T, E>` to `&[T]` (without copying)",74],[6,"Item","std::any",""],[11,"next","core::result","",75],[11,"size_hint","","",75],[11,"size_hint","","",75],[11,"next_back","","",75],[11,"len","","",75],[11,"clone","","",75],[11,"clone_from","","",75],[6,"Item","std::any",""],[11,"next","core::result","",76],[11,"size_hint","","",76],[11,"size_hint","","",76],[11,"next_back","","",76],[11,"len","","",76],[6,"Item","std::any",""],[11,"next","core::result","",77],[11,"size_hint","","",77],[11,"size_hint","","",77],[11,"next_back","","",77],[11,"len","","",77],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",74],[11,"fmt","core::simd","",78],[11,"fmt","","",79],[11,"fmt","","",80],[11,"fmt","","",81],[11,"fmt","","",82],[11,"fmt","","",83],[11,"fmt","","",84],[11,"fmt","","",85],[11,"fmt","","",86],[11,"fmt","","",87],[6,"Item","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Output","",""],[11,"index","core::slice","",88],[6,"Output","std::any",""],[11,"index","core::slice","",88],[6,"Output","std::any",""],[11,"index","core::slice","",88],[6,"Output","std::any",""],[11,"index","core::slice","",88],[11,"as_slice","","View the underlying data as a subslice of the original data.",88],[6,"Item","std::any",""],[11,"next","core::slice","",88],[11,"size_hint","","",88],[11,"size_hint","","",88],[11,"next_back","","",88],[11,"len","","",88],[11,"clone","","",88],[11,"clone_from","","",88],[11,"indexable","","",88],[11,"idx","","",88],[6,"Output","std::any",""],[11,"index","core::slice","",89],[6,"Output","std::any",""],[11,"index","core::slice","",89],[6,"Output","std::any",""],[11,"index","core::slice","",89],[6,"Output","std::any",""],[11,"index","core::slice","",89],[6,"Output","std::any",""],[11,"index_mut","core::slice","",89],[6,"Output","std::any",""],[11,"index_mut","core::slice","",89],[6,"Output","std::any",""],[11,"index_mut","core::slice","",89],[6,"Output","std::any",""],[11,"index_mut","core::slice","",89],[11,"into_slice","","View the underlying data as a subslice of the original data.",89],[6,"Item","std::any",""],[11,"next","core::slice","",89],[11,"size_hint","","",89],[11,"size_hint","","",89],[11,"next_back","","",89],[11,"len","","",89],[11,"clone","","",90],[11,"clone_from","","",90],[6,"Item","std::any",""],[11,"next","core::slice","",90],[11,"size_hint","","",90],[11,"size_hint","","",90],[11,"next_back","","",90],[11,"finish","","",90],[11,"finish","","",91],[6,"Item","std::any",""],[11,"next","core::slice","",91],[11,"size_hint","","",91],[11,"size_hint","","",91],[11,"next_back","","",91],[6,"Item","std::any",""],[11,"next","core::slice","",92],[11,"size_hint","","",92],[11,"size_hint","","",92],[6,"Item","std::any",""],[11,"next","core::slice","",93],[11,"size_hint","","",93],[11,"size_hint","","",93],[6,"Item","std::any",""],[11,"next","core::slice","",94],[11,"size_hint","","",94],[11,"size_hint","","",94],[6,"Item","std::any",""],[11,"next","core::slice","",95],[11,"size_hint","","",95],[11,"size_hint","","",95],[6,"Item","std::any",""],[11,"next","core::slice","",96],[11,"size_hint","","",96],[11,"size_hint","","",96],[11,"clone","","",97],[11,"clone_from","","",97],[6,"Item","std::any",""],[11,"next","core::slice","",97],[11,"size_hint","","",97],[11,"size_hint","","",97],[11,"clone","","",98],[11,"clone_from","","",98],[6,"Item","std::any",""],[11,"next","core::slice","",98],[11,"size_hint","","",98],[11,"size_hint","","",98],[11,"next_back","","",98],[11,"len","","",98],[11,"indexable","","",98],[11,"idx","","",98],[6,"Item","std::any",""],[11,"next","core::slice","",99],[11,"size_hint","","",99],[11,"size_hint","","",99],[11,"next_back","","",99],[11,"len","","",99],[6,"Err","std::any",""],[11,"eq","core::str","",100],[11,"ne","","",100],[11,"ne","","",100],[11,"clone","","",100],[11,"clone_from","","",100],[11,"fmt","","",100],[11,"fmt","","",100],[11,"description","","",100],[11,"cause","","",100],[11,"fmt","","",101],[11,"clone","","",101],[11,"clone_from","","",101],[11,"eq","","",101],[11,"ne","","",101],[11,"ne","","",101],[11,"description","","",101],[11,"cause","","",101],[11,"fmt","","",101],[11,"clone","","",102],[11,"clone_from","","",102],[6,"Item","std::any",""],[11,"next","core::str","",102],[11,"size_hint","","",102],[11,"size_hint","","",102],[11,"next_back","","",102],[11,"clone","","",103],[11,"clone_from","","",103],[6,"Item","std::any",""],[11,"next","core::str","",103],[11,"size_hint","","",103],[11,"size_hint","","",103],[11,"next_back","","",103],[11,"clone","","",104],[11,"clone_from","","",104],[6,"Item","std::any",""],[11,"next","core::str","",104],[11,"size_hint","","",104],[11,"size_hint","","",104],[11,"next_back","","",104],[11,"len","","",104],[11,"len","","",104],[11,"clone","","",105],[11,"clone_from","","",105],[6,"Output","std::any",""],[11,"call","core::str","",105],[11,"clone","","",106],[11,"clone_from","","",106],[11,"clone","","",107],[11,"clone_from","","",107],[6,"Item","std::any",""],[11,"next","core::str","",106],[11,"size_hint","","",106],[11,"next_back","","",106],[6,"Item","std::any",""],[11,"next","core::str","",107],[11,"size_hint","","",107],[11,"clone","","",108],[11,"clone_from","","",108],[11,"clone","","",109],[11,"clone_from","","",109],[11,"clone","","",110],[11,"clone_from","","",110],[11,"clone","","",111],[11,"clone_from","","",111],[11,"clone","","",112],[11,"clone_from","","",112],[6,"Item","std::any",""],[11,"next","core::str","",111],[11,"size_hint","","",111],[6,"Item","std::any",""],[11,"next","core::str","",112],[11,"size_hint","","",112],[6,"Output","std::any",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"clone","core::str","",113],[11,"clone_from","","",113],[6,"Item","std::any",""],[11,"next","core::str","",113],[11,"size_hint","","",113],[11,"size_hint","","",113],[11,"next_back","","",113],[11,"clone","","",114],[11,"clone_from","","",114],[6,"Item","std::any",""],[11,"next","core::str","",114],[11,"size_hint","","",114],[11,"size_hint","","",114],[11,"next_back","","",114],[11,"clone","","",115],[11,"clone_from","","",115],[6,"Item","std::any",""],[11,"next","core::str","",115],[11,"size_hint","","",115],[11,"size_hint","","",115],[11,"clone","","",116],[11,"clone_from","","",116],[6,"Item","std::any",""],[11,"next","core::str","",116],[11,"size_hint","","",116],[11,"size_hint","","",116],[6,"Item","std::any",""],[11,"next","core::str","",117],[11,"size_hint","","",117],[11,"size_hint","","",117],[11,"next_back","","",117],[6,"Item","std::any",""],[11,"next","core::str","",118],[11,"size_hint","","",118],[11,"size_hint","","",118],[11,"next_back","","",118],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",119],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",119],[11,"result","","Returns the computed hash.",119],[11,"write","","",119],[6,"Output","std::any",""],[11,"reset","core::hash::sip","",119],[11,"finish","","",119],[11,"clone","","",119],[11,"clone_from","","",119],[11,"default","","",119],[11,"hash","core::borrow","",28],[11,"eq","core::fmt::num","",120],[11,"ne","","",120],[11,"ne","","",120],[11,"clone","","",120],[11,"clone_from","","",120],[11,"eq","","",121],[11,"ne","","",121],[11,"ne","","",121],[11,"clone","","",121],[11,"clone_from","","",121],[11,"eq","","",122],[11,"ne","","",122],[11,"ne","","",122],[11,"clone","","",122],[11,"clone_from","","",122],[11,"eq","","",123],[11,"ne","","",123],[11,"ne","","",123],[11,"clone","","",123],[11,"clone_from","","",123],[11,"eq","","",124],[11,"ne","","",124],[11,"ne","","",124],[11,"clone","","",124],[11,"clone_from","","",124],[11,"eq","","",125],[11,"ne","","",125],[11,"ne","","",125],[11,"clone","","",125],[11,"clone_from","","",125],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"fmt","","",126],[11,"eq","core::fmt::rt::v1","",127],[11,"ne","","",127],[11,"ne","","",127],[11,"fmt","core::fmt","",128],[11,"fmt","","",129],[11,"fmt","","",129],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",130],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",130],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",130],[11,"write_fmt","","Writes some formatted information into this instance",130],[11,"flags","","Flags for formatting (packed version of rt::Flag)",130],[11,"fill","","Character used as 'fill' whenever there is alignment",130],[11,"align","","Flag indicating what form of alignment was requested",130],[11,"width","","Optionally specified integer width that the output should be",130],[11,"precision","","Optionally specified precision for numeric types",130],[11,"fmt","","",128],[11,"fmt","core::cell","",29],[11,"fmt","","",31],[11,"fmt","","",33],[11,"fmt","","",35],[6,"Iter","std::any",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type."],[0,"borrow","std","A module for working with borrowed data."],[8,"BorrowFrom","std::borrow","A trait for borrowing data."],[10,"borrow_from","","Immutably borrow from an owned value.",131],[8,"BorrowFromMut","","A trait for mutably borrowing data."],[10,"borrow_from_mut","","Mutably borrow from an owned value.",132],[8,"IntoCow","","Trait for moving into a `Cow`"],[10,"into_cow","","Moves `self` into `Cow`",133],[8,"ToOwned","","A generalization of Clone to borrowed data."],[10,"to_owned","","Create owned data from borrowed data, usually by copying.",134],[4,"Cow","","A clone-on-write smart pointer."],[13,"Borrowed","","Borrowed data.",28],[13,"Owned","","Owned data.",28],[0,"cell","std","Shareable mutable containers."],[3,"Cell","std::cell","A mutable memory location that admits only `Copy` data."],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules"],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell<T>`."],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",30],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",30],[13,"Unused","","There are no outstanding borrows on this cell.",30],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell<T>`."],[5,"clone_ref","","Copy a `Ref`."],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell<T>`."],[3,"UnsafeCell","","The core primitive for interior mutability in Rust."],[12,"value","","Wrapped value",36],[0,"clone","std","The `Clone` trait for types that cannot be 'implicitly copied'"],[8,"Clone","std::clone","A common trait for cloning an object."],[10,"clone","","Returns a copy of the value.",135],[10,"clone_from","","Perform copy-assignment from `source`.",135],[0,"cmp","std","Defines the `PartialOrd` and `PartialEq` comparison traits."],[8,"PartialEq","std::cmp","Trait for equality comparisons which are [partial equivalence relations](\nhttp://en.wikipedia.org/wiki/Partial_equivalence_relation)."],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used by `==`.",136],[10,"ne","","This method tests for `!=`.",136],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation)."],[4,"Ordering","","An ordering is, e.g, a result of a comparison between two values."],[13,"Less","","An ordering where a compared value is less [than another].",21],[13,"Equal","","An ordering where a compared value is equal [to another].",21],[13,"Greater","","An ordering where a compared value is greater [than another].",21],[8,"Ord","","Trait for types that form a [total order](\nhttps://en.wikipedia.org/wiki/Total_order)."],[10,"cmp","","This method returns an ordering between `self` and `other` values.",137],[8,"PartialOrd","","Trait for values that can be compared for a sort-order."],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values\nif one exists.",138],[10,"lt","","This method tests less than (for `self` and `other`) and is used by the `<` operator.",138],[10,"le","","This method tests less than or equal to (`<=`).",138],[10,"gt","","This method tests greater than (`>`).",138],[10,"ge","","This method tests greater than or equal to (`>=`).",138],[5,"min","","Compare and return the minimum of two values."],[5,"max","","Compare and return the maximum of two values."],[5,"partial_min","","Compare and return the minimum of two values if there is one."],[5,"partial_max","","Compare and return the maximum of two values if there is one."],[0,"default","std","The `Default` trait for types which may have meaningful default values."],[8,"Default","std::default","A trait that types which have a useful default value should implement."],[10,"default","","Returns the \"default value\" for a type.",139],[0,"finally","std","The Finally trait provides a method, `finally` on\nstack closures that emulates Java-style try/finally blocks."],[8,"Finally","std::finally","A trait for executing a destructor unconditionally after a block of code,\nregardless of whether the blocked fails."],[10,"finally","","Executes this object, unconditionally running `dtor` after this block of\ncode has run.",140],[5,"try_finally","","The most general form of the `finally` functions. The function\n`try_fn` will be invoked first; whether or not it panics, the\nfunction `finally_fn` will be invoked next. The two parameters\n`mutate` and `drop` are used to thread state through the two\nclosures. `mutate` is used for any shared, mutable state that both\nclosures require access to; `drop` is used for any state that the\n`try_fn` requires ownership of."],[0,"hash","std","Generic hashing support."],[8,"Hash","std::hash","A hashable type."],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",141],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes."],[16,"Output","std::hash::Hasher",""],[10,"reset","std::hash","Resets this hasher back to its initial state (as if it were just\ncreated).",142],[10,"finish","","Completes a round of hashing, producing the output hash generated.",142],[8,"Writer","","A common bound on the `Hasher` parameter to `Hash` implementations in order\nto generically hash an aggregate."],[10,"write","","",143],[5,"hash","","Hash a value with the default SipHasher algorithm (two initial keys of 0)."],[3,"SipHasher","","An implementation of SipHash 2-4."],[0,"intrinsics","std","rustc compiler intrinsics."],[6,"GlueFn","std::intrinsics",""],[3,"TyDesc","",""],[12,"size","","",144],[12,"align","","",144],[12,"drop_glue","","",144],[12,"name","","",144],[5,"atomic_cxchg","",""],[5,"atomic_cxchg_acq","",""],[5,"atomic_cxchg_rel","",""],[5,"atomic_cxchg_acqrel","",""],[5,"atomic_cxchg_relaxed","",""],[5,"atomic_load","",""],[5,"atomic_load_acq","",""],[5,"atomic_load_relaxed","",""],[5,"atomic_load_unordered","",""],[5,"atomic_store","",""],[5,"atomic_store_rel","",""],[5,"atomic_store_relaxed","",""],[5,"atomic_store_unordered","",""],[5,"atomic_xchg","",""],[5,"atomic_xchg_acq","",""],[5,"atomic_xchg_rel","",""],[5,"atomic_xchg_acqrel","",""],[5,"atomic_xchg_relaxed","",""],[5,"atomic_xadd","",""],[5,"atomic_xadd_acq","",""],[5,"atomic_xadd_rel","",""],[5,"atomic_xadd_acqrel","",""],[5,"atomic_xadd_relaxed","",""],[5,"atomic_xsub","",""],[5,"atomic_xsub_acq","",""],[5,"atomic_xsub_rel","",""],[5,"atomic_xsub_acqrel","",""],[5,"atomic_xsub_relaxed","",""],[5,"atomic_and","",""],[5,"atomic_and_acq","",""],[5,"atomic_and_rel","",""],[5,"atomic_and_acqrel","",""],[5,"atomic_and_relaxed","",""],[5,"atomic_nand","",""],[5,"atomic_nand_acq","",""],[5,"atomic_nand_rel","",""],[5,"atomic_nand_acqrel","",""],[5,"atomic_nand_relaxed","",""],[5,"atomic_or","",""],[5,"atomic_or_acq","",""],[5,"atomic_or_rel","",""],[5,"atomic_or_acqrel","",""],[5,"atomic_or_relaxed","",""],[5,"atomic_xor","",""],[5,"atomic_xor_acq","",""],[5,"atomic_xor_rel","",""],[5,"atomic_xor_acqrel","",""],[5,"atomic_xor_relaxed","",""],[5,"atomic_max","",""],[5,"atomic_max_acq","",""],[5,"atomic_max_rel","",""],[5,"atomic_max_acqrel","",""],[5,"atomic_max_relaxed","",""],[5,"atomic_min","",""],[5,"atomic_min_acq","",""],[5,"atomic_min_rel","",""],[5,"atomic_min_acqrel","",""],[5,"atomic_min_relaxed","",""],[5,"atomic_umin","",""],[5,"atomic_umin_acq","",""],[5,"atomic_umin_rel","",""],[5,"atomic_umin_acqrel","",""],[5,"atomic_umin_relaxed","",""],[5,"atomic_umax","",""],[5,"atomic_umax_acq","",""],[5,"atomic_umax_rel","",""],[5,"atomic_umax_acqrel","",""],[5,"atomic_umax_relaxed","",""],[5,"atomic_fence","",""],[5,"atomic_fence_acq","",""],[5,"atomic_fence_rel","",""],[5,"atomic_fence_acqrel","",""],[5,"abort","","Abort the execution of the process."],[5,"unreachable","","Tell LLVM that this point in the code is not reachable,\nenabling further optimizations."],[5,"assume","","Inform the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined."],[5,"breakpoint","","Execute a breakpoint trap, for inspection by a debugger."],[5,"size_of","","The size of a type in bytes."],[5,"move_val_init","","Move a value to an uninitialized memory location."],[5,"min_align_of","",""],[5,"pref_align_of","",""],[5,"get_tydesc","","Get a static pointer to a type descriptor."],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in."],[5,"init","","Create a value initialized to zero."],[5,"uninit","","Create an uninitialized value."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[5,"return_address","","Gives the address for the return value of the enclosing function."],[5,"needs_drop","","Returns `true` if a type requires drop glue."],[5,"owns_managed","","Returns `true` if a type is managed (will be allocated on the local heap)"],[5,"offset","","Calculates the offset from a pointer. The offset *must* be in-bounds of\nthe object, or one-byte-past-the-end. An arithmetic overflow is also\nundefined behaviour."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`"],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::<T>()` and an alignment of\n`min_align_of::<T>()`."],[5,"volatile_load","","Perform a volatile load from the `src` pointer."],[5,"volatile_store","","Perform a volatile store to the `dst` pointer."],[5,"sqrtf32","","Returns the square root of an `f32`"],[5,"sqrtf64","","Returns the square root of an `f64`"],[5,"powif32","","Raises an `f32` to an integer power."],[5,"powif64","","Raises an `f64` to an integer power."],[5,"sinf32","","Returns the sine of an `f32`."],[5,"sinf64","","Returns the sine of an `f64`."],[5,"cosf32","","Returns the cosine of an `f32`."],[5,"cosf64","","Returns the cosine of an `f64`."],[5,"powf32","","Raises an `f32` to an `f32` power."],[5,"powf64","","Raises an `f64` to an `f64` power."],[5,"expf32","","Returns the exponential of an `f32`."],[5,"expf64","","Returns the exponential of an `f64`."],[5,"exp2f32","","Returns 2 raised to the power of an `f32`."],[5,"exp2f64","","Returns 2 raised to the power of an `f64`."],[5,"logf32","","Returns the natural logarithm of an `f32`."],[5,"logf64","","Returns the natural logarithm of an `f64`."],[5,"log10f32","","Returns the base 10 logarithm of an `f32`."],[5,"log10f64","","Returns the base 10 logarithm of an `f64`."],[5,"log2f32","","Returns the base 2 logarithm of an `f32`."],[5,"log2f64","","Returns the base 2 logarithm of an `f64`."],[5,"fmaf32","","Returns `a * b + c` for `f32` values."],[5,"fmaf64","","Returns `a * b + c` for `f64` values."],[5,"fabsf32","","Returns the absolute value of an `f32`."],[5,"fabsf64","","Returns the absolute value of an `f64`."],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values."],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values."],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`."],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`."],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`."],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`."],[5,"truncf32","","Returns the integer part of an `f32`."],[5,"truncf64","","Returns the integer part of an `f64`."],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer."],[5,"nearbyintf32","","Returns the nearest integer to an `f32`."],[5,"nearbyintf64","","Returns the nearest integer to an `f64`."],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero."],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero."],[5,"ctpop8","","Returns the number of bits set in a `u8`."],[5,"ctpop16","","Returns the number of bits set in a `u16`."],[5,"ctpop32","","Returns the number of bits set in a `u32`."],[5,"ctpop64","","Returns the number of bits set in a `u64`."],[5,"ctlz8","","Returns the number of leading bits unset in a `u8`."],[5,"ctlz16","","Returns the number of leading bits unset in a `u16`."],[5,"ctlz32","","Returns the number of leading bits unset in a `u32`."],[5,"ctlz64","","Returns the number of leading bits unset in a `u64`."],[5,"cttz8","","Returns the number of trailing bits unset in a `u8`."],[5,"cttz16","","Returns the number of trailing bits unset in a `u16`."],[5,"cttz32","","Returns the number of trailing bits unset in a `u32`."],[5,"cttz64","","Returns the number of trailing bits unset in a `u64`."],[5,"bswap16","","Reverses the bytes in a `u16`."],[5,"bswap32","","Reverses the bytes in a `u32`."],[5,"bswap64","","Reverses the bytes in a `u64`."],[5,"i8_add_with_overflow","","Performs checked `i8` addition."],[5,"i16_add_with_overflow","","Performs checked `i16` addition."],[5,"i32_add_with_overflow","","Performs checked `i32` addition."],[5,"i64_add_with_overflow","","Performs checked `i64` addition."],[5,"u8_add_with_overflow","","Performs checked `u8` addition."],[5,"u16_add_with_overflow","","Performs checked `u16` addition."],[5,"u32_add_with_overflow","","Performs checked `u32` addition."],[5,"u64_add_with_overflow","","Performs checked `u64` addition."],[5,"i8_sub_with_overflow","","Performs checked `i8` subtraction."],[5,"i16_sub_with_overflow","","Performs checked `i16` subtraction."],[5,"i32_sub_with_overflow","","Performs checked `i32` subtraction."],[5,"i64_sub_with_overflow","","Performs checked `i64` subtraction."],[5,"u8_sub_with_overflow","","Performs checked `u8` subtraction."],[5,"u16_sub_with_overflow","","Performs checked `u16` subtraction."],[5,"u32_sub_with_overflow","","Performs checked `u32` subtraction."],[5,"u64_sub_with_overflow","","Performs checked `u64` subtraction."],[5,"i8_mul_with_overflow","","Performs checked `i8` multiplication."],[5,"i16_mul_with_overflow","","Performs checked `i16` multiplication."],[5,"i32_mul_with_overflow","","Performs checked `i32` multiplication."],[5,"i64_mul_with_overflow","","Performs checked `i64` multiplication."],[5,"u8_mul_with_overflow","","Performs checked `u8` multiplication."],[5,"u16_mul_with_overflow","","Performs checked `u16` multiplication."],[5,"u32_mul_with_overflow","","Performs checked `u32` multiplication."],[5,"u64_mul_with_overflow","","Performs checked `u64` multiplication."],[0,"iter","std","Composable external iterators"],[8,"Iterator","std::iter","An interface for dealing with \"external iterators\". These types of iterators\ncan be resumed at any time as all state is stored internally as opposed to\nbeing located on the call stack."],[16,"Item","std::iter::Iterator",""],[10,"next","std::iter","Advance the iterator and return the next value. Return `None` when the end is reached.",145],[10,"size_hint","","Returns a lower and upper bound on the remaining length of the iterator.",145],[8,"FromIterator","","Conversion from an `Iterator`"],[10,"from_iter","","Build a container with elements from an external iterator.",146],[8,"IntoIterator","","Conversion into an `Iterator`"],[16,"Iter","std::iter::IntoIterator",""],[10,"into_iter","std::iter","Consumes `Self` and returns an iterator over it",147],[8,"Extend","","A type growable from an `Iterator` implementation"],[10,"extend","","Extend a container with the elements yielded by an arbitrary iterator",148],[8,"IteratorExt","","An extension trait providing numerous methods applicable to all iterators."],[10,"count","","Counts the number of elements in this iterator.",149],[10,"last","","Loops through the entire iterator, returning the last element of the\niterator.",149],[10,"nth","","Loops through `n` iterations, returning the `n`th element of the\niterator.",149],[10,"chain","","Chain this iterator with another, returning a new iterator that will\nfinish iterating over the current iterator, and then iterate\nover the other specified iterator.",149],[10,"zip","","Creates an iterator that iterates over both this and the specified\niterators simultaneously, yielding the two elements as pairs. When\neither iterator returns None, all further invocations of next() will\nreturn None.",149],[10,"map","","Creates a new iterator that will apply the specified function to each\nelement returned by the first, yielding the mapped element instead.",149],[10,"filter","","Creates an iterator that applies the predicate to each element returned\nby this iterator. The only elements that will be yieled are those that\nmake the predicate evaluate to `true`.",149],[10,"filter_map","","Creates an iterator that both filters and maps elements.\nIf the specified function returns None, the element is skipped.\nOtherwise the option is unwrapped and the new value is yielded.",149],[10,"enumerate","","Creates an iterator that yields a pair of the value returned by this\niterator plus the current index of iteration.",149],[10,"peekable","","Creates an iterator that has a `.peek()` method\nthat returns an optional reference to the next element.",149],[10,"skip_while","","Creates an iterator that invokes the predicate on elements\nuntil it returns false. Once the predicate returns false, that\nelement and all further elements are yielded.",149],[10,"take_while","","Creates an iterator that yields elements so long as the predicate\nreturns true. After the predicate returns false for the first time, no\nfurther elements will be yielded.",149],[10,"skip","","Creates an iterator that skips the first `n` elements of this iterator,\nand then yields all further items.",149],[10,"take","","Creates an iterator that yields the first `n` elements of this\niterator.",149],[10,"scan","","Creates a new iterator that behaves in a similar fashion to fold.\nThere is a state which is passed between each iteration and can be\nmutated as necessary. The yielded values from the closure are yielded\nfrom the Scan instance when not None.",149],[10,"flat_map","","Creates an iterator that maps each element to an iterator,\nand yields the elements of the produced iterators.",149],[10,"fuse","","Creates an iterator that yields `None` forever after the underlying\niterator yields `None`. Random-access iterator behavior is not\naffected, only single and double-ended iterator behavior.",149],[10,"inspect","","Creates an iterator that calls a function with a reference to each\nelement before yielding it. This is often useful for debugging an\niterator pipeline.",149],[10,"by_ref","","Creates a wrapper around a mutable reference to the iterator.",149],[10,"collect","","Loops through the entire iterator, collecting all of the elements into\na container implementing `FromIterator`.",149],[10,"partition","","Loops through the entire iterator, collecting all of the elements into\none of two containers, depending on a predicate. The elements of the\nfirst container satisfy the predicate, while the elements of the second\ndo not.",149],[10,"fold","","Performs a fold operation over the entire iterator, returning the\neventual state at the end of the iteration.",149],[10,"all","","Tests whether the predicate holds true for all elements in the iterator.",149],[10,"any","","Tests whether any element of an iterator satisfies the specified predicate.",149],[10,"find","","Returns the first element satisfying the specified predicate.",149],[10,"position","","Return the index of the first element satisfying the specified predicate",149],[10,"rposition","","Return the index of the last element satisfying the specified predicate",149],[10,"max","","Consumes the entire iterator to return the maximum element.",149],[10,"min","","Consumes the entire iterator to return the minimum element.",149],[10,"min_max","","`min_max` finds the minimum and maximum elements in the iterator.",149],[10,"max_by","","Return the element that gives the maximum value from the\nspecified function.",149],[10,"min_by","","Return the element that gives the minimum value from the\nspecified function.",149],[10,"rev","","Change the direction of the iterator",149],[10,"unzip","","Converts an iterator of pairs into a pair of containers.",149],[10,"cloned","","Creates an iterator that clones the elements it yields. Useful for converting an\nIterator<&T> to an Iterator<T>.",149],[10,"cycle","","Repeats an iterator endlessly",149],[10,"reverse_in_place","","Use an iterator to reverse a container in place.",149],[8,"DoubleEndedIterator","","A range iterator able to yield elements from both ends"],[10,"next_back","","Yield an element from the end of the range, returning `None` if the range is empty.",150],[8,"RandomAccessIterator","","An object implementing random access indexing by `usize`"],[10,"indexable","","Return the number of indexable elements. At most `std::usize::MAX`\nelements are indexable, even if the iterator represents a longer range.",151],[10,"idx","","Return an element at an index, or `None` if the index is out of bounds",151],[8,"ExactSizeIterator","","An iterator that knows its exact length"],[10,"len","","Return the exact length of the iterator.",152],[3,"Rev","","An double-ended iterator with the direction inverted"],[3,"ByRef","","A mutable reference to an iterator"],[8,"AdditiveIterator","","A trait for iterators over elements which can be added together"],[10,"sum","","Iterates over the entire iterator, summing up all the elements",153],[8,"MultiplicativeIterator","","A trait for iterators over elements which can be multiplied together."],[10,"product","","Iterates over the entire iterator, multiplying all the elements",154],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail."],[13,"NoElements","","Empty iterator",48],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",48],[13,"MinMax","","More than one element in the iterator, the first element is not larger than the second",48],[3,"Cloned","","An iterator that clones the elements of an underlying iterator"],[3,"Cycle","","An iterator that repeats endlessly"],[3,"Chain","","An iterator that strings two iterators together"],[3,"Zip","","An iterator that iterates two other iterators simultaneously"],[3,"Map","","An iterator that maps the values of `iter` with `f`"],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`"],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`"],[3,"Enumerate","","An iterator that yields the current count and the element during iteration"],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next element."],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true"],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true"],[3,"Skip","","An iterator that skips over `n` elements of `iter`."],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`."],[3,"Scan","","An iterator to maintain state while iterating another iterator"],[12,"state","","The current internal state to be passed to the closure next.",59],[3,"FlatMap","","An iterator that maps each element to an iterator,\nand yields the elements of the produced iterators\n"],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once."],[3,"Inspect","","An iterator that calls a function with a reference to each\nelement before yielding it."],[3,"Unfold","","An iterator that passes mutable state to a closure and yields the result."],[12,"state","","Internal state that will be passed to the closure on the next iteration",62],[3,"Counter","","An infinite iterator starting at `start` and advancing by `step` with each\niteration"],[5,"count","","Creates a new counter with the specified start/step"],[3,"Range","","An iterator over the range [start, stop)"],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"RangeInclusive","","An iterator over the range [start, stop]"],[5,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"Repeat","","An iterator that repeats an element endlessly"],[6,"Iterate","",""],[5,"iterate","","Create a new iterator that produces an infinite sequence of\nrepeated applications of the given function `f`."],[5,"repeat","","Create a new iterator that endlessly repeats the element `elt`."],[0,"order","","Functions for lexicographical ordering of sequences."],[5,"equals","std::iter::order","Compare `a` and `b` for equality using `Eq`"],[5,"cmp","","Order `a` and `b` lexicographically using `Ord`"],[5,"partial_cmp","","Order `a` and `b` lexicographically using `PartialOrd`"],[5,"eq","","Compare `a` and `b` for equality (Using partial equality, `PartialEq`)"],[5,"ne","","Compare `a` and `b` for nonequality (Using partial equality, `PartialEq`)"],[5,"lt","","Return `a` < `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"le","","Return `a` <= `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"gt","","Return `a` > `b` lexicographically (Using partial order, `PartialOrd`)"],[5,"ge","","Return `a` >= `b` lexicographically (Using partial order, `PartialOrd`)"],[0,"marker","std","Primitive traits and marker types representing basic 'kinds' of types."],[8,"Send","std::marker","Types able to be transferred across thread boundaries."],[8,"Sized","","Types with a constant size known at compile-time."],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`)."],[8,"Sync","","Types that can be safely shared between threads when aliased."],[3,"CovariantType","","A marker type whose type parameter `T` is considered to be\ncovariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` is being stored\ninto memory and read from, even though that may not be apparent."],[3,"ContravariantType","","A marker type whose type parameter `T` is considered to be\ncontravariant with respect to the type itself. This is (typically)\nused to indicate that an instance of the type `T` will be consumed\n(but not read from), even though that may not be apparent."],[3,"InvariantType","","A marker type whose type parameter `T` is considered to be\ninvariant with respect to the type itself. This is (typically)\nused to indicate that instances of the type `T` may be read or\nwritten, even though that may not be apparent."],[3,"CovariantLifetime","","As `CovariantType`, but for lifetime parameters. Using\n`CovariantLifetime<'a>` indicates that it is ok to substitute\na *longer* lifetime for `'a` than the one you originally\nstarted with (e.g., you could convert any lifetime `'foo` to\n`'static`). You almost certainly want `ContravariantLifetime`\ninstead, or possibly `InvariantLifetime`. The only case where\nit would be appropriate is that you have a (type-casted, and\nhence hidden from the type system) function pointer with a\nsignature like `fn(&'a T)` (and no other uses of `'a`). In\nthis case, it is ok to substitute a larger lifetime for `'a`\n(e.g., `fn(&'static T)`), because the function is only\nbecoming more selective in terms of what it accepts as\nargument."],[3,"ContravariantLifetime","","As `ContravariantType`, but for lifetime parameters. Using\n`ContravariantLifetime<'a>` indicates that it is ok to\nsubstitute a *shorter* lifetime for `'a` than the one you\noriginally started with (e.g., you could convert `'static` to\nany lifetime `'foo`). This is appropriate for cases where you\nhave an unsafe pointer that is actually a pointer into some\nmemory with lifetime `'a`, and thus you want to limit the\nlifetime of your data structure to `'a`. An example of where\nthis is used is the iterator for vectors."],[3,"InvariantLifetime","","As `InvariantType`, but for lifetime parameters. Using\n`InvariantLifetime<'a>` indicates that it is not ok to\nsubstitute any other lifetime for `'a` besides its original\nvalue. This is appropriate for cases where you have an unsafe\npointer that is actually a pointer into memory with lifetime `'a`,\nand this pointer is itself stored in an inherently mutable\nlocation (such as a `Cell`)."],[3,"NoCopy","","A type which is considered \"not POD\", meaning that it is not\nimplicitly copyable. This is typically embedded in other types to\nensure that they are never copied, even if they lack a destructor."],[3,"Managed","","A type which is considered managed by the GC. This is typically\nembedded in other types."],[0,"mem","std","Basic functions for dealing with memory"],[5,"size_of","std::mem","Returns the size of a type in bytes."],[5,"size_of_val","","Returns the size of the type that `_val` points to in bytes."],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type"],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `_val` points to"],[5,"align_of","","Returns the alignment in memory for a type."],[5,"align_of_val","","Returns the alignment of the type of the value that `_val` points to."],[5,"zeroed","","Create a value initialized to zero."],[5,"uninitialized","","Create an uninitialized value."],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitialising or copying\neither one."],[5,"replace","","Replace the value at a mutable location with a new one, returning the old value, without\ndeinitialising or copying either one."],[5,"drop","","Disposes of a value."],[5,"transmute_copy","","Interprets `src` as `&U`, and then reads `src` without moving the contained value."],[5,"copy_lifetime","","Transforms lifetime of the second pointer to match the first."],[5,"copy_mut_lifetime","","Transforms lifetime of the second mutable pointer to match the first."],[5,"forget","","Move a value out of scope without running drop glue."],[5,"transmute","","Unsafely transforms a value of one type into a value of another type."],[0,"ops","std","Overloadable operators"],[8,"Drop","std::ops","The `Drop` trait is used to run some code when a value goes out of scope. This\nis sometimes called a 'destructor'."],[10,"drop","","The `drop` method, called when the value goes out of scope.",155],[8,"Add","","The `Add` trait is used to specify the functionality of `+`."],[16,"Output","std::ops::Add",""],[10,"add","std::ops","The method for the `+` operator",156],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`."],[16,"Output","std::ops::Sub",""],[10,"sub","std::ops","The method for the `-` operator",157],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`."],[16,"Output","std::ops::Mul",""],[10,"mul","std::ops","The method for the `*` operator",158],[8,"Div","","The `Div` trait is used to specify the functionality of `/`."],[16,"Output","std::ops::Div",""],[10,"div","std::ops","The method for the `/` operator",159],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`."],[16,"Output","std::ops::Rem",""],[10,"rem","std::ops","The method for the `%` operator",160],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`."],[16,"Output","std::ops::Neg",""],[10,"neg","std::ops","The method for the unary `-` operator",161],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`."],[16,"Output","std::ops::Not",""],[10,"not","std::ops","The method for the unary `!` operator",162],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&`."],[16,"Output","std::ops::BitAnd",""],[10,"bitand","std::ops","The method for the `&` operator",163],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`."],[16,"Output","std::ops::BitOr",""],[10,"bitor","std::ops","The method for the `|` operator",164],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`."],[16,"Output","std::ops::BitXor",""],[10,"bitxor","std::ops","The method for the `^` operator",165],[8,"Shl","","The `Shl` trait is used to specify the functionality of `<<`."],[16,"Output","std::ops::Shl",""],[10,"shl","std::ops","The method for the `<<` operator",166],[8,"Shr","","The `Shr` trait is used to specify the functionality of `>>`."],[16,"Output","std::ops::Shr",""],[10,"shr","std::ops","The method for the `>>` operator",167],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context."],[16,"Output","std::ops::Index",""],[10,"index","std::ops","The method for the indexing (`Foo[Bar]`) operation",168],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context."],[16,"Output","std::ops::IndexMut",""],[10,"index_mut","std::ops","The method for the indexing (`Foo[Bar]`) operation",169],[3,"RangeFull","","An unbounded range."],[3,"Range","","A (half-open) range which is bounded at both ends."],[12,"start","","The lower bound of the range (inclusive).",18],[12,"end","","The upper bound of the range (exclusive).",18],[3,"RangeFrom","","A range which is only bounded below."],[12,"start","","The lower bound of the range (inclusive).",19],[3,"RangeTo","","A range which is only bounded above."],[12,"end","","The upper bound of the range (exclusive).",20],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations like `*v`."],[16,"Target","std::ops::Deref",""],[10,"deref","std::ops","The method called to dereference a value",170],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`"],[10,"deref_mut","","The method called to mutably dereference a value",171],[8,"Fn","","A version of the call operator that takes an immutable receiver."],[16,"Output","std::ops::Fn",""],[10,"call","std::ops","This is called when the call operator is used.",172],[8,"FnMut","","A version of the call operator that takes a mutable receiver."],[16,"Output","std::ops::FnMut",""],[10,"call_mut","std::ops","This is called when the call operator is used.",173],[8,"FnOnce","","A version of the call operator that takes a by-value receiver."],[16,"Output","std::ops::FnOnce",""],[10,"call_once","std::ops","This is called when the call operator is used.",174],[0,"ptr","std","Operations on unsafe pointers, `*const T`, and `*mut T`."],[5,"null","std::ptr","Creates a null raw pointer."],[5,"null_mut","","Creates a null mutable raw pointer."],[5,"zero_memory","","Zeroes out `count * size_of::<T>` bytes of memory at `dst`. `count` may be\n`0`."],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitialising either. They may overlap, unlike `mem::swap` which is\notherwise equivalent."],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either."],[5,"read","","Reads the value from `src` without dropping it. This leaves the\nmemory in `src` unchanged."],[5,"read_and_zero","","Reads the value from `src` and nulls it out without dropping it."],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value."],[8,"PtrExt","","Methods on raw pointers"],[16,"Target","std::ptr::PtrExt",""],[10,"is_null","std::ptr","Returns true if the pointer is null.",175],[10,"as_ref","","Returns `None` if the pointer is null, or else returns a reference to\nthe value wrapped in `Some`.",175],[10,"offset","","Calculates the offset from a pointer. `count` is in units of T; e.g. a\n`count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.",175],[8,"MutPtrExt","","Methods on mutable raw pointers"],[16,"Target","std::ptr::MutPtrExt",""],[10,"as_mut","std::ptr","Returns `None` if the pointer is null, or else returns a mutable\nreference to the value wrapped in `Some`.",176],[3,"Unique","","A wrapper around a raw `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique<T>` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a\nraw `*mut T` (which conveys no particular ownership semantics).\nUseful for building abstractions like `Vec<T>` or `Box<T>`, which\ninternally use raw pointers to manage the memory that they own."],[5,"set_memory","","Invokes memset on the specified pointer, setting `count * size_of::<T>()`\nbytes of memory starting at `dst` to `c`."],[5,"copy_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may overlap."],[5,"copy_nonoverlapping_memory","","Copies `count * size_of<T>` bytes from `src` to `dst`. The source\nand destination may *not* overlap."],[0,"raw","std","Contains struct definitions for the layout of compiler built-in types."],[3,"Slice","std::raw","The representation of a Rust slice"],[12,"data","","",177],[12,"len","","",177],[3,"Closure","","The representation of a Rust closure"],[12,"code","","",178],[12,"env","","",178],[3,"TraitObject","","The representation of a Rust trait object."],[12,"data","","",179],[12,"vtable","","",179],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values."],[10,"repr","","This function \"unwraps\" a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",180],[0,"simd","std","SIMD vectors."],[3,"i8x16","std::simd",""],[3,"i16x8","",""],[3,"i32x4","",""],[3,"i64x2","",""],[3,"u8x16","",""],[3,"u16x8","",""],[3,"u32x4","",""],[3,"u64x2","",""],[3,"f32x4","",""],[3,"f64x2","",""],[0,"result","std","Error handling with the `Result` type"],[4,"Result","std::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`)."],[13,"Ok","","Contains the success value",74],[13,"Err","","Contains the error value",74],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`."],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`."],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`."],[5,"fold","","Perform a fold operation over the result values from an iterator."],[0,"option","std","Optional values"],[4,"Option","std::option","The `Option` type."],[13,"None","","No value",69],[13,"Some","","Some value `T`",69],[3,"Iter","","An iterator over a reference of the contained item in an Option."],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option."],[3,"IntoIter","","An iterator over the item contained inside an Option."],[0,"error","std","Traits for working with Errors."],[8,"Error","std::error","Base functionality for all errors in Rust."],[10,"description","","A short description of the error; usually a static string.",181],[10,"cause","","The lower-level cause of this error, if any.",181],[8,"FromError","","A trait for types that can be converted from a given error type `E`."],[10,"from_error","","Perform the conversion.",182],[0,"boxed","std","A pointer type for heap allocation."],[7,"HEAP","std::boxed","A value that represents the heap. This is the default place that the `box` keyword allocates\ninto when no place is supplied."],[11,"new","alloc::boxed","Allocates memory on the heap and then moves `x` into it.",183],[11,"from_raw","","Constructs a box from the raw pointer.",183],[11,"default","","",183],[11,"default","","",183],[11,"clone","","Returns a new box with a `clone()` of this box's contents.",183],[11,"clone_from","","Copies `source`'s contents into `self` without creating a new allocation.",183],[11,"clone_from","","",183],[11,"eq","","",183],[11,"ne","","",183],[11,"ne","","",183],[11,"partial_cmp","","",183],[11,"lt","","",183],[11,"le","","",183],[11,"ge","","",183],[11,"gt","","",183],[11,"lt","","",183],[11,"le","","",183],[11,"gt","","",183],[11,"ge","","",183],[11,"cmp","","",183],[11,"hash","","",183],[11,"downcast","","",183],[11,"fmt","","",183],[11,"fmt","","",183],[11,"fmt","","",183],[6,"Target","std::boxed",""],[11,"deref","alloc::boxed","",183],[11,"deref_mut","","",183],[6,"Item","std::boxed",""],[11,"next","alloc::boxed","",183],[11,"size_hint","","",183],[11,"size_hint","","",183],[11,"from_error","","",183],[11,"new","alloc::arc","Constructs a new `Arc<T>`.",184],[11,"downgrade","","Downgrades the `Arc<T>` to a `Weak<T>` reference.",184],[11,"clone","","Makes a clone of the `Arc<T>`.",184],[11,"clone_from","","",184],[6,"Target","std::boxed",""],[11,"deref","alloc::arc","",184],[11,"make_unique","","Make a mutable reference from the given `Arc<T>`.",184],[11,"drop","","Drops the `Arc<T>`.",184],[11,"upgrade","","Upgrades a weak reference to a strong reference.",185],[11,"clone","","Makes a clone of the `Weak<T>`.",185],[11,"clone_from","","",185],[11,"drop","","Drops the `Weak<T>`.",185],[11,"eq","","Equality for two `Arc<T>`s.",184],[11,"ne","","Inequality for two `Arc<T>`s.",184],[11,"ne","","",184],[11,"partial_cmp","","Partial comparison for two `Arc<T>`s.",184],[11,"lt","","Less-than comparison for two `Arc<T>`s.",184],[11,"le","","'Less-than or equal to' comparison for two `Arc<T>`s.",184],[11,"gt","","Greater-than comparison for two `Arc<T>`s.",184],[11,"ge","","'Greater-than or equal to' comparison for two `Arc<T>`s.",184],[11,"lt","","",184],[11,"le","","",184],[11,"gt","","",184],[11,"ge","","",184],[11,"cmp","","",184],[11,"fmt","","",184],[11,"fmt","","",184],[11,"default","","",184],[11,"hash","","",184],[11,"new","alloc::rc","Constructs a new `Rc<T>`.",186],[11,"downgrade","","Downgrades the `Rc<T>` to a `Weak<T>` reference.",186],[11,"make_unique","","Make a mutable reference from the given `Rc<T>`.",186],[6,"Target","std::boxed",""],[11,"deref","alloc::rc","",186],[11,"drop","","Drops the `Rc<T>`.",186],[11,"clone","","Makes a clone of the `Rc<T>`.",186],[11,"clone_from","","",186],[11,"default","","Creates a new `Rc<T>`, with the `Default` value for `T`.",186],[11,"eq","","Equality for two `Rc<T>`s.",186],[11,"ne","","Inequality for two `Rc<T>`s.",186],[11,"ne","","",186],[11,"partial_cmp","","Partial comparison for two `Rc<T>`s.",186],[11,"lt","","Less-than comparison for two `Rc<T>`s.",186],[11,"le","","'Less-than or equal to' comparison for two `Rc<T>`s.",186],[11,"gt","","Greater-than comparison for two `Rc<T>`s.",186],[11,"ge","","'Greater-than or equal to' comparison for two `Rc<T>`s.",186],[11,"lt","","",186],[11,"le","","",186],[11,"gt","","",186],[11,"ge","","",186],[11,"cmp","","Comparison for two `Rc<T>`s.",186],[11,"hash","","",186],[11,"fmt","","",186],[11,"fmt","","",186],[11,"upgrade","","Upgrades a weak reference to a strong reference.",187],[11,"drop","","Drops the `Weak<T>`.",187],[11,"clone","","Makes a clone of the `Weak<T>`.",187],[11,"clone_from","","",187],[11,"fmt","","",187],[3,"Box","std::boxed","A pointer type for heap allocation."],[5,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer."],[8,"BoxAny","","Extension methods for an owning `Any` trait object."],[10,"downcast","","Returns the boxed value if it is of type `T`, or\n`Err(Self)` if it isn't.",188],[0,"rc","std","Thread-local reference-counted boxes (the `Rc<T>` type)."],[3,"Rc","std::rc","An immutable reference-counted pointer type."],[5,"weak_count","","Get the number of weak references to this value."],[5,"strong_count","","Get the number of strong references to this value."],[5,"is_unique","","Returns true if there are no other `Rc` or `Weak<T>` values that share the same inner value."],[5,"try_unwrap","","Unwraps the contained value if the `Rc<T>` is unique."],[5,"get_mut","","Returns a mutable reference to the contained value if the `Rc<T>` is unique."],[3,"Weak","","A weak version of `Rc<T>`."],[0,"slice","std","Utilities for slice manipulation"],[8,"SliceExt","std::slice","Allocating extension methods for slices."],[16,"Item","std::slice::SliceExt",""],[10,"sort_by","std::slice","Sorts the slice, in place, using `compare` to compare\nelements.",189],[10,"move_from","","Consumes `src` and moves as many elements as it can into `self`\nfrom the range [start,end).",189],[10,"slice","","Deprecated: use `&s[start .. end]` notation instead.",189],[10,"slice_from","","Deprecated: use `&s[start..]` notation instead.",189],[10,"slice_to","","Deprecated: use `&s[..end]` notation instead.",189],[10,"split_at","","Divides one slice into two at an index.",189],[10,"iter","","Returns an iterator over the slice.",189],[10,"split","","Returns an iterator over subslices separated by elements that match\n`pred`.  The matched element is not contained in the subslices.",189],[10,"splitn","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",189],[10,"rsplitn","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",189],[10,"windows","","Returns an iterator over all contiguous windows of length\n`size`. The windows overlap. If the slice is shorter than\n`size`, the iterator returns no values.",189],[10,"chunks","","Returns an iterator over `size` elements of the slice at a\ntime. The chunks do not overlap. If `size` does not divide the\nlength of the slice, then the last chunk will not have length\n`size`.",189],[10,"get","","Returns the element of a slice at the given index, or `None` if the\nindex is out of bounds.",189],[10,"first","","Returns the first element of a slice, or `None` if it is empty.",189],[10,"tail","","Returns all but the first element of a slice.",189],[10,"init","","Returns all but the last element of a slice.",189],[10,"last","","Returns the last element of a slice, or `None` if it is empty.",189],[10,"get_unchecked","","Returns a pointer to the element at the given index, without doing\nbounds checking.",189],[10,"as_ptr","","Returns an unsafe pointer to the slice's buffer",189],[10,"binary_search_by","","Binary search a sorted slice with a comparator function.",189],[10,"len","","Return the number of elements in the slice",189],[10,"is_empty","","Returns true if the slice has a length of 0",189],[10,"get_mut","","Returns a mutable reference to the element at the given index,\nor `None` if the index is out of bounds",189],[10,"as_mut_slice","","Work with `self` as a mut slice.\nPrimarily intended for getting a &mut [T] from a [T; N].",189],[10,"slice_mut","","Deprecated: use `&mut s[start .. end]` instead.",189],[10,"slice_from_mut","","Deprecated: use `&mut s[start ..]` instead.",189],[10,"slice_to_mut","","Deprecated: use `&mut s[.. end]` instead.",189],[10,"iter_mut","","Returns an iterator that allows modifying each value",189],[10,"first_mut","","Returns a mutable pointer to the first element of a slice, or `None` if it is empty",189],[10,"tail_mut","","Returns all but the first element of a mutable slice",189],[10,"init_mut","","Returns all but the last element of a mutable slice",189],[10,"last_mut","","Returns a mutable pointer to the last item in the slice.",189],[10,"split_mut","","Returns an iterator over mutable subslices separated by elements that\nmatch `pred`.  The matched element is not contained in the subslices.",189],[10,"splitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred`, limited to splitting at most `n` times.  The matched element is\nnot contained in the subslices.",189],[10,"rsplitn_mut","","Returns an iterator over subslices separated by elements that match\n`pred` limited to splitting at most `n` times. This starts at the end of\nthe slice and works backwards.  The matched element is not contained in\nthe subslices.",189],[10,"chunks_mut","","Returns an iterator over `chunk_size` elements of the slice at a time.\nThe chunks are mutable and do not overlap. If `chunk_size` does\nnot divide the length of the slice, then the last chunk will not\nhave length `chunk_size`.",189],[10,"swap","","Swaps two elements in a slice.",189],[10,"split_at_mut","","Divides one `&mut` into two at an index.",189],[10,"reverse","","Reverse the order of elements in a slice, in place.",189],[10,"get_unchecked_mut","","Returns an unsafe mutable pointer to the element in index",189],[10,"as_mut_ptr","","Return an unsafe mutable pointer to the slice's buffer.",189],[10,"to_vec","","Copies `self` into a new `Vec`.",189],[10,"permutations","","Creates an iterator that yields every possible permutation of the\nvector in succession.",189],[10,"clone_from_slice","","Copies as many elements from `src` as it can into `self` (the\nshorter of `self.len()` and `src.len()`). Returns the number\nof elements copied.",189],[10,"sort","","Sorts the slice, in place.",189],[10,"binary_search","","Binary search a sorted slice for a given element.",189],[10,"binary_search_elem","","Deprecated: use `binary_search` instead.",189],[10,"next_permutation","","Mutates the slice to the next lexicographic permutation.",189],[10,"prev_permutation","","Mutates the slice to the previous lexicographic permutation.",189],[10,"position_elem","","Find the first index containing a matching value.",189],[10,"rposition_elem","","Find the last index containing a matching value.",189],[10,"contains","","Returns true if the slice contains an element with the given value.",189],[10,"starts_with","","Returns true if `needle` is a prefix of the slice.",189],[10,"ends_with","","Returns true if `needle` is a suffix of the slice.",189],[10,"into_vec","","Convert `self` into a vector without clones or allocation.",189],[8,"SliceConcatExt","","An extension trait for concatenating slices"],[10,"concat","","Flattens a slice of `T` into a single value `U`.",190],[10,"connect","","Flattens a slice of `T` into a single value `U`, placing a given separator between each.",190],[11,"new","collections::slice","Creates an `ElementSwaps` iterator for a sequence of `length` elements.",191],[11,"clone","collections::binary_heap","",192],[11,"clone_from","","",192],[11,"default","","",192],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",192],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",192],[11,"from_vec","","Creates a `BinaryHeap` from a vector. This is sometimes called\n`heapifying` the vector.",192],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",192],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",192],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",192],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",192],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",192],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",192],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",192],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",192],[11,"push","","Pushes an item onto the binary heap.",192],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",192],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",192],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",192],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",192],[11,"len","","Returns the length of the binary heap.",192],[11,"is_empty","","Checks if the binary heap is empty.",192],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",192],[11,"clear","","Drops all items from the binary heap.",192],[11,"clone","","",193],[11,"clone_from","","",193],[6,"Item","std::slice",""],[11,"next","collections::binary_heap","",193],[11,"size_hint","","",193],[11,"size_hint","","",193],[11,"next_back","","",193],[11,"len","","",193],[6,"Item","std::slice",""],[11,"next","collections::binary_heap","",194],[11,"size_hint","","",194],[11,"size_hint","","",194],[11,"next_back","","",194],[11,"len","","",194],[6,"Item","std::slice",""],[11,"next","collections::binary_heap","",195],[11,"size_hint","","",195],[11,"size_hint","","",195],[11,"next_back","","",195],[11,"len","","",195],[11,"from_iter","","",192],[6,"Iter","std::slice",""],[11,"into_iter","collections::binary_heap","",192],[6,"Iter","std::slice",""],[11,"extend","collections::binary_heap","",192],[6,"Output","std::slice",""],[11,"index","collections::bit","",196],[11,"new","","Creates an empty `Bitv`.",196],[11,"from_elem","","Creates a `Bitv` that holds `nbits` elements, setting each element\nto `bit`.",196],[11,"with_capacity","","Constructs a new, empty `Bitv` with the specified capacity.",196],[11,"from_bytes","","Transforms a byte-vector into a `Bitv`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",196],[11,"from_fn","","Creates a `Bitv` of the specified length where the value at each index\nis `f(index)`.",196],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",196],[11,"set","","Sets the value of a bit at an index `i`.",196],[11,"set_all","","Sets all bits to 1.",196],[11,"negate","","Flips all bits.",196],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",196],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",196],[11,"difference","","Calculates the difference between two bitvectors.",196],[11,"all","","Returns `true` if all bits are 1.",196],[11,"iter","","Returns an iterator over the elements of the vector in order.",196],[11,"none","","Returns `true` if all bits are 0.",196],[11,"any","","Returns `true` if any bit is 1.",196],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`Bitv` becomes the high-order bit of the first byte. If the\nsize of the `Bitv` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",196],[11,"eq_vec","","Compares a `Bitv` to a slice of `bool`s.\nBoth the `Bitv` and slice must have the same length.",196],[11,"truncate","","Shortens a `Bitv`, dropping excess elements.",196],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`Bitv`. The collection may reserve more space to avoid frequent reallocations.",196],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `Bitv`. Does nothing if the capacity is already sufficient.",196],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",196],[11,"grow","","Grows the `Bitv` in-place, adding `n` copies of `value` to the `Bitv`.",196],[11,"pop","","Removes the last bit from the Bitv, and returns it. Returns None if the Bitv is empty.",196],[11,"push","","Pushes a `bool` onto the end.",196],[11,"len","","Return the total number of bits in this vector",196],[11,"is_empty","","Returns true if there are no bits in this vector",196],[11,"clear","","Clears all bits in this vector.",196],[11,"default","","",196],[11,"from_iter","","",196],[11,"extend","","",196],[11,"clone","","",196],[11,"clone_from","","",196],[11,"clone_from","","",196],[11,"partial_cmp","","",196],[11,"lt","","",196],[11,"le","","",196],[11,"gt","","",196],[11,"ge","","",196],[11,"cmp","","",196],[11,"fmt","","",196],[11,"hash","","",196],[11,"eq","","",196],[11,"ne","","",196],[11,"clone","","",197],[11,"clone_from","","",197],[6,"Item","std::slice",""],[11,"next","collections::bit","",197],[11,"size_hint","","",197],[11,"size_hint","","",197],[11,"next_back","","",197],[11,"len","","",197],[11,"indexable","","",197],[11,"idx","","",197],[6,"Iter","std::slice",""],[11,"clone","collections::bit","",198],[11,"clone_from","","",198],[11,"default","","",198],[11,"from_iter","","",198],[11,"extend","","",198],[11,"partial_cmp","","",198],[11,"lt","","",198],[11,"le","","",198],[11,"gt","","",198],[11,"ge","","",198],[11,"cmp","","",198],[11,"eq","","",198],[11,"ne","","",198],[11,"new","","Creates a new empty `BitvSet`.",198],[11,"with_capacity","","Creates a new `BitvSet` with initially no contents, able to\nhold `nbits` elements without resizing.",198],[11,"from_bitv","","Creates a new `BitvSet` from the given bit vector.",198],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",198],[11,"reserve_len","","Reserves capacity for the given `BitvSet` to contain `len` distinct elements. In the case\nof `BitvSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",198],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitvSet` to contain `len` distinct elements.\nIn the case of `BitvSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",198],[11,"into_bitv","","Consumes this set to return the underlying bit vector.",198],[11,"get_ref","","Returns a reference to the underlying bit vector.",198],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",198],[11,"iter","","Iterator over each u32 stored in the `BitvSet`.",198],[11,"union","","Iterator over each u32 stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",198],[11,"intersection","","Iterator over each uint stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",198],[11,"difference","","Iterator over each uint stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",198],[11,"symmetric_difference","","Iterator over each u32 stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",198],[11,"union_with","","Unions in-place with the specified other bit vector.",198],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",198],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",198],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",198],[11,"len","","Return the number of set bits in this set.",198],[11,"is_empty","","Returns whether there are no bits set in this set",198],[11,"clear","","Clears all bits in this set",198],[11,"contains","","Returns `true` if this set contains the specified integer.",198],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",198],[11,"is_subset","","Returns `true` if the set is a subset of another.",198],[11,"is_superset","","Returns `true` if the set is a superset of another.",198],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",198],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",198],[11,"fmt","","",198],[11,"hash","","",198],[11,"clone","","",199],[11,"clone_from","","",199],[11,"clone","","",200],[11,"clone_from","","",200],[6,"Item","std::slice",""],[11,"next","collections::bit","",199],[11,"size_hint","","",199],[11,"size_hint","","",199],[6,"Item","std::slice",""],[11,"next","collections::bit","",200],[11,"size_hint","","",200],[11,"size_hint","","",200],[6,"Item","std::slice",""],[11,"next","collections::bit","",201],[11,"size_hint","","",201],[11,"size_hint","","",201],[6,"Item","std::slice",""],[11,"next","collections::bit","",202],[11,"size_hint","","",202],[11,"size_hint","","",202],[6,"Item","std::slice",""],[11,"next","collections::bit","",203],[11,"size_hint","","",203],[11,"size_hint","","",203],[6,"Item","std::slice",""],[11,"next","collections::bit","",204],[11,"size_hint","","",204],[11,"size_hint","","",204],[6,"Iter","std::slice",""],[6,"Item","",""],[11,"next","collections::btree::node","",205],[11,"size_hint","","",205],[11,"next_back","","",205],[11,"drop","","",205],[11,"drop","","",206],[11,"as_slices","","",206],[11,"as_slices_mut","","",206],[11,"as_slices_internal","","",206],[11,"as_slices_internal_mut","","",206],[11,"keys","","",206],[11,"keys_mut","","",206],[11,"vals","","",206],[11,"vals_mut","","",206],[11,"edges","","",206],[11,"edges_mut","","",206],[11,"clone","","",206],[11,"clone_from","","",206],[11,"search","","Searches for the given key in the node. If it finds an exact match,\n`Found` will be yielded with the matching index. If it doesn't find an exact match,\n`GoDown` will be yielded with the index of the subtree the key must lie in.",206],[11,"make_leaf_root","","Make a leaf root from scratch",206],[11,"make_internal_root","","Make an internal root and swap it with an old root",206],[11,"len","","How many key-value pairs the node contains",206],[11,"capacity","","How many key-value pairs the node can fit",206],[11,"is_leaf","","If the node has any children",206],[11,"is_underfull","","if the node has too few elements",206],[11,"is_full","","if the node cannot fit any more elements",206],[11,"node","","Returns a reference to the node that contains the pointed-to edge or key/value pair. This\nis very different from `edge` and `edge_mut` because those return children of the node\nreturned by `node`.",207],[11,"as_raw","","Converts a handle into one that stores the same information using a raw pointer. This can\nbe useful in conjunction with `from_raw` when the type system is insufficient for\ndetermining the lifetimes of the nodes.",207],[11,"from_raw","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a reference. This is an unsafe inverse of `as_raw`, and together they allow\nunsafely extending the lifetime of the reference to the `Node`.",207],[11,"from_raw_mut","","Converts from a handle stored with a raw pointer, which isn't directly usable, to a handle\nstored with a mutable reference. This is an unsafe inverse of `as_raw`, and together they\nallow unsafely extending the lifetime of the reference to the `Node`.",207],[11,"into_edge","","Turns the handle into a reference to the edge it points at. This is necessary because the\nreturned pointer has a larger lifetime than what would be returned by `edge` or `edge_mut`,\nmaking it more suitable for moving down a chain of nodes.",207],[11,"into_edge_mut","","Turns the handle into a mutable reference to the edge it points at. This is necessary\nbecause the returned pointer has a larger lifetime than what would be returned by\n`edge_mut`, making it more suitable for moving down a chain of nodes.",207],[11,"force","","Figure out whether this handle is pointing to something in a leaf node or to something in\nan internal node, clarifying the type according to the result.",207],[11,"insert_as_leaf","","Tries to insert this key-value pair at the given index in this leaf node\nIf the node is full, we have to split it.",207],[11,"edge_mut","","Returns a mutable reference to the edge pointed-to by this handle. This should not be\nconfused with `node`, which references the parent node of what is returned here.",207],[11,"insert_as_internal","","Tries to insert this key-value pair at the given index in this internal node\nIf the node is full, we have to split it.",207],[11,"handle_underflow","","Handle an underflow in this node's child. We favour handling \"to the left\" because we know\nwe're empty, but our neighbour can be full. Handling to the left means when we choose to\nsteal, we pop off the end of our neighbour (always fast) and \"unshift\" ourselves\n(always slow, but at least faster since we know we're half-empty).\nHandling \"to the right\" reverses these roles. Of course, we merge whenever possible\nbecause we want dense nodes, and merging is about equal work regardless of direction.",207],[11,"into_kv","","Turns the handle into references to the key and value it points at. This is necessary\nbecause the returned pointers have larger lifetimes than what would be returned by `key`\nor `val`.",207],[11,"into_kv_mut","","Turns the handle into mutable references to the key and value it points at. This is\nnecessary because the returned pointers have larger lifetimes than what would be returned\nby `key_mut` or `val_mut`.",207],[11,"into_left_edge","","Convert this handle into one pointing at the edge immediately to the left of the key/value\npair pointed-to by this handle. This is useful because it returns a reference with larger\nlifetime than `left_edge`.",207],[11,"key_mut","","Returns a mutable reference to the key pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",207],[11,"val_mut","","Returns a mutable reference to the value pointed-to by this handle. This doesn't return a\nreference with a lifetime as large as `into_kv_mut`, but it also does not consume the\nhandle.",207],[11,"left_edge","","Gets the handle pointing to the edge immediately to the left of the key/value pair pointed\nto by this handle.",207],[11,"right_edge","","Gets the handle pointing to the edge immediately to the right of the key/value pair pointed\nto by this handle.",207],[11,"remove_as_leaf","","Removes the key/value pair at the handle's location.",207],[11,"kv_handle","","Returns the mutable handle pointing to the key/value pair at a given index.",206],[11,"iter","","",206],[11,"iter_mut","","",206],[11,"into_iter","","",206],[11,"hoist_lone_child","","When a node has no keys or values and only a single edge, extract that edge.",206],[6,"Item","std::slice",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",208],[11,"next_kv_back","","",208],[11,"next_edge","","",208],[11,"next_edge_back","","",208],[6,"Item","std::slice",""],[6,"Edge","",""],[11,"next_kv","collections::btree::node","",209],[11,"next_kv_back","","",209],[11,"next_edge","","",209],[11,"next_edge_back","","",209],[11,"drop","","",209],[6,"Item","std::slice",""],[11,"next","collections::btree::node","",210],[11,"size_hint","","",210],[11,"next_back","","",210],[11,"next_edge_item","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the first item is not an edge.",210],[11,"next_edge_item_back","","Advances the iterator and returns the item if it's an edge. Returns None\nand does nothing if the last item is not an edge.",210],[11,"next_kv_item","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the first item is not a key-value pair.",210],[11,"next_kv_item_back","","Advances the iterator and returns the item if it's a key-value pair. Returns None\nand does nothing if the last item is not a key-value pair.",210],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",211],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",211],[11,"iter","","Returns an iterator over key/value pairs and edges in a slice.",211],[11,"slice_from","","Returns a sub-slice with elements starting with `min_key`.",212],[11,"slice_to","","Returns a sub-slice with elements up to and including `max_key`.",212],[11,"iter_mut","","Returns an iterator over key/value pairs and edges in a slice.",212],[11,"clone","collections::btree::map","",213],[11,"clone_from","","",213],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",213],[11,"with_b","","Makes a new empty BTreeMap with the given B.",213],[11,"clear","","Clears the map, removing all values.",213],[11,"get","","Returns a reference to the value corresponding to the key.",213],[11,"contains_key","","Returns true if the map contains a value for the specified key.",213],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",213],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",213],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",213],[6,"Iter","std::slice",""],[11,"into_iter","collections::btree::map","",213],[6,"Iter","std::slice",""],[6,"Iter","",""],[6,"Target","",""],[11,"deref","collections::btree::map::stack","",214],[11,"deref_mut","","",214],[11,"new","","Creates a new PartialSearchStack from a BTreeMap by initializing the stack with the\nroot of the tree.",215],[11,"with","","Breaks up the stack into a `Pusher` and the next `Node`, allowing the given closure\nto interact with, search, and finally push the `Node` onto the stack. The passed in\nclosure must be polymorphic on the `'id` lifetime parameter, as this statically\nensures that only `Handle`s from the correct `Node` can be pushed.",215],[11,"push","","Pushes the requested child of the stack's current top on top of the stack. If the child\nexists, then a new PartialSearchStack is yielded. Otherwise, a VacantSearchStack is\nyielded.",216],[11,"seal","","Converts the PartialSearchStack into a SearchStack.",216],[11,"peek","","Gets a reference to the value the stack points to.",217],[11,"peek_mut","","Gets a mutable reference to the value the stack points to.",217],[11,"into_top","","Converts the stack into a mutable reference to the value it points to, with a lifetime\ntied to the original tree.",217],[11,"remove","","Removes the key and value in the top element of the stack, then handles underflows as\ndescribed in BTree's pop function.",217],[11,"insert","","Inserts the key and value into the top element in the stack, and if that node has to\nsplit recursively inserts the split contents into the next element stack until\nsplits stop.",217],[11,"from_iter","collections::btree::map","",213],[11,"extend","","",213],[11,"hash","","",213],[11,"default","","",213],[11,"eq","","",213],[11,"ne","","",213],[11,"partial_cmp","","",213],[11,"lt","","",213],[11,"le","","",213],[11,"gt","","",213],[11,"ge","","",213],[11,"cmp","","",213],[11,"fmt","","",213],[6,"Output","std::slice",""],[11,"index","collections::btree::map","",213],[6,"Output","std::slice",""],[11,"index_mut","collections::btree::map","",213],[11,"traverse","collections::btree::node","",210],[11,"traverse","","",210],[11,"traverse","","",210],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",218],[11,"size_hint","","",218],[11,"size_hint","","",218],[11,"next_back","","",218],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",219],[11,"size_hint","","",219],[11,"size_hint","","",219],[11,"next_back","","",219],[11,"len","","",219],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",220],[11,"size_hint","","",220],[11,"size_hint","","",220],[11,"next_back","","",220],[11,"len","","",220],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",221],[11,"size_hint","","",221],[11,"size_hint","","",221],[11,"next_back","","",221],[11,"len","","",221],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",222],[11,"size_hint","","",222],[11,"size_hint","","",222],[11,"next_back","","",222],[11,"len","","",222],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",223],[11,"size_hint","","",223],[11,"size_hint","","",223],[11,"next_back","","",223],[11,"len","","",223],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",224],[11,"size_hint","","",224],[11,"next_back","","",224],[6,"Item","std::slice",""],[11,"next","collections::btree::map","",225],[11,"size_hint","","",225],[11,"next_back","","",225],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant",226],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",227],[11,"get","","Gets a reference to the value in the entry.",228],[11,"get_mut","","Gets a mutable reference to the value in the entry.",228],[11,"into_mut","","Converts the entry into a mutable reference to its value.",228],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",228],[11,"remove","","Takes the value of the entry out of the map, and returns it.",228],[11,"iter","","Gets an iterator over the entries of the map.",213],[11,"iter_mut","","Gets a mutable iterator over the entries of the map.",213],[11,"into_iter","","Gets an owning iterator over the entries of the map.",213],[11,"keys","","Gets an iterator over the keys of the map.",213],[11,"values","","Gets an iterator over the values of the map.",213],[11,"len","","Return the number of elements in the map.",213],[11,"is_empty","","Return true if the map contains no elements.",213],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",213],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",213],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",213],[11,"partial_cmp","collections::btree::set","",229],[11,"lt","","",229],[11,"le","","",229],[11,"gt","","",229],[11,"ge","","",229],[11,"lt","","",229],[11,"le","","",229],[11,"gt","","",229],[11,"ge","","",229],[11,"cmp","","",229],[11,"eq","","",229],[11,"ne","","",229],[11,"ne","","",229],[11,"hash","","",229],[11,"clone","","",229],[11,"clone_from","","",229],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",229],[11,"with_b","","Makes a new BTreeSet with the given B.",229],[11,"iter","","Gets an iterator over the BTreeSet's contents.",229],[11,"into_iter","","Gets an iterator for moving out the BtreeSet's contents.",229],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as \"negative\ninfinity\", and if max is `Unbounded`, then it will be treated as \"positive infinity\".\nThus range(Unbounded, Unbounded) will yield the whole collection.",229],[11,"difference","","Visits the values representing the difference, in ascending order.",229],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",229],[11,"intersection","","Visits the values representing the intersection, in ascending order.",229],[11,"union","","Visits the values representing the union, in ascending order.",229],[11,"len","","Return the number of elements in the set",229],[11,"is_empty","","Returns true if the set contains no elements",229],[11,"clear","","Clears the set, removing all values.",229],[11,"contains","","Returns `true` if the set contains a value.",229],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",229],[11,"is_subset","","Returns `true` if the set is a subset of another.",229],[11,"is_superset","","Returns `true` if the set is a superset of another.",229],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",229],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",229],[11,"from_iter","","",229],[6,"Iter","std::slice",""],[11,"into_iter","collections::btree::set","",229],[6,"Iter","std::slice",""],[11,"extend","collections::btree::set","",229],[11,"default","","",229],[6,"Output","std::slice",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[11,"fmt","collections::btree::set","",229],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",230],[11,"size_hint","","",230],[11,"size_hint","","",230],[11,"next_back","","",230],[11,"len","","",230],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",231],[11,"size_hint","","",231],[11,"size_hint","","",231],[11,"next_back","","",231],[11,"len","","",231],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",232],[11,"size_hint","","",232],[11,"next_back","","",232],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",233],[11,"size_hint","","",233],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",234],[11,"size_hint","","",234],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",235],[11,"size_hint","","",235],[6,"Item","std::slice",""],[11,"next","collections::btree::set","",236],[11,"size_hint","","",236],[11,"clone","collections::dlist","",237],[11,"clone_from","","",237],[11,"clone","","",238],[11,"clone_from","","",238],[11,"clone","","",239],[11,"clone_from","","",239],[11,"default","","",240],[11,"new","","Creates an empty `DList`.",240],[11,"append","","Moves all elements from `other` to the end of the list.",240],[11,"iter","","Provides a forward iterator.",240],[11,"iter_mut","","Provides a forward iterator with mutable references.",240],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",240],[11,"is_empty","","Returns `true` if the `DList` is empty.",240],[11,"len","","Returns the length of the `DList`.",240],[11,"clear","","Removes all elements from the `DList`.",240],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",240],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",240],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",240],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",240],[11,"push_front","","Adds an element first in the list.",240],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",240],[11,"push_back","","Appends an element to the back of a list",240],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",240],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",240],[11,"drop","","",240],[6,"Item","std::slice",""],[11,"next","collections::dlist","",237],[11,"size_hint","","",237],[11,"size_hint","","",237],[11,"next_back","","",237],[11,"len","","",237],[6,"Item","std::slice",""],[11,"next","collections::dlist","",241],[11,"size_hint","","",241],[11,"size_hint","","",241],[11,"next_back","","",241],[11,"len","","",241],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",241],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",241],[6,"Item","std::slice",""],[11,"next","collections::dlist","",238],[11,"size_hint","","",238],[11,"size_hint","","",238],[11,"next_back","","",238],[11,"from_iter","","",240],[6,"Iter","std::slice",""],[11,"into_iter","collections::dlist","",240],[6,"Iter","std::slice",""],[6,"Iter","",""],[11,"extend","collections::dlist","",240],[11,"eq","","",240],[11,"ne","","",240],[11,"ne","","",240],[11,"partial_cmp","","",240],[11,"lt","","",240],[11,"le","","",240],[11,"gt","","",240],[11,"ge","","",240],[11,"cmp","","",240],[11,"clone","","",240],[11,"clone_from","","",240],[11,"fmt","","",240],[11,"hash","","",240],[11,"hash","collections::enum_set","",242],[11,"cmp","","",242],[11,"partial_cmp","","",242],[11,"lt","","",242],[11,"le","","",242],[11,"gt","","",242],[11,"ge","","",242],[11,"lt","","",242],[11,"le","","",242],[11,"gt","","",242],[11,"ge","","",242],[11,"eq","","",242],[11,"ne","","",242],[11,"ne","","",242],[11,"clone","","",242],[11,"clone_from","","",242],[11,"fmt","","",242],[11,"new","","Returns an empty `EnumSet`.",242],[11,"len","","Returns the number of elements in the given `EnumSet`.",242],[11,"is_empty","","Returns true if the `EnumSet` is empty.",242],[11,"clear","","",242],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",242],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",242],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",242],[11,"union","","Returns the union of both `EnumSets`.",242],[11,"intersection","","Returns the intersection of both `EnumSets`.",242],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn't there before",242],[11,"remove","","Removes an enum from the EnumSet",242],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",242],[11,"iter","","Returns an iterator over an `EnumSet`.",242],[6,"Output","std::slice",""],[11,"sub","collections::enum_set","",242],[6,"Output","std::slice",""],[11,"bitor","collections::enum_set","",242],[6,"Output","std::slice",""],[11,"bitand","collections::enum_set","",242],[6,"Output","std::slice",""],[11,"bitxor","collections::enum_set","",242],[11,"clone","","",243],[11,"clone_from","","",243],[6,"Item","std::slice",""],[11,"next","collections::enum_set","",243],[11,"size_hint","","",243],[11,"size_hint","","",243],[11,"from_iter","","",242],[6,"Iter","std::slice",""],[11,"extend","collections::enum_set","",242],[11,"clone","collections::ring_buf","",244],[11,"clone_from","","",244],[11,"drop","","",244],[11,"default","","",244],[11,"new","","Creates an empty `RingBuf`.",244],[11,"with_capacity","","Creates an empty `RingBuf` with space for at least `n` elements.",244],[11,"get","","Retrieves an element in the `RingBuf` by index.",244],[11,"get_mut","","Retrieves an element in the `RingBuf` mutably by index.",244],[11,"swap","","Swaps elements at indices `i` and `j`.",244],[11,"capacity","","Returns the number of elements the `RingBuf` can hold without\nreallocating.",244],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `RingBuf`. Does nothing if the capacity is already sufficient.",244],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Ringbuf`. The collection may reserve more space to avoid frequent reallocations.",244],[11,"shrink_to_fit","","Shrinks the capacity of the ringbuf as much as possible.",244],[11,"truncate","","Shorten a ringbuf, dropping excess elements from the back.",244],[11,"iter","","Returns a front-to-back iterator.",244],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",244],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",244],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`RingBuf`.",244],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`RingBuf`.",244],[11,"len","","Returns the number of elements in the `RingBuf`.",244],[11,"is_empty","","Returns true if the buffer contains no elements",244],[11,"drain","","Creates a draining iterator that clears the `RingBuf` and iterates over\nthe removed items from start to end.",244],[11,"clear","","Clears the buffer, removing all values.",244],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",244],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",244],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",244],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",244],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",244],[11,"push_front","","Inserts an element first in the sequence.",244],[11,"push_back","","Appends an element to the back of a buffer",244],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",244],[11,"swap_back_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the last\nelement.",244],[11,"swap_front_remove","","Removes an element from anywhere in the ringbuf and returns it, replacing it with the first\nelement.",244],[11,"insert","","Inserts an element at position `i` within the ringbuf. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",244],[11,"remove","","Removes and returns the element at position `i` from the ringbuf.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `i` is out of bounds.",244],[11,"resize","","Modifies the ringbuf in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",244],[11,"clone","","",245],[11,"clone_from","","",245],[6,"Item","std::slice",""],[11,"next","collections::ring_buf","",245],[11,"size_hint","","",245],[11,"size_hint","","",245],[11,"next_back","","",245],[11,"len","","",245],[11,"indexable","","",245],[11,"idx","","",245],[6,"Item","std::slice",""],[11,"next","collections::ring_buf","",246],[11,"size_hint","","",246],[11,"size_hint","","",246],[11,"next_back","","",246],[11,"len","","",246],[6,"Item","std::slice",""],[11,"next","collections::ring_buf","",247],[11,"size_hint","","",247],[11,"size_hint","","",247],[11,"next_back","","",247],[11,"len","","",247],[11,"drop","","",248],[6,"Item","std::slice",""],[11,"next","collections::ring_buf","",248],[11,"size_hint","","",248],[11,"size_hint","","",248],[11,"next_back","","",248],[11,"len","","",248],[11,"eq","","",244],[11,"ne","","",244],[11,"partial_cmp","","",244],[11,"lt","","",244],[11,"le","","",244],[11,"gt","","",244],[11,"ge","","",244],[11,"cmp","","",244],[11,"hash","","",244],[6,"Output","std::slice",""],[11,"index","collections::ring_buf","",244],[6,"Output","std::slice",""],[11,"index_mut","collections::ring_buf","",244],[11,"from_iter","","",244],[6,"Iter","std::slice",""],[11,"into_iter","collections::ring_buf","",244],[6,"Iter","std::slice",""],[6,"Iter","",""],[11,"extend","collections::ring_buf","",244],[11,"fmt","","",244],[6,"Item","std::slice",""],[11,"clone","collections::slice","",191],[11,"clone_from","","",191],[11,"clone","","",249],[11,"clone_from","","",249],[11,"clone","","",250],[11,"clone_from","","",250],[6,"Item","std::slice",""],[11,"next","collections::slice","",191],[11,"size_hint","","",191],[11,"size_hint","","",191],[6,"Item","std::slice",""],[11,"next","collections::slice","",251],[11,"size_hint","","",251],[11,"size_hint","","",251],[11,"clone","collections::str","",252],[11,"clone_from","","",252],[11,"clone","","",253],[11,"clone_from","","",253],[6,"Item","std::slice",""],[11,"next","collections::str","",253],[11,"size_hint","","",253],[11,"size_hint","","",253],[11,"clone","","",254],[11,"clone_from","","",254],[11,"clone","","",255],[11,"clone_from","","",255],[6,"Item","std::slice",""],[11,"next","collections::str","",255],[11,"size_hint","","",255],[11,"clone","","",256],[11,"clone_from","","",256],[6,"Item","std::slice",""],[11,"next","collections::str","",256],[11,"size_hint","","",256],[11,"size_hint","","",256],[11,"cmp","collections::string","",257],[11,"partial_cmp","","",257],[11,"lt","","",257],[11,"le","","",257],[11,"gt","","",257],[11,"ge","","",257],[11,"lt","","",257],[11,"le","","",257],[11,"gt","","",257],[11,"ge","","",257],[11,"clone","","",257],[11,"clone_from","","",257],[11,"fmt","","",258],[11,"fmt","","",259],[11,"new","","Creates a new string buffer initialized with the empty string.",257],[11,"with_capacity","","Creates a new string buffer with the given capacity.\nThe string will be able to hold exactly `capacity` bytes without\nreallocating. If `capacity` is 0, the string will not allocate.",257],[11,"from_str","","Creates a new string buffer from the given string.",257],[11,"from_utf8","","Returns the vector as a string buffer, if possible, taking care not to\ncopy it.",257],[11,"from_utf8_lossy","","Converts a vector of bytes to a new UTF-8 string.\nAny invalid UTF-8 sequences are replaced with U+FFFD REPLACEMENT CHARACTER.",257],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `None`\nif `v` contains any invalid data.",257],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",257],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",257],[11,"from_utf8_unchecked","","Converts a vector of bytes to a new `String` without checking if\nit contains valid UTF-8. This is unsafe because it assumes that\nthe UTF-8-ness of the vector has already been validated.",257],[11,"into_bytes","","Return the underlying byte buffer, encoded as UTF-8.",257],[11,"push_str","","Pushes the given string onto this string buffer.",257],[11,"capacity","","Returns the number of bytes that this string buffer can hold without\nreallocating.",257],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `String`. The collection may reserve more space to avoid\nfrequent reallocations.",257],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `String`. Does nothing if the capacity is already\nsufficient.",257],[11,"shrink_to_fit","","Shrinks the capacity of this string buffer to match its length.",257],[11,"push","","Adds the given character to the end of the string.",257],[11,"as_bytes","","Works with the underlying buffer as a byte slice.",257],[11,"truncate","","Shortens a string to the specified length.",257],[11,"pop","","Removes the last character from the string buffer and returns it.\nReturns `None` if this string buffer is empty.",257],[11,"remove","","Removes the character from the string buffer at byte position `idx` and\nreturns it.",257],[11,"insert","","Insert a character into the string buffer at byte position `idx`.",257],[11,"as_mut_vec","","Views the string buffer as a mutable sequence of bytes.",257],[11,"len","","Return the number of bytes in this string.",257],[11,"is_empty","","Returns true if the string contains no bytes",257],[11,"clear","","Truncates the string, returning it to 0 length.",257],[11,"into_bytes","","Consume this error, returning the bytes that were attempted to make a\n`String` with.",258],[11,"utf8_error","","Access the underlying UTF8-error that was the cause of this error.",258],[11,"fmt","","",258],[11,"description","","",258],[11,"cause","","",258],[11,"fmt","","",259],[11,"description","","",259],[11,"cause","","",259],[11,"from_iter","","",257],[11,"from_iter","","",257],[11,"extend","","",257],[11,"extend","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"ne","","",257],[11,"eq","","",257],[11,"ne","","",257],[11,"ne","","",257],[11,"eq","std::borrow","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"eq","collections::string","",257],[11,"ne","","",257],[11,"ne","","",257],[11,"eq","std::borrow","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"as_slice","collections::string","",257],[11,"default","","",257],[11,"fmt","","",257],[11,"fmt","","",257],[11,"hash","","",257],[6,"Output","std::slice",""],[11,"add","collections::string","",257],[6,"Output","std::slice",""],[11,"index","collections::string","",257],[6,"Output","std::slice",""],[11,"index","collections::string","",257],[6,"Output","std::slice",""],[11,"index","collections::string","",257],[6,"Output","std::slice",""],[11,"index","collections::string","",257],[6,"Target","std::slice",""],[11,"deref","collections::string","",257],[6,"Target","std::slice",""],[11,"deref","collections::string","",260],[6,"Err","std::slice",""],[11,"from_str","collections::string","",257],[11,"into_cow","","",257],[11,"as_slice","std::borrow","",28],[11,"write_str","collections::string","",257],[11,"write_fmt","","",257],[11,"new","collections::vec","Constructs a new, empty `Vec<T>`.",261],[11,"with_capacity","","Constructs a new, empty `Vec<T>` with the specified capacity.",261],[11,"from_raw_parts","","Creates a `Vec<T>` directly from the raw components of another vector.",261],[11,"from_raw_buf","","Creates a vector by copying the elements from a raw pointer.",261],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",261],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`Vec<T>`. The collection may reserve more space to avoid frequent reallocations.",261],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec<T>`. Does nothing if the capacity is already\nsufficient.",261],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",261],[11,"into_boxed_slice","","Convert the vector into Box<[T]>.",261],[11,"truncate","","Shorten a vector, dropping excess elements.",261],[11,"as_mut_slice","","Returns a mutable slice of the elements of `self`.",261],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",261],[11,"set_len","","Sets the length of a vector.",261],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",261],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after position `i` one position to the right.",261],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after position `index` one position to the left.",261],[11,"retain","","Retains only the elements specified by the predicate.",261],[11,"push","","Appends an element to the back of a collection.",261],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it is empty.",261],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",261],[11,"drain","","Creates a draining iterator that clears the `Vec` and iterates over\nthe removed items from start to end.",261],[11,"clear","","Clears the vector, removing all values.",261],[11,"len","","Returns the number of elements in the vector.",261],[11,"is_empty","","Returns `true` if the vector contains no elements.",261],[11,"map_in_place","","Converts a `Vec<T>` to a `Vec<U>` where `T` and `U` have the same\nsize and in case they are not zero-sized the same minimal alignment.",261],[11,"split_off","","Splits the collection into two at the given index.",261],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",261],[11,"push_all","","Appends all elements in a slice to the `Vec`.",261],[11,"dedup","","Removes consecutive repeated elements in the vector.",261],[11,"clone","","",261],[11,"clone_from","","",261],[11,"clone_from","","",261],[11,"hash","","",261],[6,"Output","std::slice",""],[11,"index","collections::vec","",261],[6,"Output","std::slice",""],[11,"index_mut","collections::vec","",261],[6,"Output","std::slice",""],[11,"index","collections::vec","",261],[6,"Output","std::slice",""],[11,"index","collections::vec","",261],[6,"Output","std::slice",""],[11,"index","collections::vec","",261],[6,"Output","std::slice",""],[11,"index","collections::vec","",261],[6,"Output","std::slice",""],[11,"index_mut","collections::vec","",261],[6,"Output","std::slice",""],[11,"index_mut","collections::vec","",261],[6,"Output","std::slice",""],[11,"index_mut","collections::vec","",261],[6,"Output","std::slice",""],[11,"index_mut","collections::vec","",261],[6,"Target","std::slice",""],[11,"deref","collections::vec","",261],[11,"deref_mut","","",261],[11,"from_iter","","",261],[6,"Iter","std::slice",""],[11,"into_iter","collections::vec","",261],[6,"Iter","std::slice",""],[6,"Iter","",""],[11,"extend","collections::vec","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"ne","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"ne","","",261],[11,"eq","","",261],[11,"ne","","",261],[11,"ne","","",261],[11,"eq","std::borrow","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"eq","collections::vec","",261],[11,"ne","","",261],[11,"ne","","",261],[11,"eq","std::borrow","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"eq","","",28],[11,"ne","","",28],[11,"ne","","",28],[11,"partial_cmp","collections::vec","",261],[11,"lt","","",261],[11,"le","","",261],[11,"gt","","",261],[11,"ge","","",261],[11,"cmp","","",261],[11,"as_slice","","Returns a slice into `self`.",261],[6,"Output","std::slice",""],[11,"add","collections::vec","",261],[11,"drop","","",261],[11,"default","","",261],[11,"fmt","","",261],[11,"from_iter","std::borrow","",28],[11,"into_cow","collections::vec","",261],[11,"into_inner","","Drops all items that have not yet been moved and returns the empty vector.",262],[6,"Item","std::slice",""],[11,"next","collections::vec","",262],[11,"size_hint","","",262],[11,"size_hint","","",262],[11,"next_back","","",262],[11,"len","","",262],[11,"drop","","",262],[6,"Item","std::slice",""],[11,"next","collections::vec","",263],[11,"size_hint","","",263],[11,"size_hint","","",263],[11,"next_back","","",263],[11,"len","","",263],[11,"drop","","",263],[6,"Target","std::slice",""],[11,"deref","collections::vec","",264],[11,"drop","","",264],[11,"drop","","",265],[11,"drop","","",266],[11,"default","collections::vec_map","",267],[11,"clone","","",267],[11,"clone_from","","",267],[11,"clone_from","","",267],[11,"hash","","",267],[11,"new","","Creates an empty `VecMap`.",267],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",267],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",267],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",267],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",267],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `uint`.",267],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",267],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(uint, &'r V)`.",267],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(uint, &'r mut V)`.",267],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(uint, &'r V)`.",267],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator's element type is `(uint, &'r V)`. Keeps the allocated memory for reuse.",267],[11,"len","","Return the number of elements in the map.",267],[11,"is_empty","","Return true if the map contains no elements.",267],[11,"clear","","Clears the map, removing all key-value pairs.",267],[11,"get","","Returns a reference to the value corresponding to the key.",267],[11,"contains_key","","Returns true if the map contains a value for the specified key.",267],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",267],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",267],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",267],[11,"eq","","",267],[11,"ne","","",267],[11,"partial_cmp","","",267],[11,"lt","","",267],[11,"le","","",267],[11,"gt","","",267],[11,"ge","","",267],[11,"cmp","","",267],[11,"fmt","","",267],[11,"from_iter","","",267],[6,"Iter","std::slice",""],[11,"into_iter","collections::vec_map","",267],[6,"Iter","std::slice",""],[6,"Iter","",""],[11,"extend","collections::vec_map","",267],[6,"Output","std::slice",""],[11,"index","collections::vec_map","",267],[6,"Output","std::slice",""],[11,"index_mut","collections::vec_map","",267],[11,"clone","","",268],[11,"clone_from","","",268],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",268],[11,"size_hint","","",268],[11,"size_hint","","",268],[11,"next_back","","",268],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",269],[11,"size_hint","","",269],[11,"size_hint","","",269],[11,"next_back","","",269],[11,"clone","","",270],[11,"clone_from","","",270],[11,"clone","","",271],[11,"clone_from","","",271],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",272],[11,"size_hint","","",272],[11,"size_hint","","",272],[11,"next_back","","",272],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",270],[11,"size_hint","","",270],[11,"size_hint","","",270],[11,"next_back","","",270],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",271],[11,"size_hint","","",271],[11,"size_hint","","",271],[11,"next_back","","",271],[6,"Item","std::slice",""],[11,"next","collections::vec_map","",273],[11,"size_hint","","",273],[11,"size_hint","","",273],[11,"next_back","","",273],[3,"ElementSwaps","std::slice","An iterator that yields the element swaps needed to produce\na sequence of all possible permutations for an indexed sequence of\nelements. Each permutation is only a single swap apart."],[3,"Permutations","","An iterator that uses `ElementSwaps` to iterate through\nall possible permutations of a vector."],[3,"IterMut","","Mutable slice iterator."],[8,"IntSliceExt","","Extension methods for slices containing integers."],[10,"as_unsigned","","Converts the slice to an immutable slice of unsigned integers with the same width.",274],[10,"as_signed","","Converts the slice to an immutable slice of signed integers with the same width.",274],[10,"as_unsigned_mut","","Converts the slice to a mutable slice of unsigned integers with the same width.",274],[10,"as_signed_mut","","Converts the slice to a mutable slice of signed integers with the same width.",274],[8,"AsSlice","","Data that is viewable as a slice."],[10,"as_slice","","Work with `self` as a slice.",275],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder."],[3,"Windows","","An iterator over overlapping subslices of length `size`."],[5,"mut_ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[5,"ref_slice","","Converts a pointer to A into a slice of length 1 (without copying)."],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`."],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[0,"bytes","","Operations on `[u8]`."],[8,"MutableByteVector","std::slice::bytes","A trait for operations on mutable `[u8]`s."],[10,"set_memory","","Sets all bytes of the receiver to the given value.",276],[5,"copy_memory","","Copies data from `src` to `dst`"],[5,"from_raw_buf","std::slice","Forms a slice from a pointer and a length."],[3,"Iter","","Immutable slice iterator"],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction."],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice."],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime)."],[5,"from_raw_mut_buf","","Performs the same functionality as `from_raw_buf`, except that a mutable\nslice is returned."],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits."],[0,"str","std","Unicode string manipulation (`str` type)"],[3,"Decompositions","std::str","External iterator for a string's decomposition's characters.\nUse with the `std::iter` module."],[3,"Recompositions","","External iterator for a string's recomposition's characters.\nUse with the `std::iter` module."],[3,"Utf16Units","","External iterator for a string's UTF16 codeunits.\nUse with the `std::iter` module."],[8,"StrExt","","Any string that can be represented as a slice."],[10,"escape_default","","Escapes each char in `s` with `char::escape_default`.",277],[10,"escape_unicode","","Escapes each char in `s` with `char::escape_unicode`.",277],[10,"replace","","Replaces all occurrences of one string with another.",277],[10,"nfd_chars","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",277],[10,"nfkd_chars","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",277],[10,"nfc_chars","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",277],[10,"nfkc_chars","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",277],[10,"contains","","Returns true if a string contains a string pattern.",277],[10,"contains_char","","Returns true if a string contains a char pattern.",277],[10,"chars","","An iterator over the characters of `self`. Note, this iterates\nover Unicode code-points, not Unicode graphemes.",277],[10,"bytes","","An iterator over the bytes of `self`",277],[10,"char_indices","","An iterator over the characters of `self` and their byte offsets.",277],[10,"split","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`.",277],[10,"splitn","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`, restricted to splitting at most `count`\ntimes.",277],[10,"split_terminator","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`.",277],[10,"rsplitn","","An iterator over substrings of `self`, separated by characters\nmatched by the pattern `pat`, starting from the end of the string.\nRestricted to splitting at most `count` times.",277],[10,"match_indices","","An iterator over the start and end indices of the disjoint\nmatches of the pattern `pat` within `self`.",277],[10,"split_str","","An iterator over the substrings of `self` separated by the pattern `sep`.",277],[10,"lines","","An iterator over the lines of a string (subsequences separated\nby `\\n`). This does not include the empty string after a\ntrailing `\\n`.",277],[10,"lines_any","","An iterator over the lines of a string, separated by either\n`\\n` or `\\r\\n`. As with `.lines()`, this does not include an\nempty trailing line.",277],[10,"slice","","Deprecated: use `s[a .. b]` instead.",277],[10,"slice_from","","Deprecated: use `s[a..]` instead.",277],[10,"slice_to","","Deprecated: use `s[..a]` instead.",277],[10,"slice_chars","","Returns a slice of the string from the character range\n[`begin`..`end`).",277],[10,"slice_unchecked","","Takes a bytewise (not UTF-8) slice from a string.",277],[10,"starts_with","","Returns true if the pattern `pat` is a prefix of the string.",277],[10,"ends_with","","Returns true if the pattern `pat` is a suffix of the string.",277],[10,"trim_matches","","Returns a string with all pre- and suffixes that match\nthe pattern `pat` repeatedly removed.",277],[10,"trim_left_matches","","Returns a string with all prefixes that match\nthe pattern `pat` repeatedly removed.",277],[10,"trim_right_matches","","Returns a string with all suffixes that match\nthe pattern `pat` repeatedly removed.",277],[10,"is_char_boundary","","Check that `index`-th byte lies at the start and/or end of a\nUTF-8 code point sequence.",277],[10,"char_range_at","","Pluck a character out of a string and return the index of the next\ncharacter.",277],[10,"char_range_at_reverse","","Given a byte position and a str, return the previous char and its position.",277],[10,"char_at","","Plucks the character starting at the `i`th byte of a string.",277],[10,"char_at_reverse","","Plucks the character ending at the `i`th byte of a string.",277],[10,"as_bytes","","Work with the byte buffer of a string as a byte slice.",277],[10,"find","","Returns the byte index of the first character of `self` that\nmatches the pattern `pat`.",277],[10,"rfind","","Returns the byte index of the last character of `self` that\nmatches the pattern `pat`.",277],[10,"find_str","","Returns the byte index of the first matching substring",277],[10,"slice_shift_char","","Retrieves the first character from a string slice and returns\nit. This does not allocate a new string; instead, it returns a\nslice that point one character beyond the character that was\nshifted. If the string does not contain any characters,\nNone is returned instead.",277],[10,"subslice_offset","","Returns the byte offset of an inner slice relative to an enclosing outer slice.",277],[10,"as_ptr","","Return an unsafe pointer to the strings buffer.",277],[10,"utf16_units","","Return an iterator of `u16` over the string encoded as UTF-16.",277],[10,"len","","Return the number of bytes in this string",277],[10,"is_empty","","Returns true if this slice contains no bytes",277],[10,"parse","","Parse this string into the specified type.",277],[10,"graphemes","","Returns an iterator over the\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)\nof the string.",277],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of self and their byte offsets.\nSee `graphemes()` method for more information.",277],[10,"words","","An iterator over the words of a string (subsequences separated\nby any sequence of whitespace). Sequences of whitespace are\ncollapsed, so empty \"words\" are not included.",277],[10,"width","","Returns a string's displayed width in columns, treating control\ncharacters as zero-width.",277],[10,"trim","","Returns a string with leading and trailing whitespace removed.",277],[10,"trim_left","","Returns a string with leading whitespace removed.",277],[10,"trim_right","","Returns a string with trailing whitespace removed.",277],[3,"SplitStr","","An iterator over the substrings of a string separated by a given\nsearch string"],[8,"Str","","Any string that can be represented as a slice"],[10,"as_slice","","Work with `self` as a slice.",278],[3,"Bytes","","External iterator for a string's bytes.\nUse with the `std::iter` module."],[3,"CharIndices","","External iterator for a string's characters and their byte offsets.\nUse with the `std::iter` module."],[3,"Split","","Return type of `StrExt::split`"],[3,"SplitN","","Return type of `StrExt::splitn`"],[3,"Lines","","An iterator over the lines of a string, separated by `\\n`."],[8,"CharEq","","Something that can be used to compare against a character"],[10,"matches","","Determine if the splitter should split at the given character",279],[10,"only_ascii","","Indicate if this is only concerned about ASCII characters,\nwhich can allow for a faster implementation.",279],[5,"from_c_str","","Constructs a static string slice from a given raw pointer."],[4,"Utf8Error","","Errors which can occur when attempting to interpret a byte slice as a `str`."],[13,"InvalidByte","","An invalid byte was detected at the byte offset given.",101],[13,"TooShort","","The byte slice was invalid because more bytes were needed but no more\nbytes were available.",101],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string."],[12,"ch","","Current `char`",280],[12,"next","","Index of the first byte of the next `char`",280],[5,"from_utf8","","Converts a slice of bytes to a string slice without performing any\nallocations."],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8."],[3,"MatchIndices","","An iterator over the start and end indices of the matches of a\nsubstring within a larger string"],[11,"clone","unicode::tables::grapheme","",281],[11,"clone_from","","",281],[11,"clone","unicode::u_str","",282],[11,"clone_from","","",282],[6,"Item","std::str",""],[11,"next","unicode::u_str","",282],[11,"size_hint","","",282],[11,"size_hint","","",282],[11,"next_back","","",282],[11,"clone","","",283],[11,"clone_from","","",283],[11,"eq","","",284],[11,"ne","","",284],[11,"ne","","",284],[6,"Item","std::str",""],[11,"size_hint","unicode::u_str","",283],[11,"next","","",283],[11,"size_hint","","",283],[11,"next_back","","",283],[11,"clone","","",285],[11,"clone_from","","",285],[11,"fmt","","",286],[11,"clone","","",286],[11,"clone_from","","",286],[11,"eq","","",286],[11,"ne","","",286],[11,"ne","","",286],[11,"to_char_lossy","","Convert `self` to a `char`, taking `LoneSurrogate`s to the\nreplacement character (U+FFFD).",286],[6,"Item","std::str",""],[11,"next","unicode::u_str","",285],[11,"size_hint","","",285],[11,"size_hint","","",285],[11,"clone","","",287],[11,"clone_from","","",287],[11,"new","","Create an UTF-16 encoder from any `char` iterator.",287],[6,"Item","std::str",""],[11,"next","unicode::u_str","",287],[11,"size_hint","","",287],[11,"size_hint","","",287],[6,"Item","std::str",""],[11,"next","unicode::u_str","",288],[11,"size_hint","","",288],[11,"next_back","","",288],[3,"Words","std::str","An iterator over the words of a string, separated by a sequence of whitespace"],[3,"RSplitN","","Return type of `StrExt::rsplitn`"],[3,"Graphemes","","External iterator for a string's\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries)."],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring."],[16,"Err","std::str::FromStr",""],[10,"from_str","std::str","Parses a string `s` to return an optional value of this type. If the\nstring is ill-formatted, the None is returned.",289],[3,"SplitTerminator","","Return type of `StrExt::split_terminator`"],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string"],[3,"LinesAny","","An iterator over the lines of a string, separated by either `\\n` or (`\\r\\n`)."],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets."],[0,"string","std","An owned, growable string that enforces that its contents are valid UTF-8."],[3,"String","std::string","A growable string stored as a UTF-8 encoded buffer."],[3,"FromUtf8Error","","A possible error value from the `String::from_utf8` function."],[3,"FromUtf16Error","","A possible error value from the `String::from_utf16` function."],[3,"DerefString","","Wrapper type providing a `&String` reference via `Deref`."],[5,"as_string","","Convert a string slice to a wrapper type providing a `&String` reference."],[8,"ToString","","A generic trait for converting a value to a string"],[10,"to_string","","Converts the value of `self` to an owned string",290],[6,"CowString","",""],[0,"vec","std","A growable list type with heap-allocated contents, written `Vec<T>` but pronounced 'vector.'"],[3,"Vec","std::vec","A growable list type, written `Vec<T>` but pronounced 'vector.'"],[6,"CowVec","",""],[3,"IntoIter","","An iterator that moves out of a vector."],[3,"Drain","","An iterator that drains a vector."],[3,"DerefVec","","Wrapper type providing a `&Vec<T>` reference via `Deref`."],[5,"as_vec","","Convert a slice to a wrapper type providing a `&Vec<T>` reference."],[0,"char","std","Character manipulation (`char` type, Unicode Scalar Value)"],[5,"decompose_compatible","std::char","Compute canonical or compatible Unicode decomposition for character"],[5,"from_u32","","Converts a `u32` to an `Option<char>`."],[5,"canonical_combining_class","",""],[5,"compose","",""],[5,"from_digit","","Converts a number to the character representing it."],[8,"CharExt","","Functionality for manipulating `char`."],[10,"is_digit","","Checks if a `char` parses as a numeric digit in the given radix.",291],[10,"to_digit","","Converts a character to the corresponding digit.",291],[10,"escape_unicode","","Returns an iterator that yields the hexadecimal Unicode escape\nof a character, as `char`s.",291],[10,"escape_default","","Returns an iterator that yields the 'default' ASCII and\nC++11-like literal escape of a character, as `char`s.",291],[10,"len_utf8","","Returns the amount of bytes this character would need if encoded in\nUTF-8.",291],[10,"len_utf16","","Returns the amount of bytes this character would need if encoded in\nUTF-16.",291],[10,"encode_utf8","","Encodes this character as UTF-8 into the provided byte buffer,\nand then returns the number of bytes written.",291],[10,"encode_utf16","","Encodes this character as UTF-16 into the provided `u16` buffer,\nand then returns the number of `u16`s written.",291],[10,"is_alphabetic","","Returns whether the specified character is considered a Unicode\nalphabetic code point.",291],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start'\nUnicode property.",291],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue'\nUnicode property.",291],[10,"is_lowercase","","Indicates whether a character is in lowercase.",291],[10,"is_uppercase","","Indicates whether a character is in uppercase.",291],[10,"is_whitespace","","Indicates whether a character is whitespace.",291],[10,"is_alphanumeric","","Indicates whether a character is alphanumeric.",291],[10,"is_control","","Indicates whether a character is a control code point.",291],[10,"is_numeric","","Indicates whether the character is numeric (Nd, Nl, or No).",291],[10,"to_lowercase","","Converts a character to its lowercase equivalent.",291],[10,"to_uppercase","","Converts a character to its uppercase equivalent.",291],[10,"width","","Returns this character's displayed width in columns, or `None` if it is a\ncontrol character other than `'\\x00'`.",291],[17,"MAX","","The highest valid code point"],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on."],[5,"decompose_canonical","","Compute canonical Unicode decomposition for character"],[0,"prelude","std","The Rust prelude"],[0,"v1","std::prelude","The first version of the prelude of the standard library."],[0,"int","std","Deprecated: replaced by `isize`."],[17,"BITS","std::int",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"isize","std","Operations and constants for pointer-sized signed integers (`isize` type)"],[17,"BITS","std::isize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i8","std","Operations and constants for signed 8-bits integers (`i8` type)"],[17,"BITS","std::i8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i16","std","Operations and constants for signed 16-bits integers (`i16` type)"],[17,"BITS","std::i16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i32","std","Operations and constants for signed 32-bits integers (`i32` type)"],[17,"BITS","std::i32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"i64","std","Operations and constants for signed 64-bits integers (`i64` type)"],[17,"BITS","std::i64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"uint","std","Deprecated: replaced by `usize`."],[17,"BITS","std::uint",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"usize","std","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[17,"BITS","std::usize",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u8","std","Operations and constants for unsigned 8-bits integers (`u8` type)"],[17,"BITS","std::u8",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u16","std","Operations and constants for unsigned 16-bits integers (`u16` type)"],[17,"BITS","std::u16",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u32","std","Operations and constants for unsigned 32-bits integers (`u32` type)"],[17,"BITS","std::u32",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"u64","std","Operations and constants for unsigned 64-bits integer (`u64` type)"],[17,"BITS","std::u64",""],[17,"BYTES","",""],[17,"MIN","",""],[17,"MAX","",""],[0,"f32","std","Operations and constants for 32-bits floats (`f32` type)"],[17,"RADIX","std::f32",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f32 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f32 value"],[17,"MAX_VALUE","","Largest finite f32 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"consts","","Various useful constants."],[17,"PI","std::f32::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f32","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"f64","std","Operations and constants for 64-bits floats (`f64` type)"],[17,"RADIX","std::f64",""],[17,"MANTISSA_DIGITS","",""],[17,"DIGITS","",""],[17,"EPSILON","",""],[17,"MIN_VALUE","","Smallest finite f64 value"],[17,"MIN_POS_VALUE","","Smallest positive, normalized f64 value"],[17,"MAX_VALUE","","Largest finite f64 value"],[17,"MIN_EXP","",""],[17,"MAX_EXP","",""],[17,"MIN_10_EXP","",""],[17,"MAX_10_EXP","",""],[17,"NAN","",""],[17,"INFINITY","",""],[17,"NEG_INFINITY","",""],[0,"consts","","Various useful constants."],[17,"PI","std::f64::consts","Archimedes' constant"],[17,"PI_2","","pi * 2.0"],[17,"FRAC_PI_2","","pi/2.0"],[17,"FRAC_PI_3","","pi/3.0"],[17,"FRAC_PI_4","","pi/4.0"],[17,"FRAC_PI_6","","pi/6.0"],[17,"FRAC_PI_8","","pi/8.0"],[17,"FRAC_1_PI","","1.0/pi"],[17,"FRAC_2_PI","","2.0/pi"],[17,"FRAC_2_SQRTPI","","2.0/sqrt(pi)"],[17,"SQRT2","","sqrt(2.0)"],[17,"FRAC_1_SQRT2","","1.0/sqrt(2.0)"],[17,"E","","Euler's number"],[17,"LOG2_E","","log2(e)"],[17,"LOG10_E","","log10(e)"],[17,"LN_2","","ln(2.0)"],[17,"LN_10","","ln(10.0)"],[5,"to_string","std::f64","Converts a float to a string"],[5,"to_str_hex","","Converts a float to a string in hexadecimal format"],[5,"to_str_radix_special","","Converts a float to a string in a given radix, and a flag indicating\nwhether it's a special value"],[5,"to_str_exact","","Converts a float to a string with exactly the number of\nprovided significant digits"],[5,"to_str_digits","","Converts a float to a string with a maximum number of\nsignificant digits"],[5,"to_str_exp_exact","","Converts a float to a string using the exponential notation with exactly the number of\nprovided digits after the decimal point in the significand"],[5,"to_str_exp_digits","","Converts a float to a string using the exponential notation with the maximum number of\ndigits after the decimal point in the significand"],[0,"ascii","std","Operations on ASCII strings and characters"],[5,"escape_default","std::ascii","Returns a 'default' ASCII and C++11-like literal escape of a `u8`"],[8,"OwnedAsciiExt","","Extension methods for ASCII-subset only operations on owned strings"],[10,"into_ascii_uppercase","","Convert the string to ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",292],[10,"into_ascii_lowercase","","Convert the string to ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",292],[8,"AsciiExt","","Extension methods for ASCII-subset only operations on string slices"],[10,"is_ascii","","Check if within the ASCII range.",293],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case:\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.",293],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case:\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.",293],[10,"eq_ignore_ascii_case","","Check that two strings are an ASCII case-insensitive match.\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporary strings.",293],[11,"into_ascii_uppercase","std::string","",257],[11,"into_ascii_lowercase","","",257],[11,"into_ascii_uppercase","std::vec","",261],[11,"into_ascii_lowercase","","",261],[0,"thunk","std",""],[3,"Thunk","std::thunk",""],[8,"Invoke","",""],[10,"invoke","","",294],[11,"new","","",295],[11,"with_arg","","",295],[11,"invoke","","",295],[0,"num","std","Numeric traits and functions for generic mathematics"],[8,"Int","std::num","A built-in signed or unsigned integer."],[10,"zero","","Returns the `0` value of this integer type.",296],[10,"one","","Returns the `1` value of this integer type.",296],[10,"min_value","","Returns the smallest value that can be represented by this integer type.",296],[10,"max_value","","Returns the largest value that can be represented by this integer type.",296],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",296],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",296],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",296],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",296],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",296],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",296],[10,"swap_bytes","","Reverses the byte order of the integer.",296],[10,"from_be","","Convert an integer from big endian to the target's endianness.",296],[10,"from_le","","Convert an integer from little endian to the target's endianness.",296],[10,"to_be","","Convert `self` to big endian from the target's endianness.",296],[10,"to_le","","Convert `self` to little endian from the target's endianness.",296],[10,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if\noverflow occurred.",296],[10,"checked_sub","","Checked integer subtraction. Computes `self - other`, returning `None`\nif underflow occurred.",296],[10,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",296],[10,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if\n`other == 0` or the operation results in underflow or overflow.",296],[10,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at\nthe numeric bounds instead of overflowing.",296],[10,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at\nthe numeric bounds instead of overflowing.",296],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",296],[8,"SignedInt","","A built-in two's complement integer."],[10,"abs","","Computes the absolute value of `self`. `Int::min_value()` will be\nreturned if the number is `Int::min_value()`.",297],[10,"signum","","Returns a number representing sign of `self`.",297],[10,"is_positive","","Returns `true` if `self` is positive and `false` if the number\nis zero or negative.",297],[10,"is_negative","","Returns `true` if `self` is negative and `false` if the number\nis zero or positive.",297],[8,"UnsignedInt","","A built-in unsigned integer."],[10,"is_power_of_two","","Returns `true` iff `self == 2^k` for some `k`.",298],[10,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`.\nUnspecified behavior on overflow.",298],[10,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `n`. If the\nnext power of two is greater than the type's maximum value, `None` is\nreturned, otherwise the power of two is wrapped in `Some`.",298],[5,"cast","","Cast from one machine scalar to another."],[8,"FromPrimitive","","A generic trait for converting a number to a value."],[10,"from_int","","Convert an `int` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",299],[10,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_uint","","Convert an `uint` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[10,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",299],[8,"NumCast","","An interface for casting between machine scalars."],[10,"from","","Creates a number from another value that can be converted into a primitive via the\n`ToPrimitive` trait.",300],[8,"ToPrimitive","","A generic trait for converting a value to a number."],[10,"to_int","","Converts the value of `self` to an `int`.",301],[10,"to_i8","","Converts the value of `self` to an `i8`.",301],[10,"to_i16","","Converts the value of `self` to an `i16`.",301],[10,"to_i32","","Converts the value of `self` to an `i32`.",301],[10,"to_i64","","Converts the value of `self` to an `i64`.",301],[10,"to_uint","","Converts the value of `self` to an `uint`.",301],[10,"to_u8","","Converts the value of `self` to an `u8`.",301],[10,"to_u16","","Converts the value of `self` to an `u16`.",301],[10,"to_u32","","Converts the value of `self` to an `u32`.",301],[10,"to_u64","","Converts the value of `self` to an `u64`.",301],[10,"to_f32","","Converts the value of `self` to an `f32`.",301],[10,"to_f64","","Converts the value of `self` to an `f64`.",301],[5,"from_int","","A utility function that just calls `FromPrimitive::from_int`."],[5,"from_i8","","A utility function that just calls `FromPrimitive::from_i8`."],[5,"from_i16","","A utility function that just calls `FromPrimitive::from_i16`."],[5,"from_i32","","A utility function that just calls `FromPrimitive::from_i32`."],[5,"from_i64","","A utility function that just calls `FromPrimitive::from_i64`."],[5,"from_uint","","A utility function that just calls `FromPrimitive::from_uint`."],[5,"from_u8","","A utility function that just calls `FromPrimitive::from_u8`."],[5,"from_u16","","A utility function that just calls `FromPrimitive::from_u16`."],[5,"from_u32","","A utility function that just calls `FromPrimitive::from_u32`."],[5,"from_u64","","A utility function that just calls `FromPrimitive::from_u64`."],[5,"from_f32","","A utility function that just calls `FromPrimitive::from_f32`."],[5,"from_f64","","A utility function that just calls `FromPrimitive::from_f64`."],[8,"FromStrRadix","","A generic trait for converting a string with a radix (base) to a value"],[16,"Err","std::num::FromStrRadix",""],[10,"from_str_radix","std::num","",302],[5,"from_str_radix","","A utility function that just calls FromStrRadix::from_str_radix."],[4,"FpCategory","","Used for representing the classification of floating point numbers"],[13,"Nan","","\"Not a Number\", often obtained by dividing by zero",2],[13,"Infinite","","Positive or negative infinity",2],[13,"Zero","","Positive or negative zero",2],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",2],[13,"Normal","","A regular floating point number",2],[0,"strconv","",""],[4,"ExponentFormat","std::num::strconv","A flag that specifies whether to use exponential (scientific) notation."],[13,"ExpNone","","Do not use exponential notation.",303],[13,"ExpDec","","Use exponential notation with the exponent having a base of 10 and the\nexponent sign being `e` or `E`. For example, 1000 would be printed\n1e3.",303],[13,"ExpBin","","Use exponential notation with the exponent having a base of 2 and the\nexponent sign being `p` or `P`. For example, 8 would be printed 1p3.",303],[4,"SignificantDigits","","The number of digits used for emitting the fractional part of a number, if\nany."],[13,"DigAll","","All calculable digits will be printed.",304],[13,"DigMax","","At most the given number of digits will be printed, truncating any\ntrailing zeroes.",304],[13,"DigExact","","Precisely the given number of digits will be printed.",304],[4,"SignFormat","","How to emit the sign of a number."],[13,"SignNone","","No sign will be printed. The exponent sign will also be emitted.",305],[13,"SignNeg","","`-` will be printed for negative values, but no sign will be emitted\nfor positive numbers.",305],[13,"SignAll","","`+` will be printed for positive values, and `-` will be printed for\nnegative values.",305],[5,"float_to_str_bytes_common","","Converts a number to its string representation as a byte vector.\nThis is meant to be a common base implementation for all numeric string\nconversion functions like `to_string()` or `to_str_radix()`."],[5,"float_to_str_common","","Converts a number to its string representation. This is a wrapper for\n`to_str_bytes_common()`, for details see there."],[8,"Float","std::num","Mathematical operations on primitive floating point numbers."],[10,"nan","","Returns the NaN value.",306],[10,"infinity","","Returns the infinite value.",306],[10,"neg_infinity","","Returns the negative infinite value.",306],[10,"zero","","Returns the `0` value.",306],[10,"neg_zero","","Returns -0.0.",306],[10,"one","","Returns the `1` value.",306],[10,"mantissa_digits","","Returns the number of binary digits of mantissa that this type supports.",306],[10,"digits","","Returns the number of base-10 digits of precision that this type supports.",306],[10,"epsilon","","Returns the difference between 1.0 and the smallest representable number larger than 1.0.",306],[10,"min_exp","","Returns the minimum binary exponent that this type can represent.",306],[10,"max_exp","","Returns the maximum binary exponent that this type can represent.",306],[10,"min_10_exp","","Returns the minimum base-10 exponent that this type can represent.",306],[10,"max_10_exp","","Returns the maximum base-10 exponent that this type can represent.",306],[10,"min_value","","Returns the smallest finite value that this type can represent.",306],[10,"min_pos_value","","Returns the smallest normalized positive number that this type can represent.",306],[10,"max_value","","Returns the largest finite value that this type can represent.",306],[10,"is_nan","","Returns true if this value is NaN and false otherwise.",306],[10,"is_infinite","","Returns true if this value is positive infinity or negative infinity and\nfalse otherwise.",306],[10,"is_finite","","Returns true if this number is neither infinite nor NaN.",306],[10,"is_normal","","Returns true if this number is neither zero, infinite, denormal, or NaN.",306],[10,"classify","","Returns the category that this number falls into.",306],[10,"integer_decode","","Returns the mantissa, exponent and sign as integers, respectively.",306],[10,"floor","","Return the largest integer less than or equal to a number.",306],[10,"ceil","","Return the smallest integer greater than or equal to a number.",306],[10,"round","","Return the nearest integer to a number. Round half-way cases away from\n`0.0`.",306],[10,"trunc","","Return the integer part of a number.",306],[10,"fract","","Return the fractional part of a number.",306],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",306],[10,"signum","","Returns a number that represents the sign of `self`.",306],[10,"is_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",306],[10,"is_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",306],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",306],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",306],[10,"powi","","Raise a number to an integer power.",306],[10,"powf","","Raise a number to a floating point power.",306],[10,"sqrt","","Take the square root of a number.",306],[10,"rsqrt","","Take the reciprocal (inverse) square root of a number, `1/sqrt(x)`.",306],[10,"exp","","Returns `e^(self)`, (the exponential function).",306],[10,"exp2","","Returns 2 raised to the power of the number, `2^(self)`.",306],[10,"ln","","Returns the natural logarithm of the number.",306],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",306],[10,"log2","","Returns the base 2 logarithm of the number.",306],[10,"log10","","Returns the base 10 logarithm of the number.",306],[10,"to_degrees","","Convert radians to degrees.",306],[10,"to_radians","","Convert degrees to radians.",306],[10,"ldexp","","Constructs a floating point number created by multiplying `x` by 2\nraised to the power of `exp`.",306],[10,"frexp","","Breaks the number into a normalized fraction and a base-2 exponent,\nsatisfying:",306],[10,"next_after","","Returns the next representable floating-point value in the direction of\n`other`.",306],[10,"max","","Returns the maximum of the two numbers.",306],[10,"min","","Returns the minimum of the two numbers.",306],[10,"abs_sub","","The positive difference of two numbers. Returns `0.0` if the number is\nless than or equal to `other`, otherwise the difference between`self`\nand `other` is returned.",306],[10,"cbrt","","Take the cubic root of a number.",306],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",306],[10,"sin","","Computes the sine of a number (in radians).",306],[10,"cos","","Computes the cosine of a number (in radians).",306],[10,"tan","","Computes the tangent of a number (in radians).",306],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",306],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",306],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",306],[10,"atan2","","Computes the four quadrant arctangent of a number, `y`, and another\nnumber `x`. Return value is in radians in the range [-pi, pi].",306],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",306],[10,"exp_m1","","Returns the exponential of the number, minus 1, in a way that is\naccurate even if the number is close to zero.",306],[10,"ln_1p","","Returns the natural logarithm of the number plus 1 (`ln(1+n)`) more\naccurately than if the operations were performed separately.",306],[10,"sinh","","Hyperbolic sine function.",306],[10,"cosh","","Hyperbolic cosine function.",306],[10,"tanh","","Hyperbolic tangent function.",306],[10,"asinh","","Inverse hyperbolic sine function.",306],[10,"acosh","","Inverse hyperbolic cosine function.",306],[10,"atanh","","Inverse hyperbolic tangent function.",306],[0,"thread_local","std","Thread local storage"],[3,"Key","std::thread_local","A thread local storage key which owns its contents."],[4,"State","","Indicator of the state of a thread local storage key."],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",307],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",307],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",307],[0,"scoped","","Scoped thread-local storage"],[3,"Key","std::thread_local::scoped","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`."],[11,"set","","Insert a value into this scoped thread local storage slot for a\nduration of a closure.",308],[11,"with","","Get a value out of this scoped variable.",308],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",308],[11,"eq","std::thread_local","",307],[11,"ne","","",307],[11,"with","","Acquire a reference to the value in this TLS key.",309],[11,"state","","Query the current state of this key.",309],[11,"destroyed","","Deprecated",309],[0,"dynamic_lib","std","Dynamic library facilities."],[3,"DynamicLibrary","std::dynamic_lib",""],[11,"drop","","",310],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",310],[11,"prepend_search_path","","Prepends a path to this process's search path for dynamic libraries",310],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",310],[11,"envvar","","Returns the environment variable for this process's dynamic library\nsearch path",310],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",310],[11,"symbol","","Access the value at the symbol of the dynamic library",310],[0,"ffi","std","Utilities related to FFI bindings."],[3,"CString","std::ffi","A type representing a C-compatible string"],[3,"OsString","","Owned, mutable OS strings."],[3,"OsStr","","Slices into OS strings."],[5,"c_str_to_bytes","","Interpret a C string as a byte slice."],[5,"c_str_to_bytes_with_nul","","Interpret a C string as a byte slice with the nul terminator."],[11,"hash","","",311],[11,"cmp","","",311],[11,"partial_cmp","","",311],[11,"lt","","",311],[11,"le","","",311],[11,"gt","","",311],[11,"ge","","",311],[11,"eq","","",311],[11,"ne","","",311],[11,"clone","","",311],[11,"from_slice","","Create a new C-compatible string from a byte slice.",311],[11,"from_vec","","Create a C-compatible string from a byte vector.",311],[11,"from_vec_unchecked","","Create a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",311],[11,"as_slice_with_nul","","Create a view into this C string which includes the trailing nul\nterminator at the end of the string.",311],[11,"as_bytes","","Similar to the `as_slice` method, but returns a `u8` slice instead of a\n`libc::c_char` slice.",311],[11,"as_bytes_with_nul","","Equivalent to `as_slice_with_nul` except that the type returned is a\n`u8` slice instead of a `libc::c_char` slice.",311],[11,"deref","","",311],[11,"fmt","","",311],[11,"clone","","",312],[11,"from_string","","Constructs an `OsString` at no cost by consuming a `String`.",312],[11,"from_str","","Constructs an `OsString` by copying from a `&str` slice.",312],[11,"new","","Constructs a new empty `OsString`.",312],[11,"into_string","","Convert the `OsString` into a `String` if it contains valid Unicode data.",312],[11,"push_os_str","","Extend the string with the given `&OsStr` slice.",312],[11,"index","","",312],[11,"deref","","",312],[11,"fmt","","",312],[11,"eq","","",312],[11,"eq","","",312],[11,"partial_cmp","","",312],[11,"lt","","",312],[11,"le","","",312],[11,"gt","","",312],[11,"ge","","",312],[11,"partial_cmp","","",312],[11,"cmp","","",312],[11,"hash","","",312],[11,"from_str","","Coerce directly from a `&str` slice to a `&OsStr` slice.",313],[11,"to_str","","Yield a `&str` slice if the `OsStr` is valid unicode.",313],[11,"to_string_lossy","","Convert an `OsStr` to a `CowString`.",313],[11,"to_os_string","","Copy the slice into an onwed `OsString`.",313],[11,"eq","","",313],[11,"eq","","",313],[11,"partial_cmp","","",313],[11,"lt","","",313],[11,"le","","",313],[11,"gt","","",313],[11,"ge","","",313],[11,"partial_cmp","","",313],[11,"cmp","","",313],[11,"hash","","",313],[11,"fmt","","",313],[11,"borrow_from","","",313],[11,"to_owned","","",313],[11,"as_os_str","","",313],[11,"as_os_str","","",312],[11,"as_os_str","std::string","",257],[11,"from_inner","std::ffi","",312],[11,"into_inner","","",312],[11,"as_inner","","",313],[8,"AsOsStr","","Freely convertible to an `&OsStr` slice."],[10,"as_os_str","","Convert to an `&OsStr` slice.",314],[0,"fmt","std","Utilities for formatting and printing strings"],[3,"Formatter","std::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits."],[6,"Result","",""],[8,"Writer","","A collection of methods that are required to format a message into a stream."],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",315],[10,"write_fmt","","Glue for usage of the `write!` macro with implementers of this trait.",315],[8,"Show","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",316],[8,"String","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",317],[8,"Octal","","Format trait for the `o` character"],[10,"fmt","","Formats the value using the given formatter.",318],[8,"Binary","","Format trait for the `b` character"],[10,"fmt","","Formats the value using the given formatter.",319],[8,"Display","","When a value can be semantically expressed as a String, this trait may be\nused. It corresponds to the default format, `{}`."],[10,"fmt","","Formats the value using the given formatter.",320],[8,"Debug","","Format trait for the `:?` format. Useful for debugging, all types\nshould implement this."],[10,"fmt","","Formats the value using the given formatter.",321],[8,"LowerHex","","Format trait for the `x` character"],[10,"fmt","","Formats the value using the given formatter.",322],[8,"UpperHex","","Format trait for the `X` character"],[10,"fmt","","Formats the value using the given formatter.",323],[8,"Pointer","","Format trait for the `p` character"],[10,"fmt","","Formats the value using the given formatter.",324],[8,"LowerExp","","Format trait for the `e` character"],[10,"fmt","","Formats the value using the given formatter.",325],[8,"UpperExp","","Format trait for the `E` character"],[10,"fmt","","Formats the value using the given formatter.",326],[3,"Error","","The error type which is returned from formatting a message into a stream."],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification."],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided."],[5,"radix","","Constructs a radix formatter in the range of `2..36`."],[3,"Radix","","A radix with in the range of `2..36`."],[3,"RadixFmt","","A helper type for formatting radixes."],[5,"format","","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string."],[0,"old_io","std","I/O, including files, networking, timers, and processes"],[3,"TempDir","std::old_io","A wrapper for a path to temporary directory implementing automatic\nscope-based deletion."],[3,"MemReader","","Reads from an owned byte vector"],[3,"BufReader","","Reads from a fixed-size byte slice"],[3,"MemWriter","","Writes to an owned, growable byte vector"],[3,"BufWriter","","Writes to a fixed-size byte slice"],[3,"BufferedReader","","Wraps a Reader and buffers input from it"],[3,"BufferedWriter","","Wraps a Writer and buffers output to it"],[3,"BufferedStream","","Wraps a Stream and buffers input and output to and from it."],[3,"LineBufferedWriter","","Wraps a Writer and buffers output to it, flushing whenever a newline (`0x0a`,\n`'\\n'`) is detected."],[3,"ChanReader","","Allows reading from a rx."],[3,"ChanWriter","","Allows writing to a tx."],[3,"IoError","","The type passed to I/O condition handlers to indicate error"],[12,"kind","","An enumeration which can be matched against for determining the flavor\nof error.",327],[12,"desc","","A human-readable description about the error",327],[12,"detail","","Detailed information about this error, not always available",327],[3,"RefReader","","A `RefReader` is a struct implementing `Reader` which contains a reference\nto another reader. This is often useful when composing streams."],[3,"RefWriter","","A `RefWriter` is a struct implementing `Writer` which contains a reference\nto another writer. This is often useful when composing streams."],[3,"Lines","","An iterator that reads a line on each iteration,\nuntil `.read_line()` encounters `EndOfFile`."],[3,"Chars","","An iterator that reads a utf8-encoded character on each iteration,\nuntil `.read_char()` encounters `EndOfFile`."],[3,"IncomingConnections","","An infinite iterator over incoming connection attempts.\nCalling `next` will block the task until a connection is attempted."],[3,"FileStat","","A structure used to describe metadata information about a file. This\nstructure is created through the `stat` method on a `Path`."],[12,"size","","The size of the file, in bytes",328],[12,"kind","","The kind of file this path points to (directory, file, pipe, etc.)",328],[12,"perm","","The file permissions currently on the file",328],[12,"created","","The time that the file was created at, in platform-dependent\nmilliseconds",328],[12,"modified","","The time that this file was last modified, in platform-dependent\nmilliseconds",328],[12,"accessed","","The time that this file was last accessed, in platform-dependent\nmilliseconds",328],[12,"unstable","","Information returned by stat() which is not guaranteed to be\nplatform-independent. This information may be useful on some platforms,\nbut it may have different meanings or no meaning at all on other\nplatforms.",328],[3,"UnstableFileStat","","This structure represents all of the possible information which can be\nreturned from a `stat` syscall which is not contained in the `FileStat`\nstructure. This information is not necessarily platform independent, and may\nhave different meanings or no meaning at all on some platforms."],[12,"device","","The ID of the device containing the file.",329],[12,"inode","","The file serial number.",329],[12,"rdev","","The device ID.",329],[12,"nlink","","The number of hard links to this file.",329],[12,"uid","","The user ID of the file.",329],[12,"gid","","The group ID of the file.",329],[12,"blksize","","The optimal block size for I/O.",329],[12,"blocks","","The blocks allocated for this file.",329],[12,"flags","","User-defined flags for the file.",329],[12,"gen","","The file generation number.",329],[3,"FilePermission","","/// A set of permissions for a file or directory is represented by a set of\n/// flags which are or'd together."],[4,"IoErrorKind","","A list specifying general categories of I/O error."],[13,"OtherIoError","","Any I/O error not part of this list.",330],[13,"EndOfFile","","The operation could not complete because end of file was reached.",330],[13,"FileNotFound","","The file was not found.",330],[13,"PermissionDenied","","The file permissions disallowed access to this file.",330],[13,"ConnectionFailed","","A network connection failed for some reason not specified in this list.",330],[13,"Closed","","The network operation failed because the network connection was closed.",330],[13,"ConnectionRefused","","The connection was refused by the remote server.",330],[13,"ConnectionReset","","The connection was reset by the remote server.",330],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",330],[13,"NotConnected","","The network operation failed because it was not connected yet.",330],[13,"BrokenPipe","","The operation failed because a pipe was closed.",330],[13,"PathAlreadyExists","","A file already existed with that name.",330],[13,"PathDoesntExist","","No file exists at that location.",330],[13,"MismatchedFileTypeForOperation","","The path did not specify the type of file that this operation required. For example,\nattempting to copy a directory with the `fs::copy()` operation will fail with this error.",330],[13,"ResourceUnavailable","","The operation temporarily failed (for example, because a signal was received), and retrying\nmay succeed.",330],[13,"IoUnavailable","","No I/O functionality is available for this task.",330],[13,"InvalidInput","","A parameter was incorrect in a way that caused an I/O error not part of this list.",330],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",330],[13,"ShortWrite","","This write operation failed to write all of its data.",330],[13,"NoProgress","","The Reader returned 0 bytes from `read()` too many times.",330],[4,"SeekStyle","","When seeking, the resulting cursor is offset from a base by the offset given\nto the `seek` function. The base used is specified by this enumeration."],[13,"SeekSet","","Seek from the beginning of the stream",331],[13,"SeekEnd","","Seek from the end of the stream",331],[13,"SeekCur","","Seek from the current position",331],[4,"FileMode","","A mode specifies how a file should be opened or created. These modes are\npassed to `File::open_mode` and are used to control where the file is\npositioned when it is initially opened."],[13,"Open","","Opens a file positioned at the beginning.",332],[13,"Append","","Opens a file positioned at EOF.",332],[13,"Truncate","","Opens a file, truncating it if it already exists.",332],[4,"FileAccess","","Access permissions with which the file should be opened. `File`s\nopened with `Read` will return an error if written to."],[13,"Read","","Read-only access, requests to write will result in an error",333],[13,"Write","","Write-only access, requests to read will result in an error",333],[13,"ReadWrite","","Read-write access, no requests are denied by default",333],[4,"FileType","","Different kinds of files which can be identified by a call to stat"],[13,"RegularFile","","This is a normal file, corresponding to `S_IFREG`",334],[13,"Directory","","This file is a directory, corresponding to `S_IFDIR`",334],[13,"NamedPipe","","This file is a named pipe, corresponding to `S_IFIFO`",334],[13,"BlockSpecial","","This file is a block device, corresponding to `S_IFBLK`",334],[13,"Symlink","","This file is a symbolic link to another file, corresponding to `S_IFLNK`",334],[13,"Unknown","","The type of this file is not recognized as one of the other categories",334],[5,"standard_error","","Creates a standard error for a commonly used flavor of error. The `detail`\nfield of the returned error will always be `None`."],[11,"fmt","","",335],[11,"with_capacity","","Creates a new `BufferedReader` with the specified buffer capacity",335],[11,"new","","Creates a new `BufferedReader` with a default buffer capacity",335],[11,"get_ref","","Gets a reference to the underlying reader.",335],[11,"get_mut","","Gets a mutable reference to the underlying reader.",335],[11,"into_inner","","Unwraps this `BufferedReader`, returning the underlying reader.",335],[11,"fill_buf","","",335],[11,"consume","","",335],[11,"read","","",335],[11,"fmt","","",336],[11,"with_capacity","","Creates a new `BufferedWriter` with the specified buffer capacity",336],[11,"new","","Creates a new `BufferedWriter` with a default buffer capacity",336],[11,"get_ref","","Gets a reference to the underlying writer.",336],[11,"get_mut","","Gets a mutable reference to the underlying write.",336],[11,"into_inner","","Unwraps this `BufferedWriter`, returning the underlying writer.",336],[11,"write_all","","",336],[11,"flush","","",336],[11,"drop","","",336],[11,"fmt","","",337],[11,"new","","Creates a new `LineBufferedWriter`",337],[11,"get_ref","","Gets a reference to the underlying writer.",337],[11,"into_inner","","Unwraps this `LineBufferedWriter`, returning the underlying writer.",337],[11,"write_all","","",337],[11,"flush","","",337],[11,"fmt","","",338],[11,"with_capacities","","Creates a new buffered stream with explicitly listed capacities for the\nreader/writer buffer.",338],[11,"new","","Creates a new buffered stream with the default reader/writer buffer\ncapacities.",338],[11,"get_ref","","Gets a reference to the underlying stream.",338],[11,"get_mut","","Gets a mutable reference to the underlying stream.",338],[11,"into_inner","","Unwraps this `BufferedStream`, returning the underlying stream.",338],[11,"fill_buf","","",338],[11,"consume","","",338],[11,"read","","",338],[11,"write_all","","",338],[11,"flush","","",338],[11,"new","","Wraps a `Port` in a `ChanReader` structure",339],[11,"fill_buf","","",339],[11,"consume","","",339],[11,"read","","",339],[11,"new","","Wraps a channel in a `ChanWriter` structure",340],[11,"clone","","",340],[11,"write_all","","",340],[11,"write_all","std::vec","",261],[11,"clone","std::old_io","",341],[11,"new","","Create a new `MemWriter`.",341],[11,"with_capacity","","Create a new `MemWriter`, allocating at least `n` bytes for\nthe internal buffer.",341],[11,"from_vec","","Create a new `MemWriter` that will append to an existing `Vec`.",341],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemWriter`.",341],[11,"into_inner","","Unwraps this `MemWriter`, returning the underlying buffer",341],[11,"write_all","","",341],[11,"new","","Creates a new `MemReader` which will read the buffer given. The buffer\ncan be re-acquired through `unwrap`",342],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",342],[11,"get_ref","","Acquires an immutable reference to the underlying buffer of this\n`MemReader`.",342],[11,"into_inner","","Unwraps this `MemReader`, returning the underlying buffer",342],[11,"read","","",342],[11,"tell","","",342],[11,"seek","","",342],[11,"fill_buf","","",342],[11,"consume","","",342],[11,"new","","Creates a new `BufWriter` which will wrap the specified buffer. The\nwriter initially starts at position 0.",343],[11,"write_all","","",343],[11,"tell","","",343],[11,"seek","","",343],[11,"new","","Creates a new buffered reader which will read the specified buffer",344],[11,"eof","","Tests whether this reader has read all bytes in its buffer.",344],[11,"read","","",344],[11,"tell","","",344],[11,"seek","","",344],[11,"fill_buf","","",344],[11,"consume","","",344],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir` whose name\nwill have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",345],[11,"new","","Attempts to make a temporary directory inside of `os::tmpdir()` whose\nname will have the prefix `prefix`. The directory will be automatically\ndeleted once the returned wrapper is destroyed.",345],[11,"into_inner","","Unwrap the wrapped `std::path::Path` from the `TempDir` wrapper.\nThis discards the wrapper so that the automatic deletion of the\ntemporary directory is prevented.",345],[11,"path","","Access the wrapped `std::path::Path` to the temporary directory.",345],[11,"close","","Close and remove the temporary directory",345],[11,"drop","","",345],[0,"extensions","","Utility mixins that apply to all Readers and Writers"],[3,"Bytes","std::old_io::extensions","An iterator that reads a single byte on each iteration,\nuntil `.read_byte()` returns `EndOfFile`."],[5,"u64_to_le_bytes","","Converts an 8-bit to 64-bit unsigned value to a little-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_to_be_bytes","","Converts an 8-bit to 64-bit unsigned value to a big-endian byte\nrepresentation of the given size. If the size is not big enough to\nrepresent the value, then the high-order bytes are truncated."],[5,"u64_from_be_bytes","","Extracts an 8-bit to 64-bit unsigned big-endian value from the given byte\nbuffer and returns it as a 64-bit value."],[11,"new","","Constructs a new byte iterator from the given Reader instance.",346],[6,"Item","",""],[11,"next","","",346],[0,"fs","std::old_io","Synchronous File I/O"],[3,"File","std::old_io::fs","Unconstrained file access type that exposes read and write operations"],[3,"Directories","","An iterator that walks over a directory"],[5,"unlink","","Unlink a file from the underlying filesystem."],[5,"stat","","Given a path, query the file system to get information about a file,\ndirectory, etc. This function will traverse symlinks to query\ninformation about the destination file."],[5,"lstat","","Perform the same operation as the `stat` function, except that this\nfunction does not traverse through symlinks. This will return\ninformation about the symlink file instead of the file that it points\nto."],[5,"rename","","Rename a file or directory to a new name."],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file."],[5,"chmod","","Changes the permission mode bits found on a file or a directory. This\nfunction takes a mask from the `io` module"],[5,"chown","","Change the user and group owners of a file at the specified path."],[5,"link","","Creates a new hard link on the filesystem. The `dst` path will be a\nlink pointing to the `src` path. Note that systems often require these\ntwo paths to both be located on the same filesystem."],[5,"symlink","","Creates a new symbolic link on the filesystem. The `dst` path will be a\nsymlink pointing to the `src` path."],[5,"readlink","","Reads a symlink, returning the file that the symlink points to."],[5,"mkdir","","Create a new, empty directory at the provided path"],[5,"rmdir","","Remove an existing, empty directory"],[5,"readdir","","Retrieve a vector containing all entries within a provided directory"],[5,"walk_dir","","Returns an iterator that will recursively walk the directory structure\nrooted at `path`. The path given will not be iterated over, and this will\nperform iteration in some top-down order.  The contents of unreadable\nsubdirectories are ignored."],[5,"mkdir_recursive","","Recursively create a directory and all of its parent components if they\nare missing."],[5,"rmdir_recursive","","Removes a directory at this path, after removing all its contents. Use\ncarefully!"],[5,"change_file_times","","Changes the timestamps for a file's last modification and access time.\nThe file at the path specified will have its last access time set to\n`atime` and its modification time set to `mtime`. The times specified should\nbe in milliseconds."],[8,"PathExtensions","","Utility methods for paths."],[10,"stat","","Get information on the file, directory, etc at this path.",347],[10,"lstat","","Get information on the file, directory, etc at this path, not following\nsymlinks.",347],[10,"exists","","Boolean value indicator whether the underlying file exists on the local\nfilesystem. Returns false in exactly the cases where `fs::stat` fails.",347],[10,"is_file","","Whether the underlying implementation (be it a file path, or something\nelse) points at a \"regular file\" on the FS. Will return false for paths\nto non-existent locations or directories or other non-regular files\n(named pipes, etc). Follows links when making this determination.",347],[10,"is_dir","","Whether the underlying implementation (be it a file path, or something\nelse) is pointing at a directory in the underlying FS. Will return\nfalse for paths to non-existent locations or if the item is not a\ndirectory (eg files, named pipes, etc). Follows links when making this\ndetermination.",347],[11,"as_inner","","",348],[11,"open_mode","","Open a file at `path` in the mode specified by the `mode` and `access`\narguments",348],[11,"open","","Attempts to open a file in read-only mode. This function is equivalent to\n`File::open_mode(path, Open, Read)`, and will raise all of the same\nerrors that `File::open_mode` does.",348],[11,"create","","Attempts to create a file in write-only mode. This function is\nequivalent to `File::open_mode(path, Truncate, Write)`, and will\nraise all of the same errors that `File::open_mode` does.",348],[11,"path","","Returns the original path that was used to open this file.",348],[11,"fsync","","Synchronizes all modifications to this file to its permanent storage\ndevice. This will flush any internal buffers necessary to perform this\noperation.",348],[11,"datasync","","This function is similar to `fsync`, except that it may not synchronize\nfile metadata to the filesystem. This is intended for use cases that\nmust synchronize content, but don't need the metadata on disk. The goal\nof this method is to reduce disk operations.",348],[11,"truncate","","Either truncates or extends the underlying file, updating the size of\nthis file to become `size`. This is equivalent to unix's `truncate`\nfunction.",348],[11,"eof","","Returns true if the stream has reached the end of the file.",348],[11,"stat","","Queries information about the underlying file.",348],[11,"clone","","",349],[6,"Item","",""],[11,"next","","",349],[11,"read","","",348],[11,"write_all","","",348],[11,"tell","","",348],[11,"seek","","",348],[0,"net","std::old_io","Networking I/O"],[0,"addrinfo","std::old_io::net","Synchronous DNS Resolution"],[3,"Hint","std::old_io::net::addrinfo","This structure is used to provide hints when fetching addresses for a\nremote host to control how the lookup is performed."],[12,"family","","",350],[12,"socktype","","",350],[12,"protocol","","",350],[12,"flags","","",350],[3,"Info","",""],[12,"address","","",351],[12,"family","","",351],[12,"socktype","","",351],[12,"protocol","","",351],[12,"flags","","",351],[4,"SocketType","","Hints to the types of sockets that are desired when looking up hosts"],[13,"Stream","","",352],[13,"Datagram","","",352],[13,"Raw","","",352],[4,"Flag","","Flags which can be or'd into the `flags` field of a `Hint`. These are used\nto manipulate how a query is performed."],[13,"AddrConfig","","",353],[13,"All","","",353],[13,"CanonName","","",353],[13,"NumericHost","","",353],[13,"NumericServ","","",353],[13,"Passive","","",353],[13,"V4Mapped","","",353],[4,"Protocol","","A transport protocol associated with either a hint or a return value of\n`lookup`"],[13,"TCP","","",354],[13,"UDP","","",354],[5,"get_host_addresses","","Easy name resolution. Given a hostname, returns the list of IP addresses for\nthat hostname."],[5,"get_address_name","","Reverse name resolution. Given an address, returns the corresponding\nhostname."],[11,"fmt","","",352],[11,"fmt","","",353],[11,"fmt","","",354],[11,"fmt","","",350],[11,"fmt","","",351],[0,"tcp","std::old_io::net","TCP network connections"],[3,"TcpStream","std::old_io::net::tcp","A structure which represents a TCP stream between a local socket and a\nremote socket."],[3,"TcpListener","","A structure representing a socket server. This listener is used to create a\n`TcpAcceptor` which can be used to accept sockets on a local port."],[3,"TcpAcceptor","","The accepting half of a TCP socket server. This structure is created through\na `TcpListener`'s `listen` method, and this object can be used to accept new\n`TcpStream` instances."],[11,"connect","","Open a TCP connection to a remote host.",355],[11,"connect_timeout","","Creates a TCP connection to a remote socket address, timing out after\nthe specified duration.",355],[11,"peer_name","","Returns the socket address of the remote peer of this TCP connection.",355],[11,"socket_name","","Returns the socket address of the local half of this TCP connection.",355],[11,"set_nodelay","","Sets the nodelay flag on this connection to the boolean specified",355],[11,"set_keepalive","","Sets the keepalive timeout to the timeout specified.",355],[11,"close_read","","Closes the reading half of this connection.",355],[11,"close_write","","Closes the writing half of this connection.",355],[11,"set_timeout","","Sets a timeout, in milliseconds, for blocking operations on this stream.",355],[11,"set_read_timeout","","Sets the timeout for read operations on this stream.",355],[11,"set_write_timeout","","Sets the timeout for write operations on this stream.",355],[11,"clone","","Creates a new handle to this TCP stream, allowing for simultaneous reads\nand writes of this connection.",355],[11,"read","","",355],[11,"write_all","","",355],[11,"as_inner","","",355],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified address.\nThis listener is not ready for accepting connections, `listen` must be called\non it before that's possible.",356],[11,"socket_name","","Returns the local socket address of this listener.",356],[11,"listen","","",356],[11,"as_inner","","",356],[11,"set_timeout","","Prevents blocking on all future accepts after `ms` milliseconds have\nelapsed.",357],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",357],[11,"accept","","",357],[11,"clone","","Creates a new handle to this TCP acceptor, allowing for simultaneous\naccepts.",357],[11,"as_inner","","",357],[0,"udp","std::old_io::net","UDP (User Datagram Protocol) network connections."],[3,"UdpSocket","std::old_io::net::udp","A User Datagram Protocol socket."],[11,"bind","","Creates a UDP socket from the given address.",358],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",358],[11,"send_to","","Sends data on the socket to the given address. Returns nothing on\nsuccess.",358],[11,"socket_name","","Returns the socket address that this socket was created from.",358],[11,"join_multicast","","Joins a multicast IP address (becomes a member of it)",358],[11,"leave_multicast","","Leaves a multicast IP address (drops membership from it)",358],[11,"set_multicast_loop","","Set the multicast loop flag to the specified value",358],[11,"set_multicast_ttl","","Sets the multicast TTL",358],[11,"set_ttl","","Sets this socket's TTL",358],[11,"set_broadcast","","Sets the broadcast flag on or off",358],[11,"set_timeout","","Sets the read/write timeout for this socket.",358],[11,"set_read_timeout","","Sets the read timeout for this socket.",358],[11,"set_write_timeout","","Sets the write timeout for this socket.",358],[11,"clone","","Creates a new handle to this UDP socket, allowing for simultaneous\nreads and writes of the socket.",358],[11,"as_inner","","",358],[0,"ip","std::old_io::net","Internet Protocol (IP) addresses."],[3,"SocketAddr","std::old_io::net::ip",""],[12,"ip","","",359],[12,"port","","",359],[3,"ParseError","",""],[4,"IpAddr","",""],[13,"Ipv4Addr","","",360],[13,"Ipv6Addr","","",360],[6,"Port","",""],[8,"ToSocketAddr","","A trait for objects which can be converted or resolved to one or more `SocketAddr` values."],[11,"to_socket_addr","","Converts this object to single socket address value.",361],[11,"to_socket_addr_all","","Converts this object to all available socket address values.",361],[11,"fmt","","",360],[11,"hash","","",360],[11,"clone","","",360],[11,"eq","","",360],[11,"ne","","",360],[11,"fmt","","",360],[11,"fmt","","",359],[11,"hash","","",359],[11,"clone","","",359],[11,"eq","","",359],[11,"ne","","",359],[11,"fmt","","",359],[6,"Err","",""],[11,"from_str","","",360],[6,"Err","",""],[11,"from_str","","",359],[11,"eq","","",362],[11,"ne","","",362],[11,"clone","","",362],[11,"fmt","","",362],[11,"to_socket_addr","","",359],[0,"pipe","std::old_io::net","Named pipes"],[3,"UnixStream","std::old_io::net::pipe","A stream which communicates over a named pipe."],[3,"UnixListener","","A value that can listen for incoming named pipe connection requests."],[3,"UnixAcceptor","","A value that can accept named pipe connections, returned from `listen()`."],[11,"connect","","Connect to a pipe named by `path`. This will attempt to open a\nconnection to the underlying socket.",363],[11,"connect_timeout","","Connect to a pipe named by `path`, timing out if the specified number of\nmilliseconds.",363],[11,"close_read","","Closes the reading half of this connection.",363],[11,"close_write","","Closes the writing half of this connection.",363],[11,"set_timeout","","Sets the read/write timeout for this socket.",363],[11,"set_read_timeout","","Sets the read timeout for this socket.",363],[11,"set_write_timeout","","Sets the write timeout for this socket.",363],[11,"clone","","",363],[11,"read","","",363],[11,"write_all","","",363],[11,"as_inner","","",363],[11,"bind","","Creates a new listener, ready to receive incoming connections on the\nspecified socket. The server will be named by `path`.",364],[11,"listen","","",364],[11,"as_inner","","",364],[11,"set_timeout","","Sets a timeout for this acceptor, after which accept() will no longer\nblock indefinitely.",365],[11,"close_accept","","Closes the accepting capabilities of this acceptor.",365],[11,"accept","","",365],[11,"clone","","Creates a new handle to this unix acceptor, allowing for simultaneous\naccepts.",365],[11,"as_inner","","",365],[0,"pipe","std::old_io","Synchronous, in-memory pipes."],[3,"PipeStream","std::old_io::pipe","A synchronous, in-memory pipe."],[3,"PipePair","",""],[12,"reader","","",366],[12,"writer","","",366],[11,"open","","Consumes a file descriptor to return a pipe stream that will have\nsynchronous, but non-blocking reads/writes. This is useful if the file\ndescriptor is acquired via means other than the standard methods.",367],[11,"pair","","Creates a pair of in-memory OS pipes for a unidirectional communication\nstream.",367],[11,"as_inner","","",367],[11,"clone","","",367],[11,"read","","",367],[11,"write_all","","",367],[0,"process","std::old_io","Bindings for executing child processes"],[3,"Process","std::old_io::process","Representation of a running or exited child process."],[12,"stdin","","Handle to the child's stdin, if the `stdin` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",368],[12,"stdout","","Handle to the child's stdout, if the `stdout` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",368],[12,"stderr","","Handle to the child's stderr, if the `stderr` field of this process's\n`ProcessConfig` was `CreatePipe`. By default, this handle is `Some`.",368],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:"],[3,"ProcessOutput","","The output of a finished process."],[12,"status","","The status (exit code) of the process.",369],[12,"output","","The data that the process wrote to stdout.",369],[12,"error","","The data that the process wrote to stderr.",369],[4,"StdioContainer","","Describes what to do with a standard io stream for a child process."],[13,"Ignored","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",370],[13,"InheritFd","","The specified file descriptor is inherited for the stream which it is\nspecified for. Ownership of the file descriptor is *not* taken, so the\ncaller must clean it up.",370],[13,"CreatePipe","","Creates a pipe for the specified file descriptor which will be created\nwhen the process is spawned.",370],[4,"ProcessExit","","Describes the result of a process after it has terminated.\nNote that Windows have no signals, so the result is usually ExitStatus."],[13,"ExitStatus","","Normal termination with an exit status.",371],[13,"ExitSignal","","Termination by signal, with the signal number.",371],[6,"EnvMap","","A HashMap representation of environment variables."],[17,"PleaseExitSignal","","Signal a process to exit, without forcibly killing it. Corresponds to\nSIGTERM on unix platforms."],[17,"MustDieSignal","","Signal a process to exit immediately, forcibly killing it. Corresponds to\nSIGKILL on unix platforms."],[11,"clone","","",372],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",372],[11,"arg","","Add an argument to pass to the program.",372],[11,"args","","Add multiple arguments to pass to the program.",372],[11,"env","","Inserts or updates an environment variable mapping.",372],[11,"env_remove","","Removes an environment variable mapping.",372],[11,"env_set_all","","Sets the entire environment map for the child process.",372],[11,"cwd","","Set the working directory for the child process.",372],[11,"stdin","","Configuration for the child process's stdin handle (file descriptor 0).\nDefaults to `CreatePipe(true, false)` so the input can be written to.",372],[11,"stdout","","Configuration for the child process's stdout handle (file descriptor 1).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",372],[11,"stderr","","Configuration for the child process's stderr handle (file descriptor 2).\nDefaults to `CreatePipe(false, true)` so the output can be collected.",372],[11,"uid","","Sets the child process's user id. This translates to a `setuid` call in\nthe child process. Setting this value on windows will cause the spawn to\nfail. Failure in the `setuid` call on unix will also cause the spawn to\nfail.",372],[11,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",372],[11,"detached","","Sets the child process to be spawned in a detached state. On unix, this\nmeans that the child is the leader of a new process group.",372],[11,"spawn","","Executes the command as a child process, which is returned.",372],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",372],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",372],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",372],[11,"program","","",372],[11,"args","","",372],[11,"env","","",372],[11,"cwd","","",372],[11,"uid","","",372],[11,"gid","","",372],[11,"detach","","",372],[11,"clone","","",369],[11,"eq","","",369],[11,"ne","","",369],[11,"clone","","",370],[11,"fmt","","",371],[11,"clone","","",371],[11,"eq","","",371],[11,"ne","","",371],[11,"fmt","","Format a ProcessExit enum, to nicely present the information.",371],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",371],[11,"matches_exit_status","","Checks whether this ProcessExit matches the given exit status.\nTermination by signal will never match an exit code.",371],[11,"kill","","Sends `signal` to another process in the system identified by `id`.",368],[11,"id","","Returns the process id of this child process",368],[11,"signal","","Sends the specified signal to the child process, returning whether the\nsignal could be delivered or not.",368],[11,"signal_exit","","Sends a signal to this child requesting that it exits. This is\nequivalent to sending a SIGTERM on unix platforms.",368],[11,"signal_kill","","Sends a signal to this child forcing it to exit. This is equivalent to\nsending a SIGKILL on unix platforms.",368],[11,"wait","","Wait for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",368],[11,"set_timeout","","Sets a timeout, in milliseconds, for future calls to wait().",368],[11,"wait_with_output","","Simultaneously wait for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning a `ProcessOutput`\ninstance.",368],[11,"forget","","Forgets this process, allowing it to outlive the parent",368],[11,"drop","","",368],[0,"stdio","std::old_io","Non-blocking access to stdin, stdout, and stderr."],[3,"StdinReader","std::old_io::stdio","A synchronized wrapper around a buffered reader from stdin"],[3,"StdinReaderGuard","","A guard for exclusive access to `StdinReader`'s internal `BufferedReader`."],[3,"StdReader","","Representation of a reader of a standard input stream"],[3,"StdWriter","","Representation of a writer to a standard output stream"],[5,"stdin","","Creates a new handle to the stdin of the current process."],[5,"stdin_raw","","Creates a new non-blocking handle to the stdin of the current process."],[5,"stdout","","Creates a line-buffered handle to the stdout of the current process."],[5,"stdout_raw","","Creates an unbuffered handle to the stdout of the current process"],[5,"stderr","","Creates a line-buffered handle to the stderr of the current process."],[5,"stderr_raw","","Creates an unbuffered handle to the stderr of the current process"],[5,"set_stdout","","Resets the task-local stdout handle to the specified writer"],[5,"set_stderr","","Resets the task-local stderr handle to the specified writer"],[5,"flush","","Flushes the local task's stdout handle."],[5,"print","","Prints a string to the stdout of the current process. No newline is emitted\nafter the string is printed."],[5,"println","","Prints a string to the stdout of the current process. A literal\n`\\n` character is printed to the console after the string."],[5,"print_args","","Similar to `print`, but takes a `fmt::Arguments` structure to be compatible\nwith the `format_args!` macro."],[5,"println_args","","Similar to `println`, but takes a `fmt::Arguments` structure to be\ncompatible with the `format_args!` macro."],[11,"clone","","",373],[6,"Target","",""],[11,"deref","","",374],[11,"deref_mut","","",374],[11,"lock","","Locks the `StdinReader`, granting the calling thread exclusive access\nto the underlying `BufferedReader`.",373],[11,"read_line","","Like `Buffer::read_line`.",373],[11,"read_until","","Like `Buffer::read_until`.",373],[11,"read_char","","Like `Buffer::read_char`.",373],[11,"read","","",373],[11,"read_at_least","","",373],[11,"push_at_least","","",373],[11,"read_to_end","","",373],[11,"read_le_uint_n","","",373],[11,"read_be_uint_n","","",373],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",375],[11,"read","","",375],[11,"winsize","","Gets the size of this output window, if possible. This is typically used\nwhen the writer is attached to something like a terminal, this is used\nto fetch the dimensions of the terminal.",376],[11,"set_raw","","Controls whether this output stream is a \"raw stream\" or simply a normal\nstream.",376],[11,"isatty","","Returns whether this stream is attached to a TTY instance or not.",376],[11,"write_all","","",376],[0,"timer","std::old_io","Synchronous Timers"],[3,"Timer","std::old_io::timer","A synchronous timer object"],[5,"sleep","","Sleep the current task for the specified duration."],[11,"new","","Creates a new timer which can be used to put the current task to sleep\nfor a number of milliseconds, or to possibly create channels which will\nget notified after an amount of time has passed.",377],[11,"sleep","","Blocks the current task for the specified duration.",377],[11,"oneshot","","Creates a oneshot receiver which will have a notification sent when\nthe specified duration has elapsed.",377],[11,"periodic","","Creates a receiver which will have a continuous stream of notifications\nbeing sent each time the specified duration has elapsed.",377],[0,"util","std::old_io","Utility implementations of Reader and Writer"],[3,"LimitReader","std::old_io::util","Wraps a `Reader`, limiting the number of bytes that can be read from it."],[3,"NullWriter","","A `Writer` which ignores bytes written to it, like /dev/null."],[3,"ZeroReader","","A `Reader` which returns an infinite stream of 0 bytes, like /dev/zero."],[3,"NullReader","","A `Reader` which is always at EOF, like /dev/null."],[3,"MultiWriter","","A `Writer` which multiplexes writes to a set of `Writer`s."],[3,"ChainedReader","","A `Reader` which chains input from multiple `Reader`s, reading each to\ncompletion before moving onto the next."],[3,"TeeReader","","A `Reader` which forwards input from another `Reader`, passing it along to\na `Writer` as well. Similar to the `tee(1)` command."],[3,"IterReader","","An adaptor converting an `Iterator<u8>` to a `Reader`."],[5,"copy","","Copies all data from a `Reader` to a `Writer`."],[11,"fmt","","",378],[11,"new","","Creates a new `LimitReader`",378],[11,"into_inner","","Consumes the `LimitReader`, returning the underlying `Reader`.",378],[11,"limit","","Returns the number of bytes that can be read before the `LimitReader`\nwill return EOF.",378],[11,"read","","",378],[11,"fill_buf","","",378],[11,"consume","","",378],[11,"fmt","","",379],[11,"write_all","","",379],[11,"fmt","","",380],[11,"read","","",380],[11,"fill_buf","","",380],[11,"consume","","",380],[11,"fmt","","",381],[11,"read","","",381],[11,"fill_buf","","",381],[11,"consume","","",381],[11,"fmt","","",382],[11,"new","","Creates a new `MultiWriter`",382],[11,"write_all","","",382],[11,"flush","","",382],[11,"fmt","","",383],[11,"clone","","",383],[11,"new","","Creates a new `ChainedReader`",383],[11,"read","","",383],[11,"fmt","","",384],[11,"new","","Creates a new `TeeReader`",384],[11,"into_inner","","Consumes the `TeeReader`, returning the underlying `Reader` and\n`Writer`.",384],[11,"read","","",384],[11,"fmt","","",385],[11,"clone","","",385],[11,"new","","Creates a new `IterReader` which will read from the specified\n`Iterator`.",385],[11,"read","","",385],[0,"test","std::old_io","Various utility functions useful for writing I/O tests"],[5,"next_test_port","std::old_io::test","Get a port number, starting at 9600, for use in tests"],[5,"next_test_unix","","Get a temporary path which could be the location of a unix socket"],[5,"next_test_ip4","","Get a unique IPv4 localhost:port pair starting at 9600"],[5,"next_test_ip6","","Get a unique IPv6 localhost:port pair starting at 9600"],[5,"raise_fd_limit","","Raises the file descriptor limit when running tests if necessary"],[6,"IoResult","std::old_io","A convenient typedef of the return value of any I/O action."],[17,"USER_READ","",""],[17,"USER_WRITE","",""],[17,"USER_EXECUTE","",""],[17,"GROUP_READ","",""],[17,"GROUP_WRITE","",""],[17,"GROUP_EXECUTE","",""],[17,"OTHER_READ","",""],[17,"OTHER_WRITE","",""],[17,"OTHER_EXECUTE","",""],[17,"USER_RWX","",""],[17,"GROUP_RWX","",""],[17,"OTHER_RWX","",""],[17,"USER_FILE","","/// Permissions for user owned files, equivalent to 0644 on unix-like\n/// systems."],[17,"USER_DIR","","/// Permissions for user owned directories, equivalent to 0755 on\n/// unix-like systems."],[17,"USER_EXEC","","/// Permissions for user owned executables, equivalent to 0755\n/// on unix-like systems."],[17,"ALL_PERMISSIONS","","/// All possible permissions enabled."],[8,"Reader","","A trait for objects which are byte-oriented streams. Readers are defined by\none method, `read`. This function will block until data is available,\nfilling in the provided buffer with any data read."],[10,"read","","Read bytes, up to the length of `buf` and place them in `buf`.\nReturns the number of bytes read. The number of bytes read may\nbe less than the number requested, even 0. Returns `Err` on EOF.",386],[11,"read_at_least","","Reads at least `min` bytes and places them in `buf`.\nReturns the number of bytes read.",386],[11,"read_byte","","Reads a single byte. Returns `Err` on EOF.",386],[11,"push","","Reads up to `len` bytes and appends them to a vector.\nReturns the number of bytes read. The number of bytes read may be\nless than the number requested, even 0. Returns Err on EOF.",386],[11,"push_at_least","","Reads at least `min` bytes, but no more than `len`, and appends them to\na vector.\nReturns the number of bytes read.",386],[11,"read_exact","","Reads exactly `len` bytes and gives you back a new vector of length\n`len`",386],[11,"read_to_end","","Reads all remaining bytes from the stream.",386],[11,"read_to_string","","Reads all of the remaining bytes of this stream, interpreting them as a\nUTF-8 encoded stream. The corresponding string is returned.",386],[11,"read_le_uint_n","","Reads `n` little-endian unsigned integer bytes.",386],[11,"read_le_int_n","","Reads `n` little-endian signed integer bytes.",386],[11,"read_be_uint_n","","Reads `n` big-endian unsigned integer bytes.",386],[11,"read_be_int_n","","Reads `n` big-endian signed integer bytes.",386],[11,"read_le_uint","","Reads a little-endian unsigned integer.",386],[11,"read_le_int","","Reads a little-endian integer.",386],[11,"read_be_uint","","Reads a big-endian unsigned integer.",386],[11,"read_be_int","","Reads a big-endian integer.",386],[11,"read_be_u64","","Reads a big-endian `u64`.",386],[11,"read_be_u32","","Reads a big-endian `u32`.",386],[11,"read_be_u16","","Reads a big-endian `u16`.",386],[11,"read_be_i64","","Reads a big-endian `i64`.",386],[11,"read_be_i32","","Reads a big-endian `i32`.",386],[11,"read_be_i16","","Reads a big-endian `i16`.",386],[11,"read_be_f64","","Reads a big-endian `f64`.",386],[11,"read_be_f32","","Reads a big-endian `f32`.",386],[11,"read_le_u64","","Reads a little-endian `u64`.",386],[11,"read_le_u32","","Reads a little-endian `u32`.",386],[11,"read_le_u16","","Reads a little-endian `u16`.",386],[11,"read_le_i64","","Reads a little-endian `i64`.",386],[11,"read_le_i32","","Reads a little-endian `i32`.",386],[11,"read_le_i16","","Reads a little-endian `i16`.",386],[11,"read_le_f64","","Reads a little-endian `f64`.",386],[11,"read_le_f32","","Reads a little-endian `f32`.",386],[11,"read_u8","","Read a u8.",386],[11,"read_i8","","Read an i8.",386],[8,"ByRefReader","","A reader which can be converted to a RefReader."],[10,"by_ref","","Creates a wrapper around a mutable reference to the reader.",387],[8,"BytesReader","","A reader which can be converted to bytes."],[10,"bytes","","Create an iterator that reads a single byte on\neach iteration, until EOF.",388],[8,"Writer","","A trait for objects which are byte-oriented streams. Writers are defined by\none method, `write`. This function will block until the provided buffer of\nbytes has been entirely written, and it will return any failures which occur."],[10,"write_all","","Write the entirety of a given buffer",389],[11,"write","","Deprecated, this method was renamed to `write_all`",389],[11,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",389],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",389],[11,"write_str","","Write a rust string into this sink.",389],[11,"write_line","","Writes a string into this sink, and then writes a literal newline (`\\n`)\nbyte afterwards. Note that the writing of the newline is *not* atomic in\nthe sense that the call to `write` is invoked twice (once with the\nstring and once with a newline character).",389],[11,"write_char","","Write a single char, encoded as UTF-8.",389],[11,"write_int","","Write the result of passing n through `int::to_str_bytes`.",389],[11,"write_uint","","Write the result of passing n through `uint::to_str_bytes`.",389],[11,"write_le_uint","","Write a little-endian uint (number of bytes depends on system).",389],[11,"write_le_int","","Write a little-endian int (number of bytes depends on system).",389],[11,"write_be_uint","","Write a big-endian uint (number of bytes depends on system).",389],[11,"write_be_int","","Write a big-endian int (number of bytes depends on system).",389],[11,"write_be_u64","","Write a big-endian u64 (8 bytes).",389],[11,"write_be_u32","","Write a big-endian u32 (4 bytes).",389],[11,"write_be_u16","","Write a big-endian u16 (2 bytes).",389],[11,"write_be_i64","","Write a big-endian i64 (8 bytes).",389],[11,"write_be_i32","","Write a big-endian i32 (4 bytes).",389],[11,"write_be_i16","","Write a big-endian i16 (2 bytes).",389],[11,"write_be_f64","","Write a big-endian IEEE754 double-precision floating-point (8 bytes).",389],[11,"write_be_f32","","Write a big-endian IEEE754 single-precision floating-point (4 bytes).",389],[11,"write_le_u64","","Write a little-endian u64 (8 bytes).",389],[11,"write_le_u32","","Write a little-endian u32 (4 bytes).",389],[11,"write_le_u16","","Write a little-endian u16 (2 bytes).",389],[11,"write_le_i64","","Write a little-endian i64 (8 bytes).",389],[11,"write_le_i32","","Write a little-endian i32 (4 bytes).",389],[11,"write_le_i16","","Write a little-endian i16 (2 bytes).",389],[11,"write_le_f64","","Write a little-endian IEEE754 double-precision floating-point\n(8 bytes).",389],[11,"write_le_f32","","Write a little-endian IEEE754 single-precision floating-point\n(4 bytes).",389],[11,"write_u8","","Write a u8 (1 byte).",389],[11,"write_i8","","Write an i8 (1 byte).",389],[8,"ByRefWriter","","A writer which can be converted to a RefWriter."],[10,"by_ref","","Creates a wrapper around a mutable reference to the writer.",390],[8,"Stream","","A Stream is a readable and a writable object. Data written is typically\nreceived by the object which reads receive data from."],[8,"Buffer","","A Buffer is a type of reader which has some form of internal buffering to\nallow certain kinds of reading operations to be more optimized than others.\nThis type extends the `Reader` trait with a few methods that are not\npossible to reasonably implement with purely a read interface."],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.\nNote that none of the contents will be \"read\" in the sense that later\ncalling `read` may return the same contents.",391],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",391],[11,"read_line","","Reads the next line of input, interpreted as a sequence of UTF-8\nencoded Unicode codepoints. If a newline is encountered, then the\nnewline is contained in the returned string.",391],[11,"read_until","","Reads a sequence of bytes leading up to a specified delimiter. Once the\nspecified byte is encountered, reading ceases and the bytes up to and\nincluding the delimiter are returned.",391],[11,"read_char","","Reads the next utf8-encoded character from the underlying stream.",391],[8,"BufferPrelude","","Extension methods for the Buffer trait which are included in the prelude."],[10,"chars","","Create an iterator that reads a utf8-encoded character on each iteration\nuntil EOF.",392],[10,"lines","","Create an iterator that reads a line on each iteration until EOF.",392],[8,"Seek","","An object implementing `Seek` internally has some form of cursor which can\nbe moved within a stream of bytes. The stream typically has a fixed size,\nallowing seeking relative to either end."],[10,"tell","","Return position of file cursor in the stream",393],[10,"seek","","Seek to an offset in a stream",393],[8,"Listener","","A listener is a value that can consume itself to start listening for\nconnections."],[10,"listen","","Spin up the listener and start queuing incoming connections",394],[8,"Acceptor","","An acceptor is a value that presents incoming connections"],[10,"accept","","Wait for and accept an incoming connection",395],[11,"incoming","","Create an iterator over incoming connection attempts.",395],[11,"fmt","","",327],[11,"clone","","",327],[11,"eq","","",327],[11,"ne","","",327],[11,"from_errno","","Convert an `errno` value into an `IoError`.",327],[11,"last_error","","Retrieve the last error to occur as a (detailed) IoError.",327],[11,"fmt","","",327],[11,"description","","",327],[11,"fmt","","",330],[11,"clone","","",330],[11,"eq","","",330],[11,"ne","","",330],[11,"read","std::boxed","",183],[11,"read","std::old_io","",396],[11,"fill_buf","","",396],[11,"consume","","",396],[11,"write_all","std::boxed","",183],[11,"flush","","",183],[11,"write_all","std::old_io","",397],[11,"flush","","",397],[6,"Item","",""],[11,"next","","",398],[6,"Item","",""],[11,"next","","",399],[6,"Item","",""],[11,"next","","",400],[11,"fmt","","",332],[11,"eq","","",332],[11,"ne","","",332],[11,"clone","","",332],[11,"fmt","","",333],[11,"eq","","",333],[11,"ne","","",333],[11,"clone","","",333],[11,"clone","","",334],[11,"hash","","",334],[11,"fmt","","",334],[11,"eq","","",334],[11,"ne","","",334],[11,"hash","","",328],[11,"hash","","",329],[11,"hash","","",401],[11,"cmp","","",401],[11,"partial_cmp","","",401],[11,"lt","","",401],[11,"le","","",401],[11,"gt","","",401],[11,"ge","","",401],[11,"clone","","",401],[11,"eq","","",401],[11,"ne","","",401],[11,"fmt","","",401],[11,"empty","","Returns an empty set of flags.",401],[11,"all","","Returns the set containing all flags.",401],[11,"bits","","Returns the raw value of the flags currently stored.",401],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",401],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",401],[11,"is_empty","","Returns `true` if no flags are currently stored.",401],[11,"is_all","","Returns `true` if all flags are currently set.",401],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",401],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",401],[11,"insert","","Inserts the specified flags in-place.",401],[11,"remove","","Removes the specified flags in-place.",401],[11,"toggle","","Toggles the specified flags in-place.",401],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",401],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",401],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",401],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",401],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",401],[11,"default","","",401],[11,"fmt","","",401],[0,"os","std","Higher-level interfaces to libc::* functions and operating system services."],[3,"Pipe","std::os","A low-level OS in-memory pipe."],[12,"reader","","A file descriptor representing the reading end of the pipe. Data written\non the `out` file descriptor can be read from this file descriptor.",402],[12,"writer","","A file descriptor representing the write end of the pipe. Data written\nto this file descriptor can be read from the `input` file descriptor.",402],[3,"MemoryMap","","A memory mapped file or chunk of memory. This is a very system-specific\ninterface to the OS's memory mapping facilities (`mmap` on POSIX,\n`VirtualAlloc`/`CreateFileMapping` on Windows). It makes no attempt at\nabstracting platform differences, besides in error values returned. Consider\nyourself warned."],[4,"MemoryMapKind","","Type of memory map"],[13,"MapFile","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory.  Corresponds to `VirtualAlloc` on Windows.",403],[13,"MapVirtual","","Virtual memory map. Usually used to change the permissions of a given\nchunk of memory, or for allocation. Corresponds to `VirtualAlloc` on\nWindows.",403],[4,"MapOption","","Options the memory map is created with"],[13,"MapReadable","","The memory should be readable",404],[13,"MapWritable","","The memory should be writable",404],[13,"MapExecutable","","The memory should be executable",404],[13,"MapAddr","","Create a map for a specific address range. Corresponds to `MAP_FIXED` on\nPOSIX.",404],[13,"MapFd","","Create a memory mapping for a file with a given fd.",404],[13,"MapOffset","","When using `MapFd`, the start of the map is `uint` bytes from the start\nof the file.",404],[13,"MapNonStandardFlags","","On POSIX, this can be used to specify the default flags passed to\n`mmap`. By default it uses `MAP_PRIVATE` and, if not using `MapFd`,\n`MAP_ANON`. This will override both of those. This is platform-specific\n(the exact values used) and ignored on Windows.",404],[4,"MapError","","Possible errors when creating a map."],[13,"ErrFdNotAvail","","# The following are POSIX-specific",405],[13,"ErrInvalidFd","","fd was not valid",405],[13,"ErrUnaligned","","Either the address given by `MapAddr` or offset given by `MapOffset` was\nnot a multiple of `MemoryMap::granularity` (unaligned to page size).",405],[13,"ErrNoMapSupport","","With `MapFd`, the fd does not support mapping.",405],[13,"ErrNoMem","","If using `MapAddr`, the address + `min_len` was outside of the process's\naddress space. If using `MapFd`, the target of the fd didn't have enough\nresources to fulfill the request.",405],[13,"ErrZeroLength","","A zero-length map was requested. This is invalid according to\n[POSIX](http://pubs.opengroup.org/onlinepubs/9699919799/functions/mmap.html).\nNot all platforms obey this, but this wrapper does.",405],[13,"ErrUnknown","","Unrecognized error. The inner value is the unrecognized errno.",405],[13,"ErrUnsupProt","","# The following are Windows-specific",405],[13,"ErrUnsupOffset","","When using `MapFd`, `MapOffset` was given (Windows does not support this\nat all)",405],[13,"ErrAlreadyExists","","When using `MapFd`, there was already a mapping to the file.",405],[13,"ErrVirtualAlloc","","Unrecognized error from `VirtualAlloc`. The inner value is the return\nvalue of GetLastError.",405],[13,"ErrCreateFileMappingW","","Unrecognized error from `CreateFileMapping`. The inner value is the\nreturn value of `GetLastError`.",405],[13,"ErrMapViewOfFile","","Unrecognized error from `MapViewOfFile`. The inner value is the return\nvalue of `GetLastError`.",405],[5,"num_cpus","","Get the number of cores available"],[5,"getcwd","","Returns the current working directory as a `Path`."],[5,"env","","Returns a vector of (variable, value) pairs, for all the environment\nvariables of the current process."],[5,"env_as_bytes","","Returns a vector of (variable, value) byte-vector pairs for all the\nenvironment variables of the current process."],[5,"getenv","","Fetches the environment variable `n` from the current process, returning\nNone if the variable isn't set."],[5,"getenv_as_bytes","","Fetches the environment variable `n` byte vector from the current process,\nreturning None if the variable isn't set."],[5,"setenv","","Sets the environment variable `n` to the value `v` for the currently running\nprocess."],[5,"unsetenv","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"pipe","","Creates a new low-level OS in-memory pipe."],[5,"dll_filename","","Returns the proper dll filename for the given basename of a file\nas a String."],[5,"self_exe_name","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"self_exe_path","","Optionally returns the filesystem path to the current executable which is\nrunning."],[5,"homedir","","Optionally returns the path to the current user's home directory if known."],[5,"tmpdir","","Returns the path to a temporary directory."],[5,"make_absolute","","Convert a relative path to an absolute path"],[5,"change_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"errno","","Returns the platform-specific value of errno"],[5,"error_string","","Return the string corresponding to an `errno()` value of `errnum`."],[5,"last_os_error","","Get a string representing the platform-dependent last error"],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"args_as_bytes","","Returns the arguments which this program was started with (normally passed\nvia the command line) as byte vectors."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"unix","","Experimental extensions to `std` for Unix platforms."],[0,"prelude","std::os::unix","A prelude for conveniently writing platform-specific code."],[6,"Fd","std::os::unix::prelude","Raw file descriptors."],[8,"AsRawFd","","Extract raw file descriptor"],[10,"as_raw_fd","","Extract the raw file descriptor, without taking any ownership.",406],[6,"Fd","std::os::unix","Raw file descriptors."],[8,"AsRawFd","","Extract raw file descriptor"],[10,"as_raw_fd","","Extract the raw file descriptor, without taking any ownership.",406],[8,"OsStringExt","",""],[10,"from_vec","","Create an `OsString` from a byte vector.",407],[10,"into_vec","","Yield the underlying byte vector of this `OsString`.",407],[8,"OsStrExt","",""],[10,"as_byte_slice","","",408],[11,"as_raw_fd","std::old_io::fs","",348],[11,"as_raw_fd","std::old_io::pipe","",367],[11,"as_raw_fd","std::old_io::net::pipe","",363],[11,"as_raw_fd","","",364],[11,"as_raw_fd","","",365],[11,"as_raw_fd","std::old_io::net::tcp","",355],[11,"as_raw_fd","","",356],[11,"as_raw_fd","","",357],[11,"as_raw_fd","std::old_io::net::udp","",358],[11,"from_vec","std::ffi","",312],[11,"into_vec","","",312],[11,"as_byte_slice","","",313],[0,"consts","std::os",""],[17,"ARCH","std::os::consts",""],[17,"FAMILY","",""],[17,"SYSNAME","","A string describing the specific operating system in use: in this\ncase, `macos`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.dylib`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `dylib`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[17,"TMPBUF_SZ","std::os",""],[11,"fmt","","",405],[11,"fmt","","",405],[11,"description","","",405],[11,"new","","Create a new mapping with the given `options`, at least `min_len` bytes\nlong. `min_len` must be greater than zero; see the note on\n`ErrZeroLength`.",409],[11,"granularity","","Granularity that the offset or address must be for `MapOffset` and\n`MapAddr` respectively.",409],[11,"drop","","Unmap the mapping. Panics the task if `munmap` panics.",409],[11,"data","","Returns the pointer to the memory created or modified by this map.",409],[11,"len","","Returns the number of bytes this map applies to.",409],[11,"kind","","Returns the type of mapping this represents.",409],[0,"env","std","Inspection and manipulation of the process's environment."],[3,"Vars","std::env","An iterator over a snapshot of the environment variables of this process."],[3,"SplitPaths","","An iterator over `Path` instances for parsing an environment variable\naccording to platform-specific conventions."],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined."],[3,"Args","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument."],[4,"VarError","","Possible errors from the `env::var` method."],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess's environment.",410],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",410],[5,"current_dir","","Returns the current working directory as a `Path`."],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not."],[5,"vars","","Returns an iterator of (variable, value) pairs, for all the environment\nvariables of the current process."],[5,"var","","Fetches the environment variable `key` from the current process, returning\nNone if the variable isn't set."],[5,"var_string","","Fetches the environment variable `key` from the current process."],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess."],[5,"remove_var","","Remove a variable from the environment entirely."],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable."],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable."],[5,"home_dir","","Optionally returns the path to the current user's home directory if known."],[5,"temp_dir","","Returns the path to a temporary directory."],[5,"current_exe","","Optionally returns the filesystem path to the current executable which is\nrunning but with the executable name."],[5,"set_exit_status","","Sets the process exit code"],[5,"get_exit_status","","Fetches the process's current exit code. This defaults to 0 and can change\nby calling `set_exit_status`."],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line)."],[5,"page_size","","Returns the page size of the current architecture in bytes."],[0,"consts","","Constants associated with the current target"],[17,"ARCH","std::env::consts",""],[17,"FAMILY","",""],[17,"OS","","A string describing the specific operating system in use: in this\ncase, `macos`."],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`."],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.dylib`."],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `dylib`."],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string."],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string."],[6,"Item","std::env",""],[11,"next","","",411],[11,"size_hint","","",411],[11,"clone","","",410],[11,"eq","","",410],[11,"ne","","",410],[11,"fmt","","",410],[11,"fmt","","",410],[11,"description","","",410],[6,"Item","",""],[11,"next","","",412],[11,"size_hint","","",412],[11,"fmt","","",413],[11,"fmt","","",413],[11,"description","","",413],[6,"Item","",""],[11,"next","","",414],[11,"size_hint","","",414],[0,"path","std","Cross-platform path support"],[3,"Display","std::path","Helper struct for printing paths with format!()"],[0,"posix","","POSIX file path handling"],[3,"Path","std::path::posix","Represents a POSIX file path"],[3,"ParsePathError","","Valuelue indicating that a path could not be parsed from a string."],[5,"is_sep_byte","","Returns whether the given byte is a path separator"],[5,"is_sep","","Returns whether the given char is a path separator"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[6,"StrComponents","","Iterator that yields successive components of a Path as Option<&str>"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[11,"clone","","",415],[11,"fmt","","",415],[11,"eq","","",415],[11,"partial_cmp","","",415],[11,"cmp","","",415],[6,"Err","",""],[11,"from_str","","",415],[11,"eq","","",416],[11,"ne","","",416],[11,"clone","","",416],[11,"fmt","","",416],[11,"hash","","",415],[11,"container_as_bytes","","",415],[11,"new_unchecked","","",415],[11,"set_filename_unchecked","","",415],[11,"push_unchecked","","",415],[11,"as_vec","","",415],[11,"into_vec","","",415],[11,"dirname","","",415],[11,"filename","","",415],[11,"pop","","",415],[11,"root_path","","",415],[11,"is_absolute","","",415],[11,"is_ancestor_of","","",415],[11,"path_relative_from","","",415],[11,"ends_with_path","","",415],[11,"new","","Returns a new Path from a byte vector or string",415],[11,"new_opt","","Returns a new Path from a byte vector or string, if possible",415],[11,"components","","Returns an iterator that yields each component of the path in turn.\nDoes not distinguish between absolute and relative paths, e.g.\n/a/b/c and a/b/c yield the same set of components.\nA path of \"/\" yields no components. A path of \".\" yields one component.",415],[11,"str_components","","Returns an iterator that yields each component of the path as Option<&str>.\nSee components() for details.",415],[0,"windows","std::path","Windows file path handling"],[3,"Path","std::path::windows","Represents a Windows path"],[3,"ParsePathError","","Value indicating that a path could not be parsed from a string."],[4,"PathPrefix","","Prefix types for Path"],[13,"VerbatimPrefix","","Prefix `\\\\?\\`, uint is the length of the following component",417],[13,"VerbatimUNCPrefix","","Prefix `\\\\?\\UNC\\`, uints are the lengths of the UNC components",417],[13,"VerbatimDiskPrefix","","Prefix `\\\\?\\C:\\` (for any alphabetic character)",417],[13,"DeviceNSPrefix","","Prefix `\\\\.\\`, uint is the length of the following component",417],[13,"UNCPrefix","","UNC prefix `\\\\server\\share`, uints are the lengths of the server/share",417],[13,"DiskPrefix","","Prefix `C:` for any alphabetic character",417],[5,"is_vol_relative","","Returns whether the path is considered \"volume-relative\", which means a path\nthat looks like \"\\foo\". Paths of this form are relative to the current volume,\nbut absolute within that volume."],[5,"is_cwd_relative","","Returns whether the path is considered \"cwd-relative\", which means a path\nwith a volume prefix that is not absolute. This look like \"C:foo.txt\". Paths\nof this form are relative to the cwd on the given volume."],[5,"prefix","","Returns the PathPrefix for this Path"],[5,"is_verbatim","","Returns whether the Path's prefix is a verbatim prefix, i.e. `\\\\?\\`"],[5,"make_non_verbatim","","Returns the non-verbatim equivalent of the input path, if possible.\nIf the input path is a device namespace path, None is returned.\nIf the input path is not verbatim, it is returned as-is.\nIf the input path is verbatim, but the same path can be expressed as\nnon-verbatim, the non-verbatim version is returned.\nOtherwise, None is returned."],[5,"is_sep","","Returns whether the given char is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_verbatim","","Returns whether the given char is a path separator.\nOnly allows the primary separator '\\'; use is_sep to allow '/'."],[5,"is_sep_byte","","Returns whether the given byte is a path separator.\nAllows both the primary separator '\\' and the alternative separator '/'."],[5,"is_sep_byte_verbatim","","Returns whether the given byte is a path separator.\nOnly allows the primary separator '\\'; use is_sep_byte to allow '/'."],[6,"StrComponents","","Iterator that yields successive components of a Path as &str"],[6,"Components","","Iterator that yields successive components of a Path as &[u8]"],[17,"SEP","","The standard path separator character"],[17,"SEP_BYTE","","The standard path separator byte"],[17,"SEP2","","The alternative path separator character"],[17,"SEP2_BYTE","","The alternative path separator character"],[11,"clone","","",418],[11,"fmt","","",418],[11,"eq","","",418],[11,"partial_cmp","","",418],[11,"cmp","","",418],[6,"Err","",""],[11,"from_str","","",418],[11,"eq","","",419],[11,"ne","","",419],[11,"clone","","",419],[11,"fmt","","",419],[11,"hash","","",418],[11,"container_as_bytes","","",418],[11,"container_as_str","","",418],[11,"is_str","","",418],[11,"new_unchecked","","See `GenericPathUnsafe::from_vec_unchecked`.",418],[11,"set_filename_unchecked","","See `GenericPathUnsafe::set_filename_unchecked`.",418],[11,"push_unchecked","","See `GenericPathUnsafe::push_unchecked`.",418],[11,"new_opt","","",418],[11,"as_str","","See `GenericPath::as_str` for info.\nAlways returns a `Some` value.",418],[11,"as_vec","","",418],[11,"into_vec","","",418],[11,"dirname","","",418],[11,"dirname_str","","See `GenericPath::dirname_str` for info.\nAlways returns a `Some` value.",418],[11,"filename","","",418],[11,"filename_str","","See `GenericPath::filename_str` for info.\nAlways returns a `Some` value if `filename` returns a `Some` value.",418],[11,"filestem_str","","See `GenericPath::filestem_str` for info.\nAlways returns a `Some` value if `filestem` returns a `Some` value.",418],[11,"extension_str","","",418],[11,"dir_path","","",418],[11,"pop","","",418],[11,"root_path","","",418],[11,"is_absolute","","See `GenericPath::is_absolute` for info.",418],[11,"is_relative","","",418],[11,"is_ancestor_of","","",418],[11,"path_relative_from","","",418],[11,"ends_with_path","","",418],[11,"new","","Returns a new `Path` from a `BytesContainer`.",418],[11,"new_opt","","Returns a new `Some(Path)` from a `BytesContainer`.",418],[11,"str_components","","Returns an iterator that yields each component of the path in turn as a Option<&str>.\nEvery component is guaranteed to be Some.\nDoes not yield the path prefix (including server/share components in UNC paths).\nDoes not distinguish between volume-relative and relative paths, e.g.\n\\a\\b\\c and a\\b\\c.\nDoes not distinguish between absolute and cwd-relative paths, e.g.\nC:\\foo and C:foo.",418],[11,"components","","Returns an iterator that yields each component of the path in turn as a &[u8].\nSee str_components() for details.",418],[11,"fmt","","",417],[11,"clone","","",417],[11,"eq","","",417],[11,"ne","","",417],[8,"GenericPath","std::path","A trait that represents the generic operations available on paths"],[11,"new","","Creates a new Path from a byte vector or string.\nThe resulting Path will always be normalized.",420],[11,"new_opt","","Creates a new Path from a byte vector or string, if possible.\nThe resulting Path will always be normalized.",420],[11,"as_str","","Returns the path as a string, if possible.\nIf the path is not representable in utf-8, this returns None.",420],[10,"as_vec","","Returns the path as a byte vector",420],[10,"into_vec","","Converts the Path into an owned byte vector",420],[11,"display","","Returns an object that implements `Show` for printing paths",420],[11,"filename_display","","Returns an object that implements `Show` for printing filenames",420],[10,"dirname","","Returns the directory component of `self`, as a byte vector (with no trailing separator).\nIf `self` has no directory component, returns ['.'].",420],[11,"dirname_str","","Returns the directory component of `self`, as a string, if possible.\nSee `dirname` for details.",420],[10,"filename","","Returns the file component of `self`, as a byte vector.\nIf `self` represents the root of the file hierarchy, returns None.\nIf `self` is \".\" or \"..\", returns None.",420],[11,"filename_str","","Returns the file component of `self`, as a string, if possible.\nSee `filename` for details.",420],[11,"filestem","","Returns the stem of the filename of `self`, as a byte vector.\nThe stem is the portion of the filename just before the last '.'.\nIf there is no '.', the entire filename is returned.",420],[11,"filestem_str","","Returns the stem of the filename of `self`, as a string, if possible.\nSee `filestem` for details.",420],[11,"extension","","Returns the extension of the filename of `self`, as an optional byte vector.\nThe extension is the portion of the filename just after the last '.'.\nIf there is no extension, None is returned.\nIf the filename ends in '.', the empty vector is returned.",420],[11,"extension_str","","Returns the extension of the filename of `self`, as a string, if possible.\nSee `extension` for details.",420],[11,"set_filename","","Replaces the filename portion of the path with the given byte vector or string.\nIf the replacement name is [], this is equivalent to popping the path.",420],[11,"set_extension","","Replaces the extension with the given byte vector or string.\nIf there is no extension in `self`, this adds one.\nIf the argument is [] or \"\", this removes the extension.\nIf `self` has no filename, this is a no-op.",420],[11,"with_filename","","Returns a new Path constructed by replacing the filename with the given\nbyte vector or string.\nSee `set_filename` for details.",420],[11,"with_extension","","Returns a new Path constructed by setting the extension to the given\nbyte vector or string.\nSee `set_extension` for details.",420],[11,"dir_path","","Returns the directory component of `self`, as a Path.\nIf `self` represents the root of the filesystem hierarchy, returns `self`.",420],[10,"root_path","","Returns a Path that represents the filesystem root that `self` is rooted in.",420],[11,"push","","Pushes a path (as a byte vector or string) onto `self`.\nIf the argument represents an absolute path, it replaces `self`.",420],[11,"push_many","","Pushes multiple paths (as byte vectors or strings) onto `self`.\nSee `push` for details.",420],[10,"pop","","Removes the last path component from the receiver.\nReturns `true` if the receiver was modified, or `false` if it already\nrepresented the root of the file hierarchy.",420],[11,"join","","Returns a new Path constructed by joining `self` with the given path\n(as a byte vector or string).\nIf the given path is absolute, the new Path will represent just that.",420],[11,"join_many","","Returns a new Path constructed by joining `self` with the given paths\n(as byte vectors or strings).\nSee `join` for details.",420],[10,"is_absolute","","Returns whether `self` represents an absolute path.\nAn absolute path is defined as one that, when joined to another path, will\nyield back the same absolute path.",420],[11,"is_relative","","Returns whether `self` represents a relative path.\nTypically this is the inverse of `is_absolute`.\nBut for Windows paths, it also means the path is not volume-relative or\nrelative to the current working directory.",420],[10,"is_ancestor_of","","Returns whether `self` is equal to, or is an ancestor of, the given path.\nIf both paths are relative, they are compared as though they are relative\nto the same parent path.",420],[10,"path_relative_from","","Returns the Path that, were it joined to `base`, would yield `self`.\nIf no such path exists, None is returned.\nIf `self` is absolute and `base` is relative, or on Windows if both\npaths refer to separate drives, an absolute path is returned.",420],[10,"ends_with_path","","Returns whether the relative path `child` is a suffix of `self`.",420],[8,"BytesContainer","","A trait that represents something bytes-like (e.g. a &[u8] or a &str)"],[10,"container_as_bytes","","Returns a &[u8] representing the receiver",421],[11,"container_as_str","","Returns the receiver interpreted as a utf-8 string, if possible",421],[11,"is_str","","Returns whether .container_as_str() is guaranteed to not fail",421],[8,"GenericPathUnsafe","","A trait that represents the unsafe operations on GenericPaths"],[10,"new_unchecked","","Creates a new Path without checking for null bytes.\nThe resulting Path will always be normalized.",422],[10,"set_filename_unchecked","","Replaces the filename portion of the path without checking for null\nbytes.\nSee `set_filename` for details.",422],[10,"push_unchecked","","Pushes a path onto `self` without checking for null bytes.\nSee `push` for details.",422],[11,"fmt","","",423],[11,"fmt","","",423],[11,"as_cow","","Returns the path as a possibly-owned string.",423],[11,"container_as_bytes","std::string","",257],[11,"container_as_str","","",257],[11,"is_str","","",257],[11,"container_as_bytes","std::vec","",261],[11,"container_as_bytes","std::ffi","",311],[0,"rand","std","Utilities for random number generation"],[8,"Rand","std::rand","A type that can be randomly generated using an `Rng`."],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",424],[8,"Rng","","A random number generator."],[10,"next_u32","","Return the next random u32.",425],[10,"next_u64","","Return the next random u64.",425],[10,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",425],[10,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",425],[10,"fill_bytes","","Fill `dest` with random data.",425],[10,"gen","","Return a random value of a `Rand` type.",425],[10,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",425],[10,"gen_range","","Generate a random value in the range [`low`, `high`).",425],[10,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",425],[10,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",425],[10,"choose","","Return a random element from `values`.",425],[10,"shuffle","","Shuffle a mutable slice in place.",425],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times."],[10,"reseed","","Reseed an RNG with the given seed.",426],[10,"from_seed","","Create a new RNG with the given seed.",426],[11,"new","rand::distributions::range","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",427],[11,"sample","","",427],[11,"ind_sample","","",427],[11,"new","rand::distributions::gamma","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",428],[11,"sample","","",428],[11,"sample","","",429],[11,"sample","","",430],[11,"ind_sample","","",428],[11,"ind_sample","","",429],[11,"ind_sample","","",430],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",431],[11,"sample","","",431],[11,"ind_sample","","",431],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",432],[11,"sample","","",432],[11,"ind_sample","","",432],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",433],[11,"sample","","",433],[11,"ind_sample","","",433],[11,"rand","rand::distributions::normal","",434],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",435],[11,"sample","","",435],[11,"ind_sample","","",435],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",436],[11,"sample","","",436],[11,"ind_sample","","",436],[11,"rand","rand::distributions::exponential","",437],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",438],[11,"sample","","",438],[11,"ind_sample","","",438],[11,"sample","rand::distributions","",439],[11,"ind_sample","","",439],[11,"new","","Create a new `WeightedChoice`.",440],[11,"sample","","",440],[11,"ind_sample","","",440],[11,"new_unseeded","rand::isaac","Create an ISAAC random number generator using the default\nfixed seed.",441],[11,"clone","","",441],[11,"clone_from","","",441],[11,"next_u32","","",441],[11,"next_u64","","",441],[11,"next_f32","","",441],[11,"next_f64","","",441],[11,"fill_bytes","","",441],[11,"gen","","",441],[11,"gen_iter","","",441],[11,"gen_range","","",441],[11,"gen_weighted_bool","","",441],[11,"gen_ascii_chars","","",441],[11,"choose","","",441],[11,"shuffle","","",441],[11,"reseed","","",441],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",441],[11,"rand","","",441],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",442],[11,"clone","","",442],[11,"clone_from","","",442],[11,"next_u32","","",442],[11,"next_u64","","",442],[11,"next_u64","","",442],[11,"next_f32","","",442],[11,"next_f64","","",442],[11,"fill_bytes","","",442],[11,"gen","","",442],[11,"gen_iter","","",442],[11,"gen_range","","",442],[11,"gen_weighted_bool","","",442],[11,"gen_ascii_chars","","",442],[11,"choose","","",442],[11,"shuffle","","",442],[11,"reseed","","",442],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",442],[11,"rand","","",442],[11,"clone","rand::chacha","",443],[11,"clone_from","","",443],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",443],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",443],[11,"next_u32","","",443],[11,"next_u64","","",443],[11,"next_f32","","",443],[11,"next_f64","","",443],[11,"fill_bytes","","",443],[11,"gen","","",443],[11,"gen_iter","","",443],[11,"gen_range","","",443],[11,"gen_weighted_bool","","",443],[11,"gen_ascii_chars","","",443],[11,"choose","","",443],[11,"shuffle","","",443],[11,"reseed","","",443],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",443],[11,"rand","","",443],[11,"new","rand::reseeding","Create a new `ReseedingRng` with the given parameters.",444],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",444],[11,"next_u32","","",444],[11,"next_u64","","",444],[11,"fill_bytes","","",444],[11,"next_u64","","",444],[11,"next_f32","","",444],[11,"next_f64","","",444],[11,"fill_bytes","","",444],[11,"gen","","",444],[11,"gen_iter","","",444],[11,"gen_range","","",444],[11,"gen_weighted_bool","","",444],[11,"gen_ascii_chars","","",444],[11,"choose","","",444],[11,"shuffle","","",444],[11,"reseed","","",444],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",444],[11,"reseed","","",445],[11,"default","","",445],[11,"rand","rand","",446],[11,"rand","","",447],[11,"rand","","",446],[11,"rand","","",447],[11,"rand","std::option","",69],[6,"Item","std::rand",""],[11,"next","rand","",448],[11,"size_hint","","",448],[6,"Item","std::rand",""],[11,"next","rand","",449],[11,"size_hint","","",449],[11,"clone","","",450],[11,"clone_from","","",450],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",450],[11,"next_u32","","",450],[11,"next_u64","","",450],[11,"next_f32","","",450],[11,"next_f64","","",450],[11,"fill_bytes","","",450],[11,"gen","","",450],[11,"gen_iter","","",450],[11,"gen_range","","",450],[11,"gen_weighted_bool","","",450],[11,"gen_ascii_chars","","",450],[11,"choose","","",450],[11,"shuffle","","",450],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",450],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",450],[11,"rand","","",450],[3,"Open01","std::rand","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint)."],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints)."],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator."],[3,"IsaacRng","","A random number generator that uses the ISAAC algorithm[1]."],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm."],[3,"ChaChaRng","","A random number generator that uses the ChaCha20 algorithm [1]."],[0,"distributions","","Sampling from random distributions."],[0,"range","std::rand::distributions","Generating numbers between two others."],[3,"Range","std::rand::distributions::range","Sample values uniformly between two bounds."],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`."],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",451],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",451],[0,"gamma","std::rand::distributions","The Gamma and derived distributions."],[3,"Gamma","std::rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[0,"normal","std::rand::distributions","The normal and derived distributions."],[3,"StandardNormal","std::rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian)."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[0,"exponential","std::rand::distributions","The exponential distribution."],[3,"Exp1","std::rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[8,"Sample","std::rand::distributions","Types that can be used to create a random instance of `Support`."],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",452],[8,"IndependentSample","","`Sample`s that do not require keeping track of state."],[10,"ind_sample","","Generate a random value.",453],[3,"RandSample","","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits."],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`."],[12,"weight","","The numerical weight of this item",454],[12,"item","","The actual item which is being weighted",454],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items."],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`."],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`."],[3,"Range","","Sample values uniformly between two bounds."],[3,"Gamma","","The Gamma distribution `Gamma(shape, scale)` distribution."],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom."],[3,"FisherF","","The Fisher F distribution `F(m, n)`."],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom."],[3,"Exp","","The exponential distribution `Exp(lambda)`."],[0,"reseeding","std::rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes."],[3,"ReseedingRng","std::rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes."],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",444],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`."],[10,"reseed","","Reseed the given RNG.",455],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call."],[3,"OsRng","std::rand","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:"],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform."],[3,"ThreadRng","","The thread-local RNG."],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed."],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<int>()`."],[5,"random","","Generates a random value using the thread-local random number generator."],[5,"sample","","Randomly sample up to `amount` elements from an iterator."],[0,"os","","Interfaces to the operating system provided random number\ngenerators."],[11,"new","","Create a new `OsRng`.",456],[11,"next_u32","","",456],[11,"next_u64","","",456],[11,"fill_bytes","","",456],[0,"reader","","A wrapper around any Reader to treat it as an RNG."],[3,"ReaderRng","std::rand::reader","An RNG that reads random bytes straight from a `Reader`. This will\nwork best with an infinite reader, but this is not required."],[11,"new","","Create a new `ReaderRng` from a `Reader`.",457],[11,"next_u32","","",457],[11,"next_u64","","",457],[11,"fill_bytes","","",457],[11,"clone","std::rand","",458],[11,"new","","Create a randomly seeded instance of `StdRng`.",458],[11,"next_u32","","",458],[11,"next_u64","","",458],[11,"reseed","","",458],[11,"from_seed","","",458],[11,"clone","","",459],[11,"next_u32","","",459],[11,"next_u64","","",459],[11,"fill_bytes","","",459],[0,"time","std","Temporal quantification."],[0,"duration","std::time","Temporal quantification"],[3,"Duration","std::time::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details."],[17,"MIN","","The minimum possible `Duration`: `i64::MIN` milliseconds."],[17,"MAX","","The maximum possible `Duration`: `i64::MAX` milliseconds."],[11,"fmt","","",460],[11,"cmp","","",460],[11,"partial_cmp","","",460],[11,"lt","","",460],[11,"le","","",460],[11,"gt","","",460],[11,"ge","","",460],[11,"eq","","",460],[11,"ne","","",460],[11,"clone","","",460],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60), with overflow checks.\nPanics when the duration is out of bounds.",460],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",460],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",460],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",460],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",460],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",460],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",460],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",460],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",460],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",460],[11,"num_days","","Returns the total number of whole days in the duration.",460],[11,"num_hours","","Returns the total number of whole hours in the duration.",460],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",460],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",460],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",460],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",460],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",460],[11,"checked_add","","Add two durations, returning `None` if overflow occured.",460],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occured.",460],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",460],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",460],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",460],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",460],[6,"Output","",""],[11,"neg","","",460],[6,"Output","",""],[11,"add","","",460],[6,"Output","",""],[11,"sub","","",460],[6,"Output","",""],[11,"mul","","",460],[6,"Output","",""],[11,"div","","",460],[11,"fmt","","",460],[0,"collections","std","Collection types."],[4,"Bound","std::collections","An endpoint of a range of keys."],[13,"Included","","An inclusive bound.",461],[13,"Excluded","","An exclusive bound.",461],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",461],[3,"BinaryHeap","","A priority queue implemented with a binary heap."],[3,"Bitv","","The bitvector type."],[3,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"BTreeSet","","A set based on a B-Tree."],[3,"DList","","A doubly-linked list."],[3,"RingBuf","","`RingBuf` is a circular buffer, which can be used as a double-ended queue efficiently."],[3,"VecMap","","A map optimized for small integer keys."],[0,"binary_heap","","A priority queue implemented with a binary heap."],[3,"BinaryHeap","std::collections::binary_heap","A priority queue implemented with a binary heap."],[3,"Iter","","`BinaryHeap` iterator."],[3,"IntoIter","","An iterator that moves out of a `BinaryHeap`."],[3,"Drain","","An iterator that drains a `BinaryHeap`."],[0,"bitv","std::collections",""],[3,"Iter","std::collections::bitv","An iterator for `Bitv`."],[3,"Bitv","","The bitvector type."],[0,"bitv_set","std::collections",""],[3,"Difference","std::collections::bitv_set",""],[3,"Intersection","",""],[3,"SymmetricDifference","",""],[3,"SetIter","","An iterator for `BitvSet`."],[3,"Union","",""],[3,"BitvSet","","An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements."],[0,"btree_map","std::collections",""],[3,"OccupiedEntry","std::collections::btree_map","An occupied Entry."],[3,"VacantEntry","","A vacant Entry."],[3,"BTreeMap","","A map based on a B-Tree."],[3,"Range","","An iterator over a sub-range of BTreeMap's entries."],[3,"Keys","","An iterator over a BTreeMap's keys."],[3,"Iter","","An iterator over a BTreeMap's entries."],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied."],[13,"Vacant","","A vacant Entry",226],[13,"Occupied","","An occupied Entry",226],[3,"Values","","An iterator over a BTreeMap's values."],[3,"IterMut","","A mutable iterator over a BTreeMap's entries."],[3,"RangeMut","","A mutable iterator over a sub-range of BTreeMap's entries."],[3,"IntoIter","","An owning iterator over a BTreeMap's entries."],[0,"btree_set","std::collections",""],[3,"Union","std::collections::btree_set","A lazy iterator producing elements in the set union (in-order)."],[3,"Difference","","A lazy iterator producing elements in the set difference (in-order)."],[3,"Intersection","","A lazy iterator producing elements in the set intersection (in-order)."],[3,"BTreeSet","","A set based on a B-Tree."],[3,"Range","","An iterator over a sub-range of BTreeSet's items."],[3,"IntoIter","","An owning iterator over a BTreeSet's items."],[3,"Iter","","An iterator over a BTreeSet's items."],[3,"SymmetricDifference","","A lazy iterator producing elements in the set symmetric difference (in-order)."],[0,"dlist","std::collections","A doubly-linked list with owned nodes."],[3,"DList","std::collections::dlist","A doubly-linked list."],[3,"Iter","","An iterator over references to the items of a `DList`."],[3,"IterMut","","An iterator over mutable references to the items of a `DList`."],[3,"IntoIter","","An iterator over mutable references to the items of a `DList`."],[0,"ring_buf","std::collections","This crate implements a double-ended queue with `O(1)` amortized inserts and removals from both\nends of the container. It also has `O(1)` indexing like a vector. The contained elements are\nnot required to be copyable, and the queue will be sendable if the contained type is sendable."],[3,"RingBuf","std::collections::ring_buf","`RingBuf` is a circular buffer, which can be used as a double-ended queue efficiently."],[3,"Iter","","`RingBuf` iterator."],[3,"IterMut","","`RingBuf` mutable iterator."],[3,"IntoIter","","A by-value RingBuf iterator"],[3,"Drain","","A draining RingBuf iterator"],[0,"vec_map","std::collections","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key)."],[3,"VecMap","std::collections::vec_map","A map optimized for small integer keys."],[3,"Iter","","An iterator over the key-value pairs of a map."],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable."],[3,"Keys","","An iterator over the keys of a map."],[3,"Values","","An iterator over the values of a map."],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map."],[3,"Drain","",""],[3,"HashMap","std::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[11,"clone","","",462],[11,"new","","Create an empty HashMap.",462],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",462],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",462],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",462],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",462],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",462],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",462],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",462],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",462],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",462],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",462],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",462],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",462],[11,"len","","Returns the number of elements in the map.",462],[11,"is_empty","","Returns true if the map contains no elements.",462],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",462],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",462],[11,"get","","Returns a reference to the value corresponding to the key.",462],[11,"contains_key","","Returns true if the map contains a value for the specified key.",462],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",462],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",462],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",462],[11,"eq","","",462],[11,"fmt","","",462],[11,"default","","",462],[11,"index","","",462],[11,"index_mut","","",462],[11,"into_iter","","",462],[11,"from_iter","","",462],[11,"extend","","",462],[11,"clone","","",463],[11,"new","","Create an empty HashSet.",463],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",463],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",463],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",463],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",463],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",463],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",463],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",463],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",463],[11,"difference","","Visit the values representing the difference.",463],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",463],[11,"intersection","","Visit the values representing the intersection.",463],[11,"union","","Visit the values representing the union.",463],[11,"len","","Return the number of elements in the set",463],[11,"is_empty","","Returns true if the set contains no elements",463],[11,"drain","","Clears the set, returning all elements in an iterator.",463],[11,"clear","","Clears the set, removing all values.",463],[11,"contains","","Returns `true` if the set contains a value.",463],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",463],[11,"is_subset","","Returns `true` if the set is a subset of another.",463],[11,"is_superset","","Returns `true` if the set is a superset of another.",463],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",463],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",463],[11,"eq","","",463],[11,"fmt","","",463],[11,"from_iter","","",463],[11,"extend","","",463],[11,"default","","",463],[11,"into_iter","","",463],[0,"hash_map","","A hashmap"],[3,"HashMap","std::collections::hash_map","A hash map implementation which uses linear probing with Robin\nHood bucket stealing."],[3,"Iter","","HashMap iterator."],[3,"IterMut","","HashMap mutable values iterator."],[3,"IntoIter","","HashMap move iterator."],[3,"Keys","","HashMap keys iterator."],[3,"Values","","HashMap values iterator."],[3,"Drain","","HashMap drain iterator."],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap."],[3,"VacantEntry","","A view into a single empty location in a HashMap."],[3,"RandomState","","`RandomState` is the default state for `HashMap` types."],[3,"Hasher","","A hasher implementation which is generated from `RandomState` instances."],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied."],[13,"Occupied","","An occupied Entry.",464],[13,"Vacant","","A vacant Entry.",464],[17,"INITIAL_CAPACITY","",""],[11,"clone","std::collections","",462],[11,"new","","Create an empty HashMap.",462],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",462],[11,"with_hash_state","","Creates an empty hashmap which will use the given hasher to hash keys.",462],[11,"with_capacity_and_hash_state","","Create an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",462],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",462],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",462],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",462],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&'a K`.",462],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&'a V`.",462],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&'a K, &'a V)`.",462],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&'a K, &'a mut V)`.",462],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",462],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",462],[11,"len","","Returns the number of elements in the map.",462],[11,"is_empty","","Returns true if the map contains no elements.",462],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",462],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",462],[11,"get","","Returns a reference to the value corresponding to the key.",462],[11,"contains_key","","Returns true if the map contains a value for the specified key.",462],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",462],[11,"insert","","Inserts a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",462],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",462],[11,"eq","","",462],[11,"fmt","","",462],[11,"default","","",462],[6,"Output","std::collections::hash_map",""],[11,"index","std::collections","",462],[6,"Output","std::collections::hash_map",""],[11,"index_mut","std::collections","",462],[11,"clone","std::collections::hash_map","",465],[11,"clone","","",466],[11,"clone","","",467],[6,"Iter","",""],[6,"Iter","",""],[6,"Iter","",""],[11,"into_iter","std::collections","",462],[6,"Item","std::collections::hash_map",""],[11,"next","","",465],[11,"size_hint","","",465],[11,"len","","",465],[6,"Item","",""],[11,"next","","",468],[11,"size_hint","","",468],[11,"len","","",468],[6,"Item","",""],[11,"next","","",469],[11,"size_hint","","",469],[11,"len","","",469],[6,"Item","",""],[11,"next","","",466],[11,"size_hint","","",466],[11,"len","","",466],[6,"Item","",""],[11,"next","","",467],[11,"size_hint","","",467],[11,"len","","",467],[6,"Item","",""],[11,"next","","",470],[11,"size_hint","","",470],[11,"len","","",470],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",464],[11,"get","","Gets a reference to the value in the entry.",471],[11,"get_mut","","Gets a mutable reference to the value in the entry.",471],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",471],[11,"insert","","Sets the value of the entry, and returns the entry's old value",471],[11,"remove","","Takes the value out of the entry, and returns it",471],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",472],[11,"from_iter","std::collections","",462],[11,"extend","","",462],[11,"clone","std::collections::hash_map","",473],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",473],[6,"Hasher","",""],[11,"hasher","","",473],[11,"default","","",473],[11,"write","","",474],[6,"Output","",""],[11,"reset","","",474],[11,"finish","","",474],[0,"hash_set","std::collections","A hashset"],[3,"HashSet","std::collections::hash_set","An implementation of a hash set using the underlying representation of a\nHashMap where the value is (). As with the `HashMap` type, a `HashSet`\nrequires that the elements implement the `Eq` and `Hash` traits."],[3,"Iter","","HashSet iterator"],[3,"IntoIter","","HashSet move iterator"],[3,"Drain","","HashSet drain iterator"],[3,"Intersection","","Intersection iterator"],[3,"Difference","","Difference iterator"],[3,"SymmetricDifference","","Symmetric difference iterator."],[3,"Union","","Set union iterator."],[11,"clone","std::collections","",463],[11,"new","","Create an empty HashSet.",463],[11,"with_capacity","","Create an empty HashSet with space for at least `n` elements in\nthe hash table.",463],[11,"with_hash_state","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",463],[11,"with_capacity_and_hash_state","","Create an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",463],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",463],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",463],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",463],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &'a T.",463],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",463],[11,"difference","","Visit the values representing the difference.",463],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",463],[11,"intersection","","Visit the values representing the intersection.",463],[11,"union","","Visit the values representing the union.",463],[11,"len","","Return the number of elements in the set",463],[11,"is_empty","","Returns true if the set contains no elements",463],[11,"drain","","Clears the set, returning all elements in an iterator.",463],[11,"clear","","Clears the set, removing all values.",463],[11,"contains","","Returns `true` if the set contains a value.",463],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",463],[11,"is_subset","","Returns `true` if the set is a subset of another.",463],[11,"is_superset","","Returns `true` if the set is a superset of another.",463],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",463],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",463],[11,"eq","","",463],[11,"fmt","","",463],[11,"from_iter","","",463],[11,"extend","","",463],[11,"default","","",463],[6,"Output","std::collections::hash_set",""],[6,"Output","",""],[6,"Output","",""],[6,"Output","",""],[6,"Iter","",""],[6,"Iter","",""],[11,"into_iter","std::collections","",463],[6,"Item","std::collections::hash_set",""],[11,"next","","",475],[11,"size_hint","","",475],[11,"len","","",475],[6,"Item","",""],[11,"next","","",476],[11,"size_hint","","",476],[11,"len","","",476],[6,"Item","",""],[11,"next","","",477],[11,"size_hint","","",477],[11,"len","","",477],[6,"Item","",""],[11,"next","","",478],[11,"size_hint","","",478],[6,"Item","",""],[11,"next","","",479],[11,"size_hint","","",479],[6,"Item","",""],[11,"next","","",480],[11,"size_hint","","",480],[6,"Item","",""],[11,"next","","",481],[11,"size_hint","","",481],[0,"hash_state","std::collections","Experimental support for providing custom hash algorithms to a HashMap and\nHashSet."],[3,"DefaultState","std::collections::hash_state","A structure which is a factory for instances of `Hasher` which implement the\ndefault trait."],[8,"HashState","","A trait representing stateful hashes which can be used to hash keys in a\n`HashMap`."],[16,"Hasher","std::collections::hash_state::HashState",""],[10,"hasher","std::collections::hash_state","Creates a new hasher based on the given state of this object.",482],[6,"Hasher","",""],[11,"hasher","","",483],[11,"clone","","",483],[11,"default","","",483],[0,"thread","std","Native threads"],[3,"Builder","std::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads."],[3,"Thread","","A handle to a thread."],[3,"JoinGuard","","An RAII-style guard that will block until thread termination when dropped."],[6,"Result","","Indicates the manner in which a thread exited."],[11,"new","","Generate the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",484],[11,"name","","Name the thread-to-be. Currently the name is used for identification\nonly in panic messages.",484],[11,"stack_size","","Set the size of the stack for the new thread.",484],[11,"stdout","","Redirect thread-local stdout.",484],[11,"stderr","","Redirect thread-local stderr.",484],[11,"spawn","","Spawn a new detached thread, and return a handle to it.",484],[11,"scoped","","Spawn a new child thread that must be joined within a given\nscope, and return a `JoinGuard`.",484],[11,"clone","","",485],[11,"spawn","","Spawn a new detached thread, returning a handle to it.",485],[11,"scoped","","Spawn a new *scoped* thread, returning a `JoinGuard` for it.",485],[11,"current","","Gets a handle to the thread that invokes it.",485],[11,"yield_now","","Cooperatively give up a timeslice to the OS scheduler.",485],[11,"panicking","","Determines whether the current thread is unwinding because of panic.",485],[11,"park","","Block unless or until the current thread's token is made available (may wake spuriously).",485],[11,"park_timeout","","Block unless or until the current thread's token is made available or\nthe specified duration has been reached (may wake spuriously).",485],[11,"unpark","","Atomically makes the handle's token available if it is not already.",485],[11,"name","","Get the thread's name.",485],[11,"new","","",485],[11,"thread","","Extract a handle to the thread this guard will join on.",486],[11,"join","","Wait for the associated thread to finish, returning the result of the thread's\ncalculation.",486],[11,"detach","","Detaches the child thread, allowing it to outlive its parent.",486],[11,"drop","","",486],[0,"sync","std","Useful synchronization primitives"],[3,"Arc","std::sync","An atomically reference counted wrapper for shared state."],[3,"Weak","","A weak pointer to an `Arc`."],[0,"atomic","","Atomic types"],[3,"AtomicBool","std::sync::atomic","A boolean type which can be safely shared between threads."],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads."],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads."],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads."],[4,"Ordering","","Atomic memory orderings"],[13,"Relaxed","","No ordering constraints, only atomic operations.",487],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",487],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",487],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",487],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",487],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`."],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`."],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`."],[5,"fence","","An atomic fence."],[3,"AtomicInt","",""],[3,"AtomicUint","",""],[17,"ATOMIC_INT_INIT","",""],[17,"ATOMIC_UINT_INIT","",""],[3,"Mutex","std::sync","A mutual exclusion primitive useful for protecting shared data"],[3,"MutexGuard","","An RAII implementation of a \"scoped lock\" of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked."],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes."],[3,"RwLock","","A reader-writer lock"],[3,"StaticRwLock","","Structure representing a statically allocated RwLock."],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped."],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped."],[3,"Condvar","","A Condition Variable"],[3,"StaticCondvar","","Statically allocated condition variables."],[3,"Once","","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue."],[3,"Semaphore","","A counting, blocking, semaphore."],[3,"SemaphoreGuard","","An RAII guard which will release a resource acquired from a semaphore when\ndropped."],[3,"Barrier","","A barrier enables multiple tasks to synchronize the beginning\nof some computation."],[3,"BarrierWaitResult","","A result returned from wait."],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired."],[3,"Future","","A type encapsulating the result of a computation which may not be complete"],[3,"TaskPool","","A thread pool used to execute functions in parallel."],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method."],[13,"Poisoned","","The lock could not be acquired because another task failed while holding\nthe lock.",488],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",488],[0,"mpsc","","Multi-producer, single-consumer communication primitives threads"],[3,"Select","std::sync::mpsc","The \"receiver set\" of the select interface. This structure is used to manage\na set of receivers which are being selected over."],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver."],[3,"Receiver","","The receiving-half of Rust's channel type. This half can only be owned by\none task"],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up."],[3,"Sender","","The sending-half of Rust's asynchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SyncSender","","The sending-half of Rust's synchronous channel type. This half can only be\nowned by one task, but it can be cloned to send to other tasks."],[3,"SendError","","An error returned from the `send` function on channels."],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`."],[4,"TryRecvError","","This enumeration is the list of the possible reasons that try_recv could not\nreturn data when called."],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",489],[13,"Disconnected","","This channel's sending half has become disconnected, and there will\nnever be any more data received on this channel",489],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method."],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",490],[13,"Disconnected","","This channel's receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",490],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves."],[5,"sync_channel","","Creates a new synchronous, bounded channel."],[11,"new","","Creates a new selection structure. This set is initially empty and\n`wait` will panic!() if called.",491],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",491],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",491],[11,"id","","Retrieve the id of this handle.",492],[11,"recv","","Block to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",492],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",492],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",492],[11,"drop","","",491],[11,"drop","","",492],[11,"clone","","",493],[11,"eq","","",493],[11,"ne","","",493],[11,"fmt","","",494],[11,"clone","","",494],[11,"eq","","",494],[11,"ne","","",494],[11,"fmt","","",489],[11,"clone","","",489],[11,"eq","","",489],[11,"ne","","",489],[11,"clone","","",490],[11,"eq","","",490],[11,"ne","","",490],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",495],[11,"clone","","",495],[11,"drop","","",495],[11,"send","","Sends a value on this synchronous channel.",496],[11,"try_send","","Attempts to send a value on this channel without blocking.",496],[11,"clone","","",496],[11,"drop","","",496],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",497],[11,"recv","","Attempt to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",497],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",497],[6,"Item","",""],[11,"next","","",498],[11,"drop","","",497],[11,"fmt","","",493],[11,"fmt","","",493],[11,"fmt","","",490],[11,"fmt","","",490],[11,"fmt","","",494],[11,"fmt","","",489],[11,"new","std::sync","Create a new barrier that can block a given number of threads.",499],[11,"wait","","Block the current thread until all threads has rendezvoused here.",499],[11,"is_leader","","Return whether this thread from `wait` is the \"leader thread\".",500],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",501],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",501],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",501],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",501],[11,"notify_one","","Wake up one blocked thread on this condvar.",501],[11,"notify_all","","Wake up all blocked threads on this condvar.",501],[11,"drop","","",501],[11,"wait","","Block the current thread until this condition variable receives a\nnotification.",502],[11,"wait_timeout","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",502],[11,"wait_timeout_with","","Wait on this condition variable for a notification, timing out after a\nspecified duration.",502],[11,"notify_one","","Wake up one blocked thread on this condvar.",502],[11,"notify_all","","Wake up all blocked threads on this condvar.",502],[11,"destroy","","Deallocate all resources associated with this static condvar.",502],[11,"get","","Get the value of the future.",503],[11,"into_inner","","Gets the value from this future, forcing evaluation.",503],[11,"get_ref","","Executes the future's closure and then returns a reference\nto the result.  The reference lasts as long as\nthe future.",503],[11,"from_value","","Create a future from a value.",503],[11,"from_fn","","Create a future from a function.",503],[11,"from_receiver","","Create a future from a port",503],[11,"spawn","","Create a future from a unique closure.",503],[11,"new","","Creates a new mutex in an unlocked state ready for use.",504],[11,"lock","","Acquires a mutex, blocking the current task until it is able to do so.",504],[11,"try_lock","","Attempts to acquire this lock.",504],[11,"drop","","",504],[11,"lock","","Acquires this lock, see `Mutex::lock`",505],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",505],[11,"destroy","","Deallocates resources associated with this static mutex.",505],[11,"deref","","",506],[11,"deref_mut","","",506],[11,"drop","","",506],[11,"call_once","","Perform an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",507],[11,"fmt","","",508],[11,"fmt","","",508],[11,"description","","",508],[11,"into_guard","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",508],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",508],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",508],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",508],[11,"from_error","","",488],[11,"fmt","","",488],[11,"fmt","","",488],[11,"description","","",488],[11,"cause","","",488],[11,"new","","Creates a new instance of an `RwLock<T>` which is unlocked.",509],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",509],[11,"try_read","","Attempt to acquire this lock with shared read access.",509],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",509],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",509],[11,"drop","","",509],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",510],[11,"try_read","","Attempt to acquire this lock with shared read access.",510],[11,"write","","Lock this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",510],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",510],[11,"destroy","","Deallocate all resources associated with this static lock.",510],[11,"deref","","",511],[11,"deref","","",512],[11,"deref_mut","","",512],[11,"drop","","",511],[11,"drop","","",512],[11,"new","","Creates a new semaphore with the initial count specified.",513],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",513],[11,"release","","Release a resource from this semaphore.",513],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",513],[11,"drop","","",514],[11,"new","","Spawns a new thread pool with `threads` threads.",515],[11,"execute","","Executes the function `job` on a thread in the pool.",515],[6,"TryLockResult","","A type alias for the result of a nonblocking locking method."],[6,"LockResult","","A type alias for the result of a lock method which can be poisoned."],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants."],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock."],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable."],[17,"ONCE_INIT","","Initialization value for static `Once` values."],[11,"as_raw_fd","std::old_io::fs","",348],[11,"as_raw_fd","std::old_io::pipe","",367],[11,"as_raw_fd","std::old_io::net::pipe","",363],[11,"as_raw_fd","","",364],[11,"as_raw_fd","","",365],[11,"as_raw_fd","std::old_io::net::tcp","",355],[11,"as_raw_fd","","",356],[11,"as_raw_fd","","",357],[11,"as_raw_fd","std::old_io::net::udp","",358],[11,"from_vec","std::ffi","",312],[11,"into_vec","","",312],[11,"as_byte_slice","","",313],[0,"rt","std","Runtime services"],[0,"heap","std::rt",""],[5,"allocate","std::rt::heap","Return a pointer to `size` bytes of memory aligned to `align`."],[5,"reallocate","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"reallocate_inplace","","Resize the allocation referenced by `ptr` to `size` bytes."],[5,"deallocate","","Deallocates the memory referenced by `ptr`."],[5,"usable_size","","Returns the usable size of an allocation created with the specified the\n`size` and `align`."],[5,"stats_print","","Prints implementation-defined allocator statistics."],[17,"EMPTY","","An arbitrary non-null address to represent zero-size allocations."],[5,"at_exit","std::rt","Enqueues a procedure to run when the runtime is cleaned up"],[5,"cleanup","","One-time runtime cleanup."],[0,"backtrace","","Simple backtrace functionality (to print on panic)"],[5,"write","std::rt::backtrace",""],[5,"log_enabled","",""],[0,"util","std::rt",""],[3,"Stdio","std::rt::util",""],[5,"running_on_valgrind","","Dynamically inquire about whether we're running under V.\nYou should usually not use this unless your test definitely\ncan't run correctly un-altered. Valgrind is there to help\nyou notice weirdness in normal, un-doctored code paths!"],[5,"limit_thread_creation_due_to_osx_and_valgrind","","Valgrind has a fixed-sized array (size around 2000) of segment descriptors\nwired into it; this is a hard limit and requires rebuilding valgrind if you\nwant to go beyond it. Normally this is not a problem, but in some tests, we\nproduce a lot of threads casually.  Making lots of threads alone might not\nbe a problem _either_, except on OSX, the segments produced for new threads\n_take a while_ to get reclaimed by the OS. Combined with the fact that libuv\nschedulers fork off a separate thread for polling fsevents on OSX, we get a\nperfect storm of creating \"too many mappings\" for valgrind to handle when\nrunning certain stress tests in the runtime."],[5,"min_stack","",""],[5,"default_sched_threads","","Get's the number of scheduler threads requested by the environment\neither `RUST_THREADS` or `num_cpus`."],[5,"dumb_print","",""],[5,"abort","",""],[5,"report_overflow","",""],[17,"ENFORCE_SANITY","",""],[17,"Stdout","",""],[17,"Stderr","",""],[11,"write_bytes","","",516],[11,"write_str","","",516],[0,"unwind","std::rt","Implementation of Rust stack unwinding"],[5,"try","std::rt::unwind","Invoke a closure, capturing the cause of panic if one occurs."],[5,"panicking","","Determines whether the current thread is unwinding because of panic."],[5,"rust_begin_unwind","","Entry point of panic from the libcore crate."],[5,"begin_unwind_fmt","","The entry point for unwinding with a formatted message."],[5,"begin_unwind","","This is the entry point of unwinding for panic!() and assert!()."],[5,"register","","Register a callback to be invoked when a thread unwinds."],[6,"Callback","",""],[0,"args","std::rt","Global storage for command line arguments"],[5,"init","std::rt::args","One-time global initialization."],[5,"cleanup","","One-time global cleanup."],[5,"take","","Take the global arguments from global storage."],[5,"put","","Give the global arguments to global storage."],[5,"clone","","Make a clone of the global arguments."],[17,"DEFAULT_ERROR_CODE","std::rt","The default error code of the rust runtime if the main thread panics instead\nof exiting cleanly."],[11,"write_all","std::rt::util","",516],[14,"assert!","std","Ensure that a boolean expression is `true` at runtime."],[14,"assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"debug_assert!","","Ensure that a boolean expression is `true` at runtime."],[14,"debug_assert_eq!","","Asserts that two expressions are equal to each other, testing equality in\nboth directions."],[14,"write!","","Use the `format!` syntax to write data into a buffer of type `&mut Writer`.\nSee `std::fmt` for more information."],[14,"writeln!","","Equivalent to the `write!` macro, except that a newline is appended after\nthe message is written."],[14,"unreachable!","","A utility macro for indicating unreachable code."],[14,"unimplemented!","","A standardised placeholder for marking unfinished code. It panics with the\nmessage `\"not yet implemented\"` when executed."],[14,"vec!","","Creates a `Vec` containing the arguments."],[14,"panic!","","The entry point for panic of Rust tasks."],[14,"format!","","Use the syntax described in `std::fmt` to create a value of type `String`.\nSee `std::fmt` for more information."],[14,"print!","","Equivalent to the `println!` macro except that a newline is not printed at\nthe end of the message."],[14,"println!","","Macro for printing to a task's stdout handle."],[14,"try!","","Helper macro for unwrapping `Result` values while returning early with an\nerror if the value of the expression is `Err`. For more information, see\n`std::io`."],[14,"select!","","A macro to select an event from a number of receivers."],[14,"format_args!","","The core macro for formatted string creation & output."],[14,"env!","","Inspect an environment variable at compile time."],[14,"option_env!","","Optionally inspect an environment variable at compile time."],[14,"concat_idents!","","Concatenate identifiers into one identifier."],[14,"concat!","","Concatenates literals into a static string slice."],[14,"line!","","A macro which expands to the line number on which it was invoked."],[14,"column!","","A macro which expands to the column number on which it was invoked."],[14,"file!","","A macro which expands to the file name from which it was invoked."],[14,"stringify!","","A macro which stringifies its argument."],[14,"include_str!","","Includes a utf8-encoded file as a string."],[14,"include_bytes!","","Includes a file as a byte slice."],[14,"module_path!","","Expands to a string that represents the current module path."],[14,"cfg!","","Boolean evaluation of configuration flags."],[14,"scoped_thread_local!","","Declare a new scoped thread local storage key."],[14,"thread_local!","","Declare a new thread local storage key of type `std::thread_local::Key`."],[15,"slice","","Utilities for slice manipulation"],[15,"str","","Unicode string manipulation (`str` type)"],[15,"isize","","Operations and constants for pointer-sized signed integers (`isize` type)"],[15,"i8","","Operations and constants for signed 8-bits integers (`i8` type)"],[15,"i16","","Operations and constants for signed 16-bits integers (`i16` type)"],[15,"i32","","Operations and constants for signed 32-bits integers (`i32` type)"],[15,"i64","","Operations and constants for signed 64-bits integers (`i64` type)"],[15,"usize","","Operations and constants for pointer-sized unsigned integers (`usize` type)"],[15,"u8","","Operations and constants for unsigned 8-bits integers (`u8` type)"],[15,"u16","","Operations and constants for unsigned 16-bits integers (`u16` type)"],[15,"u32","","Operations and constants for unsigned 32-bits integers (`u32` type)"],[15,"u64","","Operations and constants for unsigned 64-bits integer (`u64` type)"],[15,"f32","","Operations and constants for 32-bits floats (`f32` type)"],[15,"f64","","Operations and constants for 64-bits floats (`f64` type)"],[15,"bool","","The boolean type"],[15,"tuple","","Operations on tuples"],[11,"as_os_str","std::path::posix","",415],[11,"write_all","std::old_io","",517],[11,"flush","","",517],[11,"read","","",517],[11,"tell","","",517],[11,"seek","","",517],[11,"listen","","",517],[11,"accept","","",517],[11,"stat","std::path::posix","",415],[11,"lstat","","",415],[11,"exists","","",415],[11,"is_file","","",415],[11,"is_dir","","",415],[11,"clone","std::collections::hash_map","",465],[11,"clone","","",466],[11,"clone","","",467],[11,"next","","",465],[11,"size_hint","","",465],[11,"len","","",465],[11,"next","","",468],[11,"size_hint","","",468],[11,"len","","",468],[11,"next","","",469],[11,"size_hint","","",469],[11,"len","","",469],[11,"next","","",466],[11,"size_hint","","",466],[11,"len","","",466],[11,"next","","",467],[11,"size_hint","","",467],[11,"len","","",467],[11,"next","","",470],[11,"size_hint","","",470],[11,"len","","",470],[11,"get","","Returns a mutable reference to the entry if occupied, or the VacantEntry if vacant.",464],[11,"get","","Gets a reference to the value in the entry.",471],[11,"get_mut","","Gets a mutable reference to the value in the entry.",471],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",471],[11,"insert","","Sets the value of the entry, and returns the entry's old value",471],[11,"remove","","Takes the value out of the entry, and returns it",471],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it",472],[11,"clone","","",473],[11,"new","","Construct a new `RandomState` that is initialized with random keys.",473],[11,"hasher","","",473],[11,"default","","",473],[11,"write","","",474],[11,"reset","","",474],[11,"finish","","",474],[11,"next","std::collections::hash_set","",475],[11,"size_hint","","",475],[11,"len","","",475],[11,"next","","",476],[11,"size_hint","","",476],[11,"len","","",476],[11,"next","","",477],[11,"size_hint","","",477],[11,"len","","",477],[11,"next","","",478],[11,"size_hint","","",478],[11,"next","","",479],[11,"size_hint","","",479],[11,"next","","",480],[11,"size_hint","","",480],[11,"next","","",481],[11,"size_hint","","",481],[11,"hasher","std::collections::hash_state","",483],[11,"clone","","",483],[11,"default","","",483]],"paths":[[8,"Any"],[3,"TypeId"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"CovariantType"],[3,"ContravariantType"],[3,"InvariantType"],[3,"CovariantLifetime"],[3,"ContravariantLifetime"],[3,"InvariantLifetime"],[3,"NoCopy"],[3,"Managed"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[3,"AtomicInt"],[3,"AtomicUint"],[4,"Cow"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"BorrowRefMut"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Finallyalizer"],[3,"Enumerate"],[3,"Inspect"],[3,"Rev"],[3,"Map"],[3,"Zip"],[3,"ByRef"],[4,"MinMaxResult"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Filter"],[3,"FilterMap"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Unfold"],[3,"Counter"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Repeat"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[4,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"BytesDeref"],[3,"CharSplits"],[3,"CharSplitsN"],[3,"NaiveSearcher"],[3,"TwoWaySearcher"],[4,"Searcher"],[3,"MatchIndices"],[3,"SplitStr"],[3,"Split"],[3,"SplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"Lines"],[3,"LinesAny"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[4,"Alignment"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"BorrowFrom"],[8,"BorrowFromMut"],[8,"IntoCow"],[8,"ToOwned"],[8,"Clone"],[8,"PartialEq"],[8,"Ord"],[8,"PartialOrd"],[8,"Default"],[8,"Finally"],[8,"Hash"],[8,"Hasher"],[8,"Writer"],[3,"TyDesc"],[8,"Iterator"],[8,"FromIterator"],[8,"IntoIterator"],[8,"Extend"],[8,"IteratorExt"],[8,"DoubleEndedIterator"],[8,"RandomAccessIterator"],[8,"ExactSizeIterator"],[8,"AdditiveIterator"],[8,"MultiplicativeIterator"],[8,"Drop"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"PtrExt"],[8,"MutPtrExt"],[3,"Slice"],[3,"Closure"],[3,"TraitObject"],[8,"Repr"],[8,"Error"],[8,"FromError"],[3,"Box"],[3,"Arc"],[3,"Weak"],[3,"Rc"],[3,"Weak"],[8,"BoxAny"],[8,"SliceExt"],[8,"SliceConcatExt"],[3,"ElementSwaps"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Bitv"],[3,"Iter"],[3,"BitvSet"],[3,"SetIter"],[3,"TwoBitPositions"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"RawItems"],[3,"Node"],[3,"Handle"],[3,"ElemsAndEdges"],[3,"MoveTraversalImpl"],[3,"AbsTraversal"],[3,"NodeSlice"],[3,"MutNodeSlice"],[3,"BTreeMap"],[3,"IdRef"],[3,"PartialSearchStack"],[3,"Pusher"],[3,"SearchStack"],[3,"AbsIter"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"DList"],[3,"IterMut"],[3,"EnumSet"],[3,"Iter"],[3,"RingBuf"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Direction"],[3,"SizeDirection"],[3,"Permutations"],[4,"DecompositionType"],[3,"Decompositions"],[4,"RecompositionState"],[3,"Recompositions"],[3,"Utf16Units"],[3,"String"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[3,"DerefString"],[3,"Vec"],[3,"IntoIter"],[3,"Drain"],[3,"DerefVec"],[3,"PartialVecNonZeroSized"],[3,"PartialVecZeroSized"],[3,"VecMap"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"],[8,"IntSliceExt"],[8,"AsSlice"],[8,"MutableByteVector"],[8,"StrExt"],[8,"Str"],[8,"CharEq"],[3,"CharRange"],[4,"GraphemeCat"],[3,"GraphemeIndices"],[3,"Graphemes"],[4,"GraphemeState"],[3,"Utf16Items"],[4,"Utf16Item"],[3,"Utf16Encoder"],[3,"Words"],[8,"FromStr"],[8,"ToString"],[8,"CharExt"],[8,"OwnedAsciiExt"],[8,"AsciiExt"],[8,"Invoke"],[3,"Thunk"],[8,"Int"],[8,"SignedInt"],[8,"UnsignedInt"],[8,"FromPrimitive"],[8,"NumCast"],[8,"ToPrimitive"],[8,"FromStrRadix"],[4,"ExponentFormat"],[4,"SignificantDigits"],[4,"SignFormat"],[8,"Float"],[4,"State"],[3,"Key"],[3,"Key"],[3,"DynamicLibrary"],[3,"CString"],[3,"OsString"],[3,"OsStr"],[8,"AsOsStr"],[8,"Writer"],[8,"Show"],[8,"String"],[8,"Octal"],[8,"Binary"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[3,"IoError"],[3,"FileStat"],[3,"UnstableFileStat"],[4,"IoErrorKind"],[4,"SeekStyle"],[4,"FileMode"],[4,"FileAccess"],[4,"FileType"],[3,"BufferedReader"],[3,"BufferedWriter"],[3,"LineBufferedWriter"],[3,"BufferedStream"],[3,"ChanReader"],[3,"ChanWriter"],[3,"MemWriter"],[3,"MemReader"],[3,"BufWriter"],[3,"BufReader"],[3,"TempDir"],[3,"Bytes"],[8,"PathExtensions"],[3,"File"],[3,"Directories"],[3,"Hint"],[3,"Info"],[4,"SocketType"],[4,"Flag"],[4,"Protocol"],[3,"TcpStream"],[3,"TcpListener"],[3,"TcpAcceptor"],[3,"UdpSocket"],[3,"SocketAddr"],[4,"IpAddr"],[8,"ToSocketAddr"],[3,"ParseError"],[3,"UnixStream"],[3,"UnixListener"],[3,"UnixAcceptor"],[3,"PipePair"],[3,"PipeStream"],[3,"Process"],[3,"ProcessOutput"],[4,"StdioContainer"],[4,"ProcessExit"],[3,"Command"],[3,"StdinReader"],[3,"StdinReaderGuard"],[3,"StdReader"],[3,"StdWriter"],[3,"Timer"],[3,"LimitReader"],[3,"NullWriter"],[3,"ZeroReader"],[3,"NullReader"],[3,"MultiWriter"],[3,"ChainedReader"],[3,"TeeReader"],[3,"IterReader"],[8,"Reader"],[8,"ByRefReader"],[8,"BytesReader"],[8,"Writer"],[8,"ByRefWriter"],[8,"Buffer"],[8,"BufferPrelude"],[8,"Seek"],[8,"Listener"],[8,"Acceptor"],[3,"RefReader"],[3,"RefWriter"],[3,"Lines"],[3,"Chars"],[3,"IncomingConnections"],[3,"FilePermission"],[3,"Pipe"],[4,"MemoryMapKind"],[4,"MapOption"],[4,"MapError"],[8,"AsRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[3,"MemoryMap"],[4,"VarError"],[3,"Vars"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Path"],[3,"ParsePathError"],[4,"PathPrefix"],[3,"Path"],[3,"ParsePathError"],[8,"GenericPath"],[8,"BytesContainer"],[8,"GenericPathUnsafe"],[3,"Display"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Range"],[3,"Gamma"],[3,"GammaSmallShape"],[3,"GammaLargeShape"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[8,"SampleRange"],[8,"Sample"],[8,"IndependentSample"],[3,"Weighted"],[8,"Reseeder"],[3,"OsRng"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"Duration"],[4,"Bound"],[3,"HashMap"],[3,"HashSet"],[4,"Entry"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"Hasher"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[8,"HashState"],[3,"DefaultState"],[3,"Builder"],[3,"Thread"],[3,"JoinGuard"],[4,"Ordering"],[4,"TryLockError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Future"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"PoisonError"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"TaskPool"],[3,"Stdio"],[6,"IoResult"]]};

searchIndex['libc'] = {"items":[[0,"","libc","Bindings for the C standard library and other platform libraries"],[0,"types","",""],[0,"common","libc::types",""],[0,"c95","libc::types::common",""],[4,"c_void","libc::types::common::c95","Type used to construct void pointers for use with C."],[13,"__variant1","","",0],[13,"__variant2","","",0],[4,"FILE","",""],[4,"fpos_t","",""],[0,"c99","libc::types::common",""],[6,"int8_t","libc::types::common::c99",""],[6,"int16_t","",""],[6,"int32_t","",""],[6,"int64_t","",""],[6,"uint8_t","",""],[6,"uint16_t","",""],[6,"uint32_t","",""],[6,"uint64_t","",""],[0,"posix88","libc::types::common",""],[4,"DIR","libc::types::common::posix88",""],[4,"dirent_t","",""],[0,"os","libc::types",""],[0,"common","libc::types::os",""],[0,"posix01","libc::types::os::common",""],[3,"glob_t","libc::types::os::common::posix01",""],[12,"gl_pathc","","",1],[12,"__unused1","","",1],[12,"gl_offs","","",1],[12,"__unused2","","",1],[12,"gl_pathv","","",1],[12,"__unused3","","",1],[12,"__unused4","","",1],[12,"__unused5","","",1],[12,"__unused6","","",1],[12,"__unused7","","",1],[12,"__unused8","","",1],[3,"timeval","",""],[12,"tv_sec","","",2],[12,"tv_usec","","",2],[3,"timespec","",""],[12,"tv_sec","","",3],[12,"tv_nsec","","",3],[4,"timezone","",""],[6,"pthread_t","",""],[6,"sighandler_t","",""],[0,"bsd44","libc::types::os::common",""],[3,"sockaddr","libc::types::os::common::bsd44",""],[12,"sa_len","","",4],[12,"sa_family","","",4],[12,"sa_data","","",4],[3,"sockaddr_storage","",""],[12,"ss_len","","",5],[12,"ss_family","","",5],[12,"__ss_pad1","","",5],[12,"__ss_align","","",5],[12,"__ss_pad2","","",5],[3,"sockaddr_in","",""],[12,"sin_len","","",6],[12,"sin_family","","",6],[12,"sin_port","","",6],[12,"sin_addr","","",6],[12,"sin_zero","","",6],[3,"in_addr","",""],[12,"s_addr","","",7],[3,"sockaddr_in6","",""],[12,"sin6_len","","",8],[12,"sin6_family","","",8],[12,"sin6_port","","",8],[12,"sin6_flowinfo","","",8],[12,"sin6_addr","","",8],[12,"sin6_scope_id","","",8],[3,"in6_addr","",""],[12,"s6_addr","","",9],[3,"ip_mreq","",""],[12,"imr_multiaddr","","",10],[12,"imr_interface","","",10],[3,"ip6_mreq","",""],[12,"ipv6mr_multiaddr","","",11],[12,"ipv6mr_interface","","",11],[3,"addrinfo","",""],[12,"ai_flags","","",12],[12,"ai_family","","",12],[12,"ai_socktype","","",12],[12,"ai_protocol","","",12],[12,"ai_addrlen","","",12],[12,"ai_canonname","","",12],[12,"ai_addr","","",12],[12,"ai_next","","",12],[3,"sockaddr_un","",""],[12,"sun_len","","",13],[12,"sun_family","","",13],[12,"sun_path","","",13],[3,"ifaddrs","",""],[12,"ifa_next","","",14],[12,"ifa_name","","",14],[12,"ifa_flags","","",14],[12,"ifa_addr","","",14],[12,"ifa_netmask","","",14],[12,"ifa_dstaddr","","",14],[12,"ifa_data","","",14],[6,"socklen_t","",""],[6,"sa_family_t","",""],[6,"in_port_t","",""],[6,"in_addr_t","",""],[0,"arch","libc::types::os",""],[0,"c95","libc::types::os::arch",""],[6,"c_char","libc::types::os::arch::c95",""],[6,"c_schar","",""],[6,"c_uchar","",""],[6,"c_short","",""],[6,"c_ushort","",""],[6,"c_int","",""],[6,"c_uint","",""],[6,"c_long","",""],[6,"c_ulong","",""],[6,"c_float","",""],[6,"c_double","",""],[6,"size_t","",""],[6,"ptrdiff_t","",""],[6,"clock_t","",""],[6,"time_t","",""],[6,"suseconds_t","",""],[6,"wchar_t","",""],[0,"c99","libc::types::os::arch",""],[6,"c_longlong","libc::types::os::arch::c99",""],[6,"c_ulonglong","",""],[6,"intptr_t","",""],[6,"uintptr_t","",""],[6,"intmax_t","",""],[6,"uintmax_t","",""],[0,"posix88","libc::types::os::arch",""],[6,"off_t","libc::types::os::arch::posix88",""],[6,"dev_t","",""],[6,"ino_t","",""],[6,"pid_t","",""],[6,"uid_t","",""],[6,"gid_t","",""],[6,"useconds_t","",""],[6,"mode_t","",""],[6,"ssize_t","",""],[0,"posix01","libc::types::os::arch",""],[3,"stat","libc::types::os::arch::posix01",""],[12,"st_dev","","",15],[12,"st_mode","","",15],[12,"st_nlink","","",15],[12,"st_ino","","",15],[12,"st_uid","","",15],[12,"st_gid","","",15],[12,"st_rdev","","",15],[12,"st_atime","","",15],[12,"st_atime_nsec","","",15],[12,"st_mtime","","",15],[12,"st_mtime_nsec","","",15],[12,"st_ctime","","",15],[12,"st_ctime_nsec","","",15],[12,"st_birthtime","","",15],[12,"st_birthtime_nsec","","",15],[12,"st_size","","",15],[12,"st_blocks","","",15],[12,"st_blksize","","",15],[12,"st_flags","","",15],[12,"st_gen","","",15],[12,"st_lspare","","",15],[12,"st_qspare","","",15],[3,"utimbuf","",""],[12,"actime","","",16],[12,"modtime","","",16],[3,"pthread_attr_t","",""],[12,"__sig","","",17],[12,"__opaque","","",17],[6,"nlink_t","",""],[6,"blksize_t","",""],[6,"blkcnt_t","",""],[0,"extra","libc::types::os::arch",""],[3,"mach_timebase_info","libc::types::os::arch::extra",""],[12,"numer","","",18],[12,"denom","","",18],[6,"mach_timebase_info_data_t","",""],[0,"consts","libc",""],[0,"os","libc::consts",""],[0,"c95","libc::consts::os",""],[17,"EXIT_FAILURE","libc::consts::os::c95",""],[17,"EXIT_SUCCESS","",""],[17,"RAND_MAX","",""],[17,"EOF","",""],[17,"SEEK_SET","",""],[17,"SEEK_CUR","",""],[17,"SEEK_END","",""],[17,"_IOFBF","",""],[17,"_IONBF","",""],[17,"_IOLBF","",""],[17,"BUFSIZ","",""],[17,"FOPEN_MAX","",""],[17,"FILENAME_MAX","",""],[17,"L_tmpnam","",""],[17,"TMP_MAX","",""],[0,"posix88","libc::consts::os",""],[17,"O_RDONLY","libc::consts::os::posix88",""],[17,"O_WRONLY","",""],[17,"O_RDWR","",""],[17,"O_APPEND","",""],[17,"O_CREAT","",""],[17,"O_EXCL","",""],[17,"O_TRUNC","",""],[17,"S_IFIFO","",""],[17,"S_IFCHR","",""],[17,"S_IFBLK","",""],[17,"S_IFDIR","",""],[17,"S_IFREG","",""],[17,"S_IFLNK","",""],[17,"S_IFMT","",""],[17,"S_IEXEC","",""],[17,"S_IWRITE","",""],[17,"S_IREAD","",""],[17,"S_IRWXU","",""],[17,"S_IXUSR","",""],[17,"S_IWUSR","",""],[17,"S_IRUSR","",""],[17,"F_OK","",""],[17,"R_OK","",""],[17,"W_OK","",""],[17,"X_OK","",""],[17,"STDIN_FILENO","",""],[17,"STDOUT_FILENO","",""],[17,"STDERR_FILENO","",""],[17,"F_LOCK","",""],[17,"F_TEST","",""],[17,"F_TLOCK","",""],[17,"F_ULOCK","",""],[17,"SIGHUP","",""],[17,"SIGINT","",""],[17,"SIGQUIT","",""],[17,"SIGILL","",""],[17,"SIGABRT","",""],[17,"SIGFPE","",""],[17,"SIGKILL","",""],[17,"SIGSEGV","",""],[17,"SIGPIPE","",""],[17,"SIGALRM","",""],[17,"SIGTERM","",""],[17,"PROT_NONE","",""],[17,"PROT_READ","",""],[17,"PROT_WRITE","",""],[17,"PROT_EXEC","",""],[17,"MAP_FILE","",""],[17,"MAP_SHARED","",""],[17,"MAP_PRIVATE","",""],[17,"MAP_FIXED","",""],[17,"MAP_ANON","",""],[17,"MAP_FAILED","",""],[17,"MCL_CURRENT","",""],[17,"MCL_FUTURE","",""],[17,"MS_ASYNC","",""],[17,"MS_INVALIDATE","",""],[17,"MS_SYNC","",""],[17,"MS_KILLPAGES","",""],[17,"MS_DEACTIVATE","",""],[17,"EPERM","",""],[17,"ENOENT","",""],[17,"ESRCH","",""],[17,"EINTR","",""],[17,"EIO","",""],[17,"ENXIO","",""],[17,"E2BIG","",""],[17,"ENOEXEC","",""],[17,"EBADF","",""],[17,"ECHILD","",""],[17,"EDEADLK","",""],[17,"ENOMEM","",""],[17,"EACCES","",""],[17,"EFAULT","",""],[17,"ENOTBLK","",""],[17,"EBUSY","",""],[17,"EEXIST","",""],[17,"EXDEV","",""],[17,"ENODEV","",""],[17,"ENOTDIR","",""],[17,"EISDIR","",""],[17,"EINVAL","",""],[17,"ENFILE","",""],[17,"EMFILE","",""],[17,"ENOTTY","",""],[17,"ETXTBSY","",""],[17,"EFBIG","",""],[17,"ENOSPC","",""],[17,"ESPIPE","",""],[17,"EROFS","",""],[17,"EMLINK","",""],[17,"EPIPE","",""],[17,"EDOM","",""],[17,"ERANGE","",""],[17,"EAGAIN","",""],[17,"EWOULDBLOCK","",""],[17,"EINPROGRESS","",""],[17,"EALREADY","",""],[17,"ENOTSOCK","",""],[17,"EDESTADDRREQ","",""],[17,"EMSGSIZE","",""],[17,"EPROTOTYPE","",""],[17,"ENOPROTOOPT","",""],[17,"EPROTONOSUPPORT","",""],[17,"ESOCKTNOSUPPORT","",""],[17,"ENOTSUP","",""],[17,"EPFNOSUPPORT","",""],[17,"EAFNOSUPPORT","",""],[17,"EADDRINUSE","",""],[17,"EADDRNOTAVAIL","",""],[17,"ENETDOWN","",""],[17,"ENETUNREACH","",""],[17,"ENETRESET","",""],[17,"ECONNABORTED","",""],[17,"ECONNRESET","",""],[17,"ENOBUFS","",""],[17,"EISCONN","",""],[17,"ENOTCONN","",""],[17,"ESHUTDOWN","",""],[17,"ETOOMANYREFS","",""],[17,"ETIMEDOUT","",""],[17,"ECONNREFUSED","",""],[17,"ELOOP","",""],[17,"ENAMETOOLONG","",""],[17,"EHOSTDOWN","",""],[17,"EHOSTUNREACH","",""],[17,"ENOTEMPTY","",""],[17,"EPROCLIM","",""],[17,"EUSERS","",""],[17,"EDQUOT","",""],[17,"ESTALE","",""],[17,"EREMOTE","",""],[17,"EBADRPC","",""],[17,"ERPCMISMATCH","",""],[17,"EPROGUNAVAIL","",""],[17,"EPROGMISMATCH","",""],[17,"EPROCUNAVAIL","",""],[17,"ENOLCK","",""],[17,"ENOSYS","",""],[17,"EFTYPE","",""],[17,"EAUTH","",""],[17,"ENEEDAUTH","",""],[17,"EPWROFF","",""],[17,"EDEVERR","",""],[17,"EOVERFLOW","",""],[17,"EBADEXEC","",""],[17,"EBADARCH","",""],[17,"ESHLIBVERS","",""],[17,"EBADMACHO","",""],[17,"ECANCELED","",""],[17,"EIDRM","",""],[17,"ENOMSG","",""],[17,"EILSEQ","",""],[17,"ENOATTR","",""],[17,"EBADMSG","",""],[17,"EMULTIHOP","",""],[17,"ENODATA","",""],[17,"ENOLINK","",""],[17,"ENOSR","",""],[17,"ENOSTR","",""],[17,"EPROTO","",""],[17,"ETIME","",""],[17,"EOPNOTSUPP","",""],[17,"ENOPOLICY","",""],[17,"ENOTRECOVERABLE","",""],[17,"EOWNERDEAD","",""],[17,"EQFULL","",""],[17,"ELAST","",""],[0,"posix01","libc::consts::os",""],[17,"F_DUPFD","libc::consts::os::posix01",""],[17,"F_GETFD","",""],[17,"F_SETFD","",""],[17,"F_GETFL","",""],[17,"F_SETFL","",""],[17,"SIGTRAP","",""],[17,"SIGPIPE","",""],[17,"SIG_IGN","",""],[17,"GLOB_APPEND","",""],[17,"GLOB_DOOFFS","",""],[17,"GLOB_ERR","",""],[17,"GLOB_MARK","",""],[17,"GLOB_NOCHECK","",""],[17,"GLOB_NOSORT","",""],[17,"GLOB_NOESCAPE","",""],[17,"GLOB_NOSPACE","",""],[17,"GLOB_ABORTED","",""],[17,"GLOB_NOMATCH","",""],[17,"POSIX_MADV_NORMAL","",""],[17,"POSIX_MADV_RANDOM","",""],[17,"POSIX_MADV_SEQUENTIAL","",""],[17,"POSIX_MADV_WILLNEED","",""],[17,"POSIX_MADV_DONTNEED","",""],[17,"_SC_IOV_MAX","",""],[17,"_SC_GETGR_R_SIZE_MAX","",""],[17,"_SC_GETPW_R_SIZE_MAX","",""],[17,"_SC_LOGIN_NAME_MAX","",""],[17,"_SC_MQ_PRIO_MAX","",""],[17,"_SC_THREAD_ATTR_STACKADDR","",""],[17,"_SC_THREAD_ATTR_STACKSIZE","",""],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","",""],[17,"_SC_THREAD_KEYS_MAX","",""],[17,"_SC_THREAD_PRIO_INHERIT","",""],[17,"_SC_THREAD_PRIO_PROTECT","",""],[17,"_SC_THREAD_PRIORITY_SCHEDULING","",""],[17,"_SC_THREAD_PROCESS_SHARED","",""],[17,"_SC_THREAD_SAFE_FUNCTIONS","",""],[17,"_SC_THREAD_STACK_MIN","",""],[17,"_SC_THREAD_THREADS_MAX","",""],[17,"_SC_THREADS","",""],[17,"_SC_TTY_NAME_MAX","",""],[17,"_SC_ATEXIT_MAX","",""],[17,"_SC_XOPEN_CRYPT","",""],[17,"_SC_XOPEN_ENH_I18N","",""],[17,"_SC_XOPEN_LEGACY","",""],[17,"_SC_XOPEN_REALTIME","",""],[17,"_SC_XOPEN_REALTIME_THREADS","",""],[17,"_SC_XOPEN_SHM","",""],[17,"_SC_XOPEN_UNIX","",""],[17,"_SC_XOPEN_VERSION","",""],[17,"_SC_XOPEN_XCU_VERSION","",""],[17,"PTHREAD_CREATE_JOINABLE","",""],[17,"PTHREAD_CREATE_DETACHED","",""],[17,"PTHREAD_STACK_MIN","",""],[0,"bsd44","libc::consts::os",""],[17,"MADV_NORMAL","libc::consts::os::bsd44",""],[17,"MADV_RANDOM","",""],[17,"MADV_SEQUENTIAL","",""],[17,"MADV_WILLNEED","",""],[17,"MADV_DONTNEED","",""],[17,"MADV_FREE","",""],[17,"MADV_ZERO_WIRED_PAGES","",""],[17,"MADV_FREE_REUSABLE","",""],[17,"MADV_FREE_REUSE","",""],[17,"MADV_CAN_REUSE","",""],[17,"MINCORE_INCORE","",""],[17,"MINCORE_REFERENCED","",""],[17,"MINCORE_MODIFIED","",""],[17,"MINCORE_REFERENCED_OTHER","",""],[17,"MINCORE_MODIFIED_OTHER","",""],[17,"AF_UNIX","",""],[17,"AF_INET","",""],[17,"AF_INET6","",""],[17,"SOCK_STREAM","",""],[17,"SOCK_DGRAM","",""],[17,"SOCK_RAW","",""],[17,"IPPROTO_TCP","",""],[17,"IPPROTO_IP","",""],[17,"IPPROTO_IPV6","",""],[17,"IP_MULTICAST_TTL","",""],[17,"IP_MULTICAST_LOOP","",""],[17,"IP_TTL","",""],[17,"IP_HDRINCL","",""],[17,"IP_ADD_MEMBERSHIP","",""],[17,"IP_DROP_MEMBERSHIP","",""],[17,"IPV6_ADD_MEMBERSHIP","",""],[17,"IPV6_DROP_MEMBERSHIP","",""],[17,"TCP_NODELAY","",""],[17,"TCP_KEEPALIVE","",""],[17,"SOL_SOCKET","",""],[17,"SO_KEEPALIVE","",""],[17,"SO_BROADCAST","",""],[17,"SO_REUSEADDR","",""],[17,"SO_ERROR","",""],[17,"IFF_LOOPBACK","",""],[17,"SHUT_RD","",""],[17,"SHUT_WR","",""],[17,"SHUT_RDWR","",""],[0,"extra","libc::consts::os",""],[17,"O_DSYNC","libc::consts::os::extra",""],[17,"O_SYNC","",""],[17,"O_NONBLOCK","",""],[17,"F_FULLFSYNC","",""],[17,"MAP_COPY","",""],[17,"MAP_RENAME","",""],[17,"MAP_NORESERVE","",""],[17,"MAP_NOEXTEND","",""],[17,"MAP_HASSEMAPHORE","",""],[17,"MAP_NOCACHE","",""],[17,"MAP_JIT","",""],[17,"MAP_STACK","",""],[17,"IPPROTO_RAW","",""],[0,"sysconf","libc::consts::os",""],[17,"_SC_ARG_MAX","libc::consts::os::sysconf",""],[17,"_SC_CHILD_MAX","",""],[17,"_SC_CLK_TCK","",""],[17,"_SC_NGROUPS_MAX","",""],[17,"_SC_OPEN_MAX","",""],[17,"_SC_JOB_CONTROL","",""],[17,"_SC_SAVED_IDS","",""],[17,"_SC_VERSION","",""],[17,"_SC_BC_BASE_MAX","",""],[17,"_SC_BC_DIM_MAX","",""],[17,"_SC_BC_SCALE_MAX","",""],[17,"_SC_BC_STRING_MAX","",""],[17,"_SC_COLL_WEIGHTS_MAX","",""],[17,"_SC_EXPR_NEST_MAX","",""],[17,"_SC_LINE_MAX","",""],[17,"_SC_RE_DUP_MAX","",""],[17,"_SC_2_VERSION","",""],[17,"_SC_2_C_BIND","",""],[17,"_SC_2_C_DEV","",""],[17,"_SC_2_CHAR_TERM","",""],[17,"_SC_2_FORT_DEV","",""],[17,"_SC_2_FORT_RUN","",""],[17,"_SC_2_LOCALEDEF","",""],[17,"_SC_2_SW_DEV","",""],[17,"_SC_2_UPE","",""],[17,"_SC_STREAM_MAX","",""],[17,"_SC_TZNAME_MAX","",""],[17,"_SC_ASYNCHRONOUS_IO","",""],[17,"_SC_PAGESIZE","",""],[17,"_SC_MEMLOCK","",""],[17,"_SC_MEMLOCK_RANGE","",""],[17,"_SC_MEMORY_PROTECTION","",""],[17,"_SC_MESSAGE_PASSING","",""],[17,"_SC_PRIORITIZED_IO","",""],[17,"_SC_PRIORITY_SCHEDULING","",""],[17,"_SC_REALTIME_SIGNALS","",""],[17,"_SC_SEMAPHORES","",""],[17,"_SC_FSYNC","",""],[17,"_SC_SHARED_MEMORY_OBJECTS","",""],[17,"_SC_SYNCHRONIZED_IO","",""],[17,"_SC_TIMERS","",""],[17,"_SC_AIO_LISTIO_MAX","",""],[17,"_SC_AIO_MAX","",""],[17,"_SC_AIO_PRIO_DELTA_MAX","",""],[17,"_SC_DELAYTIMER_MAX","",""],[17,"_SC_MQ_OPEN_MAX","",""],[17,"_SC_MAPPED_FILES","",""],[17,"_SC_RTSIG_MAX","",""],[17,"_SC_SEM_NSEMS_MAX","",""],[17,"_SC_SEM_VALUE_MAX","",""],[17,"_SC_SIGQUEUE_MAX","",""],[17,"_SC_TIMER_MAX","",""],[17,"_SC_XBS5_ILP32_OFF32","",""],[17,"_SC_XBS5_ILP32_OFFBIG","",""],[17,"_SC_XBS5_LP64_OFF64","",""],[17,"_SC_XBS5_LPBIG_OFFBIG","",""],[0,"funcs","libc",""],[0,"c95","libc::funcs",""],[0,"ctype","libc::funcs::c95",""],[5,"isalnum","libc::funcs::c95::ctype",""],[5,"isalpha","",""],[5,"iscntrl","",""],[5,"isdigit","",""],[5,"isgraph","",""],[5,"islower","",""],[5,"isprint","",""],[5,"ispunct","",""],[5,"isspace","",""],[5,"isupper","",""],[5,"isxdigit","",""],[5,"tolower","",""],[5,"toupper","",""],[0,"stdio","libc::funcs::c95",""],[5,"fopen","libc::funcs::c95::stdio",""],[5,"freopen","",""],[5,"fflush","",""],[5,"fclose","",""],[5,"remove","",""],[5,"rename","",""],[5,"tmpfile","",""],[5,"setvbuf","",""],[5,"setbuf","",""],[5,"fgetc","",""],[5,"fgets","",""],[5,"fputc","",""],[5,"fputs","",""],[5,"puts","",""],[5,"ungetc","",""],[5,"fread","",""],[5,"fwrite","",""],[5,"fseek","",""],[5,"ftell","",""],[5,"rewind","",""],[5,"fgetpos","",""],[5,"fsetpos","",""],[5,"feof","",""],[5,"ferror","",""],[5,"perror","",""],[0,"stdlib","libc::funcs::c95",""],[5,"abs","libc::funcs::c95::stdlib",""],[5,"labs","",""],[5,"atof","",""],[5,"atoi","",""],[5,"strtod","",""],[5,"strtol","",""],[5,"strtoul","",""],[5,"calloc","",""],[5,"malloc","",""],[5,"realloc","",""],[5,"free","",""],[5,"exit","","Exits the running program in a possibly dangerous manner."],[5,"_exit","",""],[5,"atexit","",""],[5,"system","",""],[5,"getenv","",""],[5,"rand","",""],[5,"srand","",""],[0,"string","libc::funcs::c95",""],[5,"strcpy","libc::funcs::c95::string",""],[5,"strncpy","",""],[5,"strcat","",""],[5,"strncat","",""],[5,"strcmp","",""],[5,"strncmp","",""],[5,"strcoll","",""],[5,"strchr","",""],[5,"strrchr","",""],[5,"strspn","",""],[5,"strcspn","",""],[5,"strpbrk","",""],[5,"strstr","",""],[5,"strlen","",""],[5,"strerror","",""],[5,"strtok","",""],[5,"strxfrm","",""],[5,"wcslen","",""],[5,"memcmp","",""],[5,"memchr","",""],[0,"posix88","libc::funcs",""],[0,"stat_","libc::funcs::posix88",""],[5,"chmod","libc::funcs::posix88::stat_",""],[5,"fchmod","",""],[5,"fstat","",""],[5,"mkdir","",""],[5,"mkfifo","",""],[5,"stat","",""],[0,"stdio","libc::funcs::posix88",""],[5,"popen","libc::funcs::posix88::stdio",""],[5,"pclose","",""],[5,"fdopen","",""],[5,"fileno","",""],[0,"fcntl","libc::funcs::posix88",""],[5,"open","libc::funcs::posix88::fcntl",""],[5,"creat","",""],[5,"fcntl","",""],[0,"dirent","libc::funcs::posix88",""],[5,"opendir","libc::funcs::posix88::dirent",""],[5,"readdir_r","",""],[5,"closedir","",""],[5,"rewinddir","",""],[5,"seekdir","",""],[5,"telldir","",""],[0,"unistd","libc::funcs::posix88",""],[5,"access","libc::funcs::posix88::unistd",""],[5,"alarm","",""],[5,"chdir","",""],[5,"chown","",""],[5,"close","",""],[5,"dup","",""],[5,"dup2","",""],[5,"execv","",""],[5,"execve","",""],[5,"execvp","",""],[5,"fork","",""],[5,"fpathconf","",""],[5,"getcwd","",""],[5,"getegid","",""],[5,"geteuid","",""],[5,"getgid","",""],[5,"getgroups","",""],[5,"getlogin","",""],[5,"getopt","",""],[5,"getpgrp","",""],[5,"getpid","",""],[5,"getppid","",""],[5,"getuid","",""],[5,"getsid","",""],[5,"isatty","",""],[5,"link","",""],[5,"lseek","",""],[5,"pathconf","",""],[5,"pause","",""],[5,"pipe","",""],[5,"read","",""],[5,"rmdir","",""],[5,"setgid","",""],[5,"setpgid","",""],[5,"setsid","",""],[5,"setuid","",""],[5,"sleep","",""],[5,"usleep","",""],[5,"nanosleep","",""],[5,"sysconf","",""],[5,"tcgetpgrp","",""],[5,"ttyname","",""],[5,"unlink","",""],[5,"write","",""],[5,"pread","",""],[5,"pwrite","",""],[5,"utime","",""],[17,"_PC_NAME_MAX","",""],[0,"signal","libc::funcs::posix88",""],[5,"kill","libc::funcs::posix88::signal",""],[0,"mman","libc::funcs::posix88",""],[5,"mlock","libc::funcs::posix88::mman",""],[5,"munlock","",""],[5,"mlockall","",""],[5,"munlockall","",""],[5,"mmap","",""],[5,"munmap","",""],[5,"mprotect","",""],[5,"msync","",""],[5,"shm_open","",""],[5,"shm_unlink","",""],[0,"net","libc::funcs::posix88",""],[5,"if_nametoindex","libc::funcs::posix88::net",""],[0,"posix01","libc::funcs",""],[0,"stat_","libc::funcs::posix01",""],[5,"lstat","libc::funcs::posix01::stat_",""],[0,"unistd","libc::funcs::posix01",""],[5,"readlink","libc::funcs::posix01::unistd",""],[5,"fsync","",""],[5,"setenv","",""],[5,"unsetenv","",""],[5,"putenv","",""],[5,"symlink","",""],[5,"ftruncate","",""],[0,"signal","libc::funcs::posix01",""],[5,"signal","libc::funcs::posix01::signal",""],[0,"glob","libc::funcs::posix01",""],[5,"glob","libc::funcs::posix01::glob",""],[5,"globfree","",""],[0,"mman","libc::funcs::posix01",""],[5,"posix_madvise","libc::funcs::posix01::mman",""],[0,"bsd43","libc::funcs",""],[5,"socket","libc::funcs::bsd43",""],[5,"connect","",""],[5,"bind","",""],[5,"listen","",""],[5,"accept","",""],[5,"getpeername","",""],[5,"getsockname","",""],[5,"setsockopt","",""],[5,"recv","",""],[5,"send","",""],[5,"recvfrom","",""],[5,"sendto","",""],[5,"getifaddrs","",""],[5,"freeifaddrs","",""],[5,"shutdown","",""],[0,"bsd44","libc::funcs",""],[5,"ioctl","libc::funcs::bsd44",""],[5,"sysctl","",""],[5,"sysctlbyname","",""],[5,"sysctlnametomib","",""],[5,"getdtablesize","",""],[5,"madvise","",""],[5,"mincore","",""],[0,"extra","libc::funcs",""],[5,"_NSGetExecutablePath","libc::funcs::extra",""]],"paths":[[4,"c_void"],[3,"glob_t"],[3,"timeval"],[3,"timespec"],[3,"sockaddr"],[3,"sockaddr_storage"],[3,"sockaddr_in"],[3,"in_addr"],[3,"sockaddr_in6"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ip6_mreq"],[3,"addrinfo"],[3,"sockaddr_un"],[3,"ifaddrs"],[3,"stat"],[3,"utimbuf"],[3,"pthread_attr_t"],[3,"mach_timebase_info"]]};

initSearch(searchIndex);
